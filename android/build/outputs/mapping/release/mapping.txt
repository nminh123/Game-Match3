# compiler: R8
# compiler_version: 8.1.68
# min_api: 19
# common_typos_disable
# {"id":"com.android.tools.r8.mapping","version":"2.2"}
# pg_map_id: 3bc1cbe
# pg_map_hash: SHA-256 3bc1cbe8e6f15653c071f0942bfab59fcd593af786bd269296ba556764db11fd
com.badlogic.gdx.AbstractGraphics -> a.a:
    void <init>() -> <init>
com.badlogic.gdx.AbstractInput -> a.b:
    boolean[] pressedKeys -> a
    boolean[] justPressedKeys -> b
    com.badlogic.gdx.utils.IntSet keysToCatch -> c
    int pressedKeyCount -> d
    boolean keyJustPressed -> e
    1:1:void <init>():0:0 -> <init>
    1:1:boolean isKeyPressed(int):0:0 -> g
    1:1:boolean isCatchBackKey():0:0 -> l
    1:1:boolean isCatchKey(int):0:0 -> q
    1:1:void setCatchKey(int,boolean):0:0 -> r
com.badlogic.gdx.Application -> a.c:
    void error(java.lang.String,java.lang.String,java.lang.Throwable) -> a
    com.badlogic.gdx.Application$ApplicationType getType() -> e
      # {"id":"com.android.tools.r8.residualsignature","signature":"()La/c$a;"}
    void log(java.lang.String,java.lang.String,java.lang.Throwable) -> f
    void error(java.lang.String,java.lang.String) -> g
    void log(java.lang.String,java.lang.String) -> h
    com.badlogic.gdx.Graphics getGraphics() -> i
      # {"id":"com.android.tools.r8.residualsignature","signature":"()La/j;"}
    void exit() -> j
    void addLifecycleListener(com.badlogic.gdx.LifecycleListener) -> k
      # {"id":"com.android.tools.r8.residualsignature","signature":"(La/n;)V"}
    com.badlogic.gdx.ApplicationListener getApplicationListener() -> l
      # {"id":"com.android.tools.r8.residualsignature","signature":"()La/d;"}
    void postRunnable(java.lang.Runnable) -> m
    int getVersion() -> n
    void removeLifecycleListener(com.badlogic.gdx.LifecycleListener) -> o
      # {"id":"com.android.tools.r8.residualsignature","signature":"(La/n;)V"}
    com.badlogic.gdx.utils.Clipboard getClipboard() -> p
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/d;"}
com.badlogic.gdx.Application$ApplicationType -> a.c$a:
    com.badlogic.gdx.Application$ApplicationType Android -> a
    com.badlogic.gdx.Application$ApplicationType Desktop -> b
    com.badlogic.gdx.Application$ApplicationType HeadlessDesktop -> c
    com.badlogic.gdx.Application$ApplicationType Applet -> d
    com.badlogic.gdx.Application$ApplicationType WebGL -> e
    com.badlogic.gdx.Application$ApplicationType iOS -> f
    com.badlogic.gdx.Application$ApplicationType[] $VALUES -> g
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>(java.lang.String,int):0:0 -> <init>
    1:1:com.badlogic.gdx.Application$ApplicationType valueOf(java.lang.String):0:0 -> valueOf
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;)La/c$a;"}
    1:1:com.badlogic.gdx.Application$ApplicationType[] values():0:0 -> values
      # {"id":"com.android.tools.r8.residualsignature","signature":"()[La/c$a;"}
com.badlogic.gdx.ApplicationListener -> a.d:
    void resume() -> a
    void pause() -> b
    void dispose() -> dispose
    void resize(int,int) -> e
    void create() -> f
    void render() -> g
com.badlogic.gdx.ApplicationLogger -> a.e:
    void error(java.lang.String,java.lang.String,java.lang.Throwable) -> a
    void log(java.lang.String,java.lang.String,java.lang.Throwable) -> f
    void error(java.lang.String,java.lang.String) -> g
    void log(java.lang.String,java.lang.String) -> h
com.badlogic.gdx.Audio -> a.f:
com.badlogic.gdx.Files -> a.g:
    com.badlogic.gdx.files.FileHandle classpath(java.lang.String) -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;)Le/a;"}
    com.badlogic.gdx.files.FileHandle internal(java.lang.String) -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;)Le/a;"}
    java.lang.String getLocalStoragePath() -> c
    java.lang.String getExternalStoragePath() -> d
    com.badlogic.gdx.files.FileHandle getFileHandle(java.lang.String,com.badlogic.gdx.Files$FileType) -> e
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;La/g$a;)Le/a;"}
com.badlogic.gdx.Files$FileType -> a.g$a:
    com.badlogic.gdx.Files$FileType Classpath -> a
    com.badlogic.gdx.Files$FileType Internal -> b
    com.badlogic.gdx.Files$FileType External -> c
    com.badlogic.gdx.Files$FileType Absolute -> d
    com.badlogic.gdx.Files$FileType Local -> e
    com.badlogic.gdx.Files$FileType[] $VALUES -> f
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>(java.lang.String,int):0:0 -> <init>
    1:1:com.badlogic.gdx.Files$FileType valueOf(java.lang.String):0:0 -> valueOf
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;)La/g$a;"}
    1:1:com.badlogic.gdx.Files$FileType[] values():0:0 -> values
      # {"id":"com.android.tools.r8.residualsignature","signature":"()[La/g$a;"}
com.badlogic.gdx.Game -> a.h:
    com.badlogic.gdx.Screen screen -> a
    void <init>() -> <init>
    1:1:void resume():0:0 -> a
    1:1:void pause():0:0 -> b
    1:1:void setScreen(com.badlogic.gdx.Screen):0:0 -> c
      # {"id":"com.android.tools.r8.residualsignature","signature":"(La/p;)V"}
    1:1:void dispose():0:0 -> dispose
    1:1:void resize(int,int):0:0 -> e
    1:1:void render():0:0 -> g
com.badlogic.gdx.Gdx -> a.i:
    com.badlogic.gdx.Application app -> a
    com.badlogic.gdx.Graphics graphics -> b
    com.badlogic.gdx.Audio audio -> c
    com.badlogic.gdx.Input input -> d
    com.badlogic.gdx.Files files -> e
    com.badlogic.gdx.Net net -> f
    com.badlogic.gdx.graphics.GL20 gl -> g
    com.badlogic.gdx.graphics.GL20 gl20 -> h
    com.badlogic.gdx.graphics.GL30 gl30 -> i
com.badlogic.gdx.Graphics -> a.j:
    int getWidth() -> b
    int getHeight() -> c
    boolean isGL30Available() -> d
    int getBackBufferHeight() -> e
    int getBackBufferWidth() -> f
    boolean supportsExtension(java.lang.String) -> g
    com.badlogic.gdx.Graphics$DisplayMode getDisplayMode() -> h
      # {"id":"com.android.tools.r8.residualsignature","signature":"()La/j$b;"}
    void requestRendering() -> i
    float getDeltaTime() -> j
com.badlogic.gdx.Graphics$BufferFormat -> a.j$a:
    int r -> a
    int g -> b
    int b -> c
    int a -> d
    int depth -> e
    int stencil -> f
    int samples -> g
    boolean coverageSampling -> h
    1:1:void <init>(int,int,int,int,int,int,int,boolean):0:0 -> <init>
    1:1:java.lang.String toString():0:0 -> toString
com.badlogic.gdx.Graphics$DisplayMode -> a.j$b:
    int width -> a
    int height -> b
    int refreshRate -> c
    int bitsPerPixel -> d
    1:1:void <init>(int,int,int,int):0:0 -> <init>
    1:1:java.lang.String toString():0:0 -> toString
com.badlogic.gdx.Input -> a.k:
    boolean isButtonPressed(int) -> a
    boolean isTouched() -> b
    boolean isKeyPressed(int) -> g
    void setInputProcessor(com.badlogic.gdx.InputProcessor) -> h
      # {"id":"com.android.tools.r8.residualsignature","signature":"(La/m;)V"}
    long getCurrentEventTime() -> j
    void setOnscreenKeyboardVisible(boolean) -> k
    boolean isCatchBackKey() -> l
    int getX() -> m
    int getY() -> o
    boolean isTouched(int) -> p
com.badlogic.gdx.Input$OnscreenKeyboardType -> a.k$a:
    com.badlogic.gdx.Input$OnscreenKeyboardType Default -> a
    com.badlogic.gdx.Input$OnscreenKeyboardType NumberPad -> b
    com.badlogic.gdx.Input$OnscreenKeyboardType PhonePad -> c
    com.badlogic.gdx.Input$OnscreenKeyboardType Email -> d
    com.badlogic.gdx.Input$OnscreenKeyboardType Password -> e
    com.badlogic.gdx.Input$OnscreenKeyboardType URI -> f
    com.badlogic.gdx.Input$OnscreenKeyboardType[] $VALUES -> g
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>(java.lang.String,int):0:0 -> <init>
    1:1:com.badlogic.gdx.Input$OnscreenKeyboardType valueOf(java.lang.String):0:0 -> valueOf
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;)La/k$a;"}
    1:1:com.badlogic.gdx.Input$OnscreenKeyboardType[] values():0:0 -> values
      # {"id":"com.android.tools.r8.residualsignature","signature":"()[La/k$a;"}
com.badlogic.gdx.Input$Orientation -> a.k$b:
    com.badlogic.gdx.Input$Orientation Landscape -> a
    com.badlogic.gdx.Input$Orientation Portrait -> b
    com.badlogic.gdx.Input$Orientation[] $VALUES -> c
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>(java.lang.String,int):0:0 -> <init>
    1:1:com.badlogic.gdx.Input$Orientation valueOf(java.lang.String):0:0 -> valueOf
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;)La/k$b;"}
    1:1:com.badlogic.gdx.Input$Orientation[] values():0:0 -> values
      # {"id":"com.android.tools.r8.residualsignature","signature":"()[La/k$b;"}
com.badlogic.gdx.InputAdapter -> a.l:
    void <init>() -> <init>
    1:1:boolean keyDown(int):0:0 -> keyDown
    1:1:boolean keyTyped(char):0:0 -> keyTyped
    1:1:boolean keyUp(int):0:0 -> keyUp
    1:1:boolean mouseMoved(int,int):0:0 -> mouseMoved
    1:1:boolean scrolled(float,float):0:0 -> scrolled
    1:1:boolean touchCancelled(int,int,int,int):0:0 -> touchCancelled
    1:1:boolean touchDown(int,int,int,int):0:0 -> touchDown
    1:1:boolean touchDragged(int,int,int):0:0 -> touchDragged
    1:1:boolean touchUp(int,int,int,int):0:0 -> touchUp
com.badlogic.gdx.InputProcessor -> a.m:
    boolean keyDown(int) -> keyDown
    boolean keyTyped(char) -> keyTyped
    boolean keyUp(int) -> keyUp
    boolean mouseMoved(int,int) -> mouseMoved
    boolean scrolled(float,float) -> scrolled
    boolean touchCancelled(int,int,int,int) -> touchCancelled
    boolean touchDown(int,int,int,int) -> touchDown
    boolean touchDragged(int,int,int) -> touchDragged
    boolean touchUp(int,int,int,int) -> touchUp
com.badlogic.gdx.LifecycleListener -> a.n:
    void resume() -> a
    void pause() -> b
    void dispose() -> dispose
com.badlogic.gdx.Net -> a.o:
    boolean openURI(java.lang.String) -> a
com.badlogic.gdx.Screen -> a.p:
    void resume() -> a
    void pause() -> b
    void resize(int,int) -> e
    void render(float) -> g
    void hide() -> p
    void show() -> t
com.badlogic.gdx.backends.android.AndroidApplication -> b.a:
    com.badlogic.gdx.backends.android.AndroidGraphics graphics -> a
    com.badlogic.gdx.backends.android.AndroidInput input -> b
    com.badlogic.gdx.backends.android.AndroidAudio audio -> c
    com.badlogic.gdx.backends.android.AndroidFiles files -> d
    com.badlogic.gdx.backends.android.AndroidNet net -> e
    com.badlogic.gdx.backends.android.AndroidClipboard clipboard -> f
    com.badlogic.gdx.ApplicationListener listener -> g
    android.os.Handler handler -> h
    boolean firstResume -> i
    com.badlogic.gdx.utils.Array runnables -> j
    com.badlogic.gdx.utils.Array executedRunnables -> k
    com.badlogic.gdx.utils.SnapshotArray lifecycleListeners -> l
    com.badlogic.gdx.utils.Array androidEventListeners -> m
    int logLevel -> n
    com.badlogic.gdx.ApplicationLogger applicationLogger -> o
    boolean useImmersiveMode -> p
    int wasFocusChanged -> q
    boolean isWaitingForAudio -> r
    1:1:void <init>():0:0 -> <init>
    1:1:com.badlogic.gdx.Audio getAudio():0:0 -> A
      # {"id":"com.android.tools.r8.residualsignature","signature":"()La/f;"}
    1:1:com.badlogic.gdx.Files getFiles():0:0 -> B
      # {"id":"com.android.tools.r8.residualsignature","signature":"()La/g;"}
    1:1:com.badlogic.gdx.Net getNet():0:0 -> C
      # {"id":"com.android.tools.r8.residualsignature","signature":"()La/o;"}
    1:1:void init(com.badlogic.gdx.ApplicationListener,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration,boolean):0:0 -> D
      # {"id":"com.android.tools.r8.residualsignature","signature":"(La/d;Lb/c;Z)V"}
    1:1:void initialize(com.badlogic.gdx.ApplicationListener,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration):0:0 -> E
      # {"id":"com.android.tools.r8.residualsignature","signature":"(La/d;Lb/c;)V"}
    1:1:void setApplicationLogger(com.badlogic.gdx.ApplicationLogger):0:0 -> F
      # {"id":"com.android.tools.r8.residualsignature","signature":"(La/e;)V"}
    1:1:void error(java.lang.String,java.lang.String,java.lang.Throwable):0:0 -> a
    1:1:com.badlogic.gdx.utils.Array getExecutedRunnables():0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/b;"}
    1:1:void useImmersiveMode(boolean):0:0 -> c
    1:1:com.badlogic.gdx.utils.Array getRunnables():0:0 -> d
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/b;"}
    1:1:com.badlogic.gdx.Application$ApplicationType getType():0:0 -> e
      # {"id":"com.android.tools.r8.residualsignature","signature":"()La/c$a;"}
    1:1:void log(java.lang.String,java.lang.String,java.lang.Throwable):0:0 -> f
    1:1:void error(java.lang.String,java.lang.String):0:0 -> g
    1:1:android.os.Handler getHandler():0:0 -> getHandler
    1:1:void log(java.lang.String,java.lang.String):0:0 -> h
    1:1:com.badlogic.gdx.Graphics getGraphics():0:0 -> i
      # {"id":"com.android.tools.r8.residualsignature","signature":"()La/j;"}
    1:1:void exit():0:0 -> j
    1:1:void addLifecycleListener(com.badlogic.gdx.LifecycleListener):0:0 -> k
      # {"id":"com.android.tools.r8.residualsignature","signature":"(La/n;)V"}
    1:1:com.badlogic.gdx.ApplicationListener getApplicationListener():0:0 -> l
      # {"id":"com.android.tools.r8.residualsignature","signature":"()La/d;"}
    1:1:void postRunnable(java.lang.Runnable):0:0 -> m
    1:1:int getVersion():0:0 -> n
    1:1:void removeLifecycleListener(com.badlogic.gdx.LifecycleListener):0:0 -> o
      # {"id":"com.android.tools.r8.residualsignature","signature":"(La/n;)V"}
    1:1:void onActivityResult(int,int,android.content.Intent):0:0 -> onActivityResult
    1:1:void onConfigurationChanged(android.content.res.Configuration):0:0 -> onConfigurationChanged
    1:1:void onDestroy():0:0 -> onDestroy
    1:1:void onPause():0:0 -> onPause
    1:1:void onResume():0:0 -> onResume
    1:1:void onWindowFocusChanged(boolean):0:0 -> onWindowFocusChanged
    1:1:com.badlogic.gdx.utils.Clipboard getClipboard():0:0 -> p
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/d;"}
    1:1:android.content.Context getContext():0:0 -> q
    1:1:android.view.Window getApplicationWindow():0:0 -> r
    1:1:com.badlogic.gdx.backends.android.AndroidInput getInput():0:0 -> s
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lb/x;"}
    1:1:com.badlogic.gdx.utils.SnapshotArray getLifecycleListeners():0:0 -> t
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/k0;"}
    1:1:com.badlogic.gdx.backends.android.AndroidAudio createAudio(android.content.Context,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration):0:0 -> u
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Landroid/content/Context;Lb/c;)Lb/e;"}
    1:1:com.badlogic.gdx.backends.android.AndroidFiles createFiles():0:0 -> v
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lb/i;"}
    1:1:com.badlogic.gdx.backends.android.AndroidInput createInput(com.badlogic.gdx.Application,android.content.Context,java.lang.Object,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration):0:0 -> w
      # {"id":"com.android.tools.r8.residualsignature","signature":"(La/c;Landroid/content/Context;Ljava/lang/Object;Lb/c;)Lb/x;"}
    1:1:android.widget.FrameLayout$LayoutParams createLayoutParams():0:0 -> x
    1:1:void createWakeLock(boolean):0:0 -> y
    1:1:com.badlogic.gdx.ApplicationLogger getApplicationLogger():0:0 -> z
      # {"id":"com.android.tools.r8.residualsignature","signature":"()La/e;"}
com.badlogic.gdx.backends.android.AndroidApplication$1 -> b.a$a:
    com.badlogic.gdx.backends.android.AndroidApplication this$0 -> a
    1:1:void <init>(com.badlogic.gdx.backends.android.AndroidApplication):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lb/a;)V"}
    1:1:void resume():0:0 -> a
    1:1:void pause():0:0 -> b
    1:1:void dispose():0:0 -> dispose
com.badlogic.gdx.backends.android.AndroidApplication$2 -> b.a$b:
    com.badlogic.gdx.backends.android.AndroidApplication this$0 -> a
    1:1:void <init>(com.badlogic.gdx.backends.android.AndroidApplication):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lb/a;)V"}
    1:1:void run():0:0 -> run
com.badlogic.gdx.backends.android.AndroidApplicationBase -> b.b:
    com.badlogic.gdx.utils.Array getExecutedRunnables() -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/b;"}
    void useImmersiveMode(boolean) -> c
    com.badlogic.gdx.utils.Array getRunnables() -> d
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/b;"}
    android.os.Handler getHandler() -> getHandler
    android.view.WindowManager getWindowManager() -> getWindowManager
    android.content.Context getContext() -> q
    android.view.Window getApplicationWindow() -> r
    com.badlogic.gdx.backends.android.AndroidInput getInput() -> s
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lb/x;"}
    void startActivity(android.content.Intent) -> startActivity
    com.badlogic.gdx.utils.SnapshotArray getLifecycleListeners() -> t
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/k0;"}
com.badlogic.gdx.backends.android.AndroidApplicationConfiguration -> b.c:
    int r -> a
    int g -> b
    int b -> c
    int a -> d
    int depth -> e
    int stencil -> f
    int numSamples -> g
    boolean useAccelerometer -> h
    boolean useGyroscope -> i
    boolean useCompass -> j
    boolean useRotationVectorSensor -> k
    int sensorDelay -> l
    int touchSleepTime -> m
    boolean useWakelock -> n
    boolean disableAudio -> o
    int maxSimultaneousSounds -> p
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy resolutionStrategy -> q
    boolean getTouchEventsForLiveWallpaper -> r
    boolean useImmersiveMode -> s
    boolean useGL30 -> t
    int maxNetThreads -> u
    com.badlogic.gdx.backends.android.GdxNativeLoader nativeLoader -> v
    1:1:void <init>():0:0 -> <init>
com.badlogic.gdx.backends.android.AndroidApplicationConfiguration$1 -> b.c$a:
    com.badlogic.gdx.backends.android.AndroidApplicationConfiguration this$0 -> a
    1:1:void <init>(com.badlogic.gdx.backends.android.AndroidApplicationConfiguration):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lb/c;)V"}
    1:1:void load():0:0 -> a
com.badlogic.gdx.backends.android.AndroidApplicationLogger -> b.d:
    void <init>() -> <init>
    1:1:void error(java.lang.String,java.lang.String,java.lang.Throwable):0:0 -> a
    1:1:void log(java.lang.String,java.lang.String,java.lang.Throwable):0:0 -> f
    1:1:void error(java.lang.String,java.lang.String):0:0 -> g
    1:1:void log(java.lang.String,java.lang.String):0:0 -> h
com.badlogic.gdx.backends.android.AndroidAudio -> b.e:
    void resume() -> a
    void pause() -> b
    void notifyMusicDisposed(com.badlogic.gdx.backends.android.AndroidMusic) -> r
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lb/z;)V"}
com.badlogic.gdx.backends.android.AndroidClipboard -> b.f:
    android.content.ClipboardManager clipboard -> a
    1:1:void <init>(android.content.Context):0:0 -> <init>
    1:1:void setContents(java.lang.String):0:0 -> a
    1:1:java.lang.String getContents():0:0 -> b
com.badlogic.gdx.backends.android.AndroidEventListener -> b.g:
    void onActivityResult(int,int,android.content.Intent) -> a
com.badlogic.gdx.backends.android.AndroidFileHandle -> b.h:
    android.content.res.AssetManager assets -> c
    1:1:void <init>(android.content.res.AssetManager,java.io.File,com.badlogic.gdx.Files$FileType):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Landroid/content/res/AssetManager;Ljava/io/File;La/g$a;)V"}
    2:2:void <init>(android.content.res.AssetManager,java.lang.String,com.badlogic.gdx.Files$FileType):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Landroid/content/res/AssetManager;Ljava/lang/String;La/g$a;)V"}
    1:1:com.badlogic.gdx.files.FileHandle child(java.lang.String):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;)Le/a;"}
    1:1:boolean exists():0:0 -> c
    1:1:java.io.File file():0:0 -> e
    1:1:long length():0:0 -> f
    1:1:com.badlogic.gdx.files.FileHandle parent():0:0 -> i
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Le/a;"}
    1:1:java.io.InputStream read():0:0 -> k
    1:1:com.badlogic.gdx.files.FileHandle sibling(java.lang.String):0:0 -> o
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;)Le/a;"}
com.badlogic.gdx.backends.android.AndroidFiles -> b.i:
com.badlogic.gdx.backends.android.AndroidGL20 -> b.j:
    int[] ints -> a
    int[] ints2 -> b
    int[] ints3 -> c
    byte[] buffer -> d
    1:1:void <init>():0:0 -> <init>
    1:1:int glGenFramebuffer():0:0 -> A
    1:1:java.lang.String glGetProgramInfoLog(int):0:0 -> B
    1:1:void glEnableVertexAttribArray(int):0:0 -> D
    1:1:java.lang.String glGetString(int):0:0 -> E
    1:1:void glClear(int):0:0 -> F
    1:1:void glUniform1i(int,int):0:0 -> G
    1:1:void glTexParameteri(int,int,int):0:0 -> H
    1:1:void glBindBuffer(int,int):0:0 -> I
    1:1:void glBufferData(int,int,java.nio.Buffer,int):0:0 -> K
    1:1:void glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer):0:0 -> L
    1:1:int glGetUniformLocation(int,java.lang.String):0:0 -> M
    1:1:void glDeleteFramebuffer(int):0:0 -> N
    1:1:void glDisable(int):0:0 -> O
    1:1:void glVertexAttribPointer(int,int,int,boolean,int,int):0:0 -> P
    1:1:int glGetAttribLocation(int,java.lang.String):0:0 -> Q
    1:1:void glPixelStorei(int,int):0:0 -> R
    1:1:java.lang.String glGetActiveAttrib(int,int,java.nio.IntBuffer,java.nio.IntBuffer):0:0 -> S
    1:1:void glDepthMask(boolean):0:0 -> T
    1:1:void glScissor(int,int,int,int):0:0 -> U
    1:1:void glDisableVertexAttribArray(int):0:0 -> V
    1:1:void glClearColor(float,float,float,float):0:0 -> W
    1:1:int glCreateShader(int):0:0 -> X
    1:1:void glDeleteTexture(int):0:0 -> Z
    1:1:void glEnable(int):0:0 -> a
    1:1:void glGetIntegerv(int,java.nio.IntBuffer):0:0 -> a0
    1:1:int glGenBuffer():0:0 -> b
    1:1:void glBindTexture(int,int):0:0 -> b0
    1:1:void glBindFramebuffer(int,int):0:0 -> c
    1:1:void glDeleteShader(int):0:0 -> c0
    1:1:void glDeleteProgram(int):0:0 -> d0
    1:1:void glDrawArrays(int,int,int):0:0 -> e
    1:1:void glCompileShader(int):0:0 -> e0
    1:1:void glUniformMatrix4fv(int,int,boolean,float[],int):0:0 -> f
    1:1:void glDeleteBuffer(int):0:0 -> f0
    1:1:void glVertexAttribPointer(int,int,int,boolean,int,java.nio.Buffer):0:0 -> g
    1:1:void glGetShaderiv(int,int,java.nio.IntBuffer):0:0 -> g0
    1:1:void glGetFloatv(int,java.nio.FloatBuffer):0:0 -> h
    1:1:void glViewport(int,int,int,int):0:0 -> i
    1:1:void glShaderSource(int,java.lang.String):0:0 -> j
    1:1:void glAttachShader(int,int):0:0 -> k
    1:1:void glTexParameterf(int,int,float):0:0 -> l
    1:1:java.lang.String glGetActiveUniform(int,int,java.nio.IntBuffer,java.nio.IntBuffer):0:0 -> m
    1:1:void glUseProgram(int):0:0 -> n
    1:1:void glGenerateMipmap(int):0:0 -> o
    1:1:void glGetProgramiv(int,int,java.nio.IntBuffer):0:0 -> p
    1:1:void glLinkProgram(int):0:0 -> q
    1:1:void glDeleteRenderbuffer(int):0:0 -> r
    1:1:void glBufferSubData(int,int,int,java.nio.Buffer):0:0 -> s
    1:1:java.lang.String glGetShaderInfoLog(int):0:0 -> t
    1:1:void glDrawElements(int,int,int,java.nio.Buffer):0:0 -> u
    1:1:void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer):0:0 -> v
    1:1:int glGenTexture():0:0 -> w
    1:1:int glCreateProgram():0:0 -> x
    1:1:void glBlendFuncSeparate(int,int,int,int):0:0 -> y
    1:1:void glDrawElements(int,int,int,int):0:0 -> z
com.badlogic.gdx.backends.android.AndroidGL30 -> b.k:
    void <init>() -> <init>
    1:1:void glDeleteVertexArrays(int,java.nio.IntBuffer):0:0 -> C
    1:1:void glGenVertexArrays(int,java.nio.IntBuffer):0:0 -> J
    1:1:void glBindVertexArray(int):0:0 -> Y
    1:1:void glTexImage3D(int,int,int,int,int,int,int,int,int,java.nio.Buffer):0:0 -> d
com.badlogic.gdx.backends.android.AndroidGraphics -> b.r:
    float ppcX -> A
    float ppcY -> B
    float density -> C
    com.badlogic.gdx.backends.android.AndroidApplicationConfiguration config -> D
    com.badlogic.gdx.Graphics$BufferFormat bufferFormat -> E
    boolean isContinuous -> F
    int[] value -> G
    java.lang.Object synch -> H
    boolean enforceContinuousRendering -> I
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20 view -> a
    int width -> b
    int height -> c
    int safeInsetLeft -> d
    int safeInsetTop -> e
    int safeInsetBottom -> f
    int safeInsetRight -> g
    com.badlogic.gdx.backends.android.AndroidApplicationBase app -> h
    com.badlogic.gdx.graphics.GL20 gl20 -> i
    com.badlogic.gdx.graphics.GL30 gl30 -> j
    javax.microedition.khronos.egl.EGLContext eglContext -> k
    com.badlogic.gdx.graphics.glutils.GLVersion glVersion -> l
    java.lang.String extensions -> m
    long lastFrameTime -> n
    float deltaTime -> o
    long frameStart -> p
    long frameId -> q
    int frames -> r
    int fps -> s
    boolean created -> t
    boolean running -> u
    boolean pause -> v
    boolean resume -> w
    boolean destroy -> x
    float ppiX -> y
    float ppiY -> z
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>(com.badlogic.gdx.backends.android.AndroidApplicationBase,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration,com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lb/b;Lb/c;Lc/d;)V"}
    2:2:void <init>(com.badlogic.gdx.backends.android.AndroidApplicationBase,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration,com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy,boolean):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lb/b;Lb/c;Lc/d;Z)V"}
    1:1:void updatePpi():0:0 -> A
    1:1:void updateSafeAreaInsets():0:0 -> B
    1:1:boolean checkGL20():0:0 -> a
    1:1:int getWidth():0:0 -> b
    1:1:int getHeight():0:0 -> c
    1:1:boolean isGL30Available():0:0 -> d
    1:1:int getBackBufferHeight():0:0 -> e
    1:1:int getBackBufferWidth():0:0 -> f
    1:1:boolean supportsExtension(java.lang.String):0:0 -> g
    1:1:com.badlogic.gdx.Graphics$DisplayMode getDisplayMode():0:0 -> h
      # {"id":"com.android.tools.r8.residualsignature","signature":"()La/j$b;"}
    1:1:void requestRendering():0:0 -> i
    1:1:float getDeltaTime():0:0 -> j
    1:1:void clearManagedCaches():0:0 -> k
    1:1:com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20 createGLSurfaceView(com.badlogic.gdx.backends.android.AndroidApplicationBase,com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy):0:0 -> l
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lb/b;Lc/d;)Lc/b;"}
    1:1:void destroy():0:0 -> m
    1:1:int getAttrib(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int):0:0 -> n
    1:1:android.opengl.GLSurfaceView$EGLConfigChooser getEglConfigChooser():0:0 -> o
    1:1:void onDrawFrame(javax.microedition.khronos.opengles.GL10):0:0 -> onDrawFrame
    1:1:void onSurfaceChanged(javax.microedition.khronos.opengles.GL10,int,int):0:0 -> onSurfaceChanged
    1:1:void onSurfaceCreated(javax.microedition.khronos.opengles.GL10,javax.microedition.khronos.egl.EGLConfig):0:0 -> onSurfaceCreated
    1:1:android.view.View getView():0:0 -> p
    1:1:boolean isContinuousRendering():0:0 -> q
    1:1:void logConfig(javax.microedition.khronos.egl.EGLConfig):0:0 -> r
    1:1:void logManagedCachesStatus():0:0 -> s
    1:1:void onPauseGLSurfaceView():0:0 -> t
    1:1:void onResumeGLSurfaceView():0:0 -> u
    1:1:void pause():0:0 -> v
    1:1:void preserveEGLContextOnPause():0:0 -> w
    1:1:void resume():0:0 -> x
    1:1:void setContinuousRendering(boolean):0:0 -> y
    1:1:void setupGL(javax.microedition.khronos.opengles.GL10):0:0 -> z
com.badlogic.gdx.backends.android.AndroidGraphics$$ExternalSyntheticApiModelOutline0 -> b.l:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    1:1:android.view.WindowInsets com.badlogic.gdx.backends.android.AndroidGraphics$$InternalSyntheticApiModelOutline$1$7cdcf504b3e93db3bfde1912e3682440b9fc2bf91261ad91ae7fc555763f5b1e$0.m(android.view.View):0:0 -> a
      # {"id":"com.android.tools.r8.synthesized"}
com.badlogic.gdx.backends.android.AndroidGraphics$$ExternalSyntheticApiModelOutline1 -> b.m:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    1:1:android.view.DisplayCutout com.badlogic.gdx.backends.android.AndroidGraphics$$InternalSyntheticApiModelOutline$1$7cdcf504b3e93db3bfde1912e3682440b9fc2bf91261ad91ae7fc555763f5b1e$1.m(android.view.WindowInsets):0:0 -> a
      # {"id":"com.android.tools.r8.synthesized"}
com.badlogic.gdx.backends.android.AndroidGraphics$$ExternalSyntheticApiModelOutline2 -> b.n:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    1:1:int com.badlogic.gdx.backends.android.AndroidGraphics$$InternalSyntheticApiModelOutline$1$7cdcf504b3e93db3bfde1912e3682440b9fc2bf91261ad91ae7fc555763f5b1e$2.m(android.view.DisplayCutout):0:0 -> a
      # {"id":"com.android.tools.r8.synthesized"}
com.badlogic.gdx.backends.android.AndroidGraphics$$ExternalSyntheticApiModelOutline3 -> b.o:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    1:1:int com.badlogic.gdx.backends.android.AndroidGraphics$$InternalSyntheticApiModelOutline$1$7cdcf504b3e93db3bfde1912e3682440b9fc2bf91261ad91ae7fc555763f5b1e$3.m(android.view.DisplayCutout):0:0 -> a
      # {"id":"com.android.tools.r8.synthesized"}
com.badlogic.gdx.backends.android.AndroidGraphics$$ExternalSyntheticApiModelOutline4 -> b.p:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    1:1:int com.badlogic.gdx.backends.android.AndroidGraphics$$InternalSyntheticApiModelOutline$1$7cdcf504b3e93db3bfde1912e3682440b9fc2bf91261ad91ae7fc555763f5b1e$4.m(android.view.DisplayCutout):0:0 -> a
      # {"id":"com.android.tools.r8.synthesized"}
com.badlogic.gdx.backends.android.AndroidGraphics$$ExternalSyntheticApiModelOutline5 -> b.q:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    1:1:int com.badlogic.gdx.backends.android.AndroidGraphics$$InternalSyntheticApiModelOutline$1$7cdcf504b3e93db3bfde1912e3682440b9fc2bf91261ad91ae7fc555763f5b1e$5.m(android.view.DisplayCutout):0:0 -> a
      # {"id":"com.android.tools.r8.synthesized"}
com.badlogic.gdx.backends.android.AndroidGraphics$1 -> b.r$a:
    com.badlogic.gdx.backends.android.AndroidGraphics this$0 -> a
    1:1:void <init>(com.badlogic.gdx.backends.android.AndroidGraphics):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lb/r;)V"}
    1:1:void run():0:0 -> run
com.badlogic.gdx.backends.android.AndroidGraphics$AndroidDisplayMode -> b.r$b:
    com.badlogic.gdx.backends.android.AndroidGraphics this$0 -> e
    1:1:void <init>(com.badlogic.gdx.backends.android.AndroidGraphics,int,int,int,int):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lb/r;IIII)V"}
com.badlogic.gdx.backends.android.AndroidHaptics -> b.w:
    android.os.Vibrator vibrator -> a
    android.media.AudioAttributes audioAttributes -> b
    boolean vibratorSupport -> c
    boolean hapticsSupport -> d
    1:1:void <init>(android.content.Context):0:0 -> <init>
com.badlogic.gdx.backends.android.AndroidHaptics$$ExternalSyntheticApiModelOutline0 -> b.s:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    1:1:boolean com.badlogic.gdx.backends.android.AndroidHaptics$$InternalSyntheticApiModelOutline$1$96efbbcc3c82c74532b1ed7977c9b90fbc5e32dae5a082f8ef412aa99bd91b70$0.m(android.os.Vibrator):0:0 -> a
      # {"id":"com.android.tools.r8.synthesized"}
com.badlogic.gdx.backends.android.AndroidHaptics$$ExternalSyntheticApiModelOutline1 -> b.t:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    1:1:android.media.AudioAttributes$Builder com.badlogic.gdx.backends.android.AndroidHaptics$$InternalSyntheticApiModelOutline$1$96efbbcc3c82c74532b1ed7977c9b90fbc5e32dae5a082f8ef412aa99bd91b70$1.m(android.media.AudioAttributes$Builder,int):0:0 -> a
      # {"id":"com.android.tools.r8.synthesized"}
com.badlogic.gdx.backends.android.AndroidHaptics$$ExternalSyntheticApiModelOutline2 -> b.u:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    1:1:android.media.AudioAttributes$Builder com.badlogic.gdx.backends.android.AndroidHaptics$$InternalSyntheticApiModelOutline$1$96efbbcc3c82c74532b1ed7977c9b90fbc5e32dae5a082f8ef412aa99bd91b70$2.m(android.media.AudioAttributes$Builder,int):0:0 -> a
      # {"id":"com.android.tools.r8.synthesized"}
com.badlogic.gdx.backends.android.AndroidHaptics$$ExternalSyntheticApiModelOutline3 -> b.v:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    1:1:android.media.AudioAttributes com.badlogic.gdx.backends.android.AndroidHaptics$$InternalSyntheticApiModelOutline$1$96efbbcc3c82c74532b1ed7977c9b90fbc5e32dae5a082f8ef412aa99bd91b70$3.m(android.media.AudioAttributes$Builder):0:0 -> a
      # {"id":"com.android.tools.r8.synthesized"}
com.badlogic.gdx.backends.android.AndroidInput -> b.x:
    void addKeyListener(android.view.View$OnKeyListener) -> c
    void onPause() -> d
    void processEvents() -> e
    void onResume() -> f
    void addGenericMotionListener(android.view.View$OnGenericMotionListener) -> i
    void setKeyboardAvailable(boolean) -> n
com.badlogic.gdx.backends.android.AndroidMouseHandler -> b.y:
    int deltaX -> a
    int deltaY -> b
    1:1:void <init>():0:0 -> <init>
    1:1:boolean onGenericMotion(android.view.MotionEvent,com.badlogic.gdx.backends.android.DefaultAndroidInput):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Landroid/view/MotionEvent;Lb/i0;)Z"}
    1:1:void postTouchEvent(com.badlogic.gdx.backends.android.DefaultAndroidInput,int,int,int,int,int,long):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lb/i0;IIIIIJ)V"}
com.badlogic.gdx.backends.android.AndroidMusic -> b.z:
    com.badlogic.gdx.backends.android.AndroidAudio audio -> a
    android.media.MediaPlayer player -> b
    boolean isPrepared -> c
    boolean wasPlaying -> d
    1:1:void pause():0:0 -> b
    1:1:void dispose():0:0 -> dispose
    1:1:boolean isPlaying():0:0 -> e
    1:1:void play():0:0 -> g
    1:1:void onCompletion(android.media.MediaPlayer):0:0 -> onCompletion
com.badlogic.gdx.backends.android.AndroidNet -> b.a0:
    com.badlogic.gdx.backends.android.AndroidApplicationBase app -> a
    com.badlogic.gdx.net.NetJavaImpl netJavaImpl -> b
    1:1:void <init>(com.badlogic.gdx.backends.android.AndroidApplicationBase,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lb/b;Lb/c;)V"}
    1:1:boolean openURI(java.lang.String):0:0 -> a
com.badlogic.gdx.backends.android.AndroidTouchHandler -> b.b0:
    void <init>() -> <init>
    1:1:void onTouch(android.view.MotionEvent,com.badlogic.gdx.backends.android.DefaultAndroidInput):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Landroid/view/MotionEvent;Lb/i0;)V"}
    1:1:void postTouchEvent(com.badlogic.gdx.backends.android.DefaultAndroidInput,int,int,int,int,int,long):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lb/i0;IIIIIJ)V"}
    1:1:boolean supportsMultitouch(android.content.Context):0:0 -> c
    1:1:int toGdxButton(int):0:0 -> d
com.badlogic.gdx.backends.android.AndroidVisibilityListener -> b.c0:
    void <init>() -> <init>
    1:1:void createListener(com.badlogic.gdx.backends.android.AndroidApplicationBase):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lb/b;)V"}
com.badlogic.gdx.backends.android.AndroidVisibilityListener$1 -> b.c0$a:
    com.badlogic.gdx.backends.android.AndroidApplicationBase val$application -> a
    com.badlogic.gdx.backends.android.AndroidVisibilityListener this$0 -> b
    1:1:void <init>(com.badlogic.gdx.backends.android.AndroidVisibilityListener,com.badlogic.gdx.backends.android.AndroidApplicationBase):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lb/c0;Lb/b;)V"}
    1:1:void onSystemUiVisibilityChange(int):0:0 -> onSystemUiVisibilityChange
com.badlogic.gdx.backends.android.AndroidVisibilityListener$1$1 -> b.c0$a$a:
    com.badlogic.gdx.backends.android.AndroidVisibilityListener$1 this$1 -> a
    1:1:void <init>(com.badlogic.gdx.backends.android.AndroidVisibilityListener$1):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lb/c0$a;)V"}
    1:1:void run():0:0 -> run
com.badlogic.gdx.backends.android.DefaultAndroidAudio -> b.g0:
    android.media.SoundPool soundPool -> a
    android.media.AudioManager manager -> b
    java.util.List musics -> c
    1:1:void <init>(android.content.Context,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Landroid/content/Context;Lb/c;)V"}
    1:1:void resume():0:0 -> a
    1:1:void pause():0:0 -> b
    1:1:void dispose():0:0 -> dispose
    1:1:void notifyMusicDisposed(com.badlogic.gdx.backends.android.AndroidMusic):0:0 -> r
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lb/z;)V"}
com.badlogic.gdx.backends.android.DefaultAndroidAudio$$ExternalSyntheticApiModelOutline0 -> b.d0:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    1:1:android.media.SoundPool$Builder com.badlogic.gdx.backends.android.DefaultAndroidAudio$$InternalSyntheticApiModelOutline$1$548b932707dfeeb7ae6a351347abb6793267a6e24a422e53c23052aea292514b$3.m(android.media.SoundPool$Builder,android.media.AudioAttributes):0:0 -> a
      # {"id":"com.android.tools.r8.synthesized"}
com.badlogic.gdx.backends.android.DefaultAndroidAudio$$ExternalSyntheticApiModelOutline1 -> b.e0:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    1:1:android.media.SoundPool$Builder com.badlogic.gdx.backends.android.DefaultAndroidAudio$$InternalSyntheticApiModelOutline$1$548b932707dfeeb7ae6a351347abb6793267a6e24a422e53c23052aea292514b$4.m(android.media.SoundPool$Builder,int):0:0 -> a
      # {"id":"com.android.tools.r8.synthesized"}
com.badlogic.gdx.backends.android.DefaultAndroidAudio$$ExternalSyntheticApiModelOutline2 -> b.f0:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    1:1:android.media.SoundPool com.badlogic.gdx.backends.android.DefaultAndroidAudio$$InternalSyntheticApiModelOutline$1$548b932707dfeeb7ae6a351347abb6793267a6e24a422e53c23052aea292514b$5.m(android.media.SoundPool$Builder):0:0 -> a
      # {"id":"com.android.tools.r8.synthesized"}
com.badlogic.gdx.backends.android.DefaultAndroidFiles -> b.h0:
    java.lang.String externalFilesPath -> a
    java.lang.String localpath -> b
    android.content.res.AssetManager assets -> c
    1:1:void <init>(android.content.res.AssetManager,android.content.ContextWrapper,boolean):0:0 -> <init>
    1:1:com.badlogic.gdx.files.FileHandle classpath(java.lang.String):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;)Le/a;"}
    1:1:com.badlogic.gdx.files.FileHandle internal(java.lang.String):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;)Le/a;"}
    1:1:java.lang.String getLocalStoragePath():0:0 -> c
    1:1:java.lang.String getExternalStoragePath():0:0 -> d
    1:1:com.badlogic.gdx.files.FileHandle getFileHandle(java.lang.String,com.badlogic.gdx.Files$FileType):0:0 -> e
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;La/g$a;)Le/a;"}
    1:1:java.lang.String initExternalFilesPath(android.content.ContextWrapper):0:0 -> f
com.badlogic.gdx.backends.android.DefaultAndroidInput -> b.i0:
    com.badlogic.gdx.Application app -> A
    android.content.Context context -> B
    com.badlogic.gdx.backends.android.AndroidTouchHandler touchHandler -> C
    int sleepTime -> D
    com.badlogic.gdx.backends.android.AndroidHaptics haptics -> E
    boolean compassAvailable -> F
    boolean rotationVectorAvailable -> G
    boolean keyboardAvailable -> H
    float[] magneticFieldValues -> I
    float[] rotationVectorValues -> J
    float azimuth -> K
    float pitch -> L
    float roll -> M
    boolean justTouched -> N
    com.badlogic.gdx.InputProcessor processor -> O
    com.badlogic.gdx.backends.android.AndroidApplicationConfiguration config -> P
    com.badlogic.gdx.Input$Orientation nativeOrientation -> Q
    long currentEventTimeStamp -> R
    android.hardware.SensorEventListener accelerometerListener -> S
    android.hardware.SensorEventListener gyroscopeListener -> T
    android.hardware.SensorEventListener compassListener -> U
    android.hardware.SensorEventListener rotationVectorListener -> V
    java.util.ArrayList genericMotionListeners -> W
    com.badlogic.gdx.backends.android.AndroidMouseHandler mouseHandler -> X
    boolean requestFocus -> Y
    float[] R -> Z
    float[] orientation -> a0
    com.badlogic.gdx.utils.Pool usedKeyEvents -> f
    com.badlogic.gdx.utils.Pool usedTouchEvents -> g
    java.util.ArrayList keyListeners -> h
    java.util.ArrayList keyEvents -> i
    java.util.ArrayList touchEvents -> j
    int[] touchX -> k
    int[] touchY -> l
    int[] deltaX -> m
    int[] deltaY -> n
    boolean[] touched -> o
    int[] button -> p
    int[] realId -> q
    float[] pressure -> r
    boolean hasMultitouch -> s
    boolean[] justPressedButtons -> t
    android.hardware.SensorManager manager -> u
    boolean accelerometerAvailable -> v
    float[] accelerometerValues -> w
    boolean gyroscopeAvailable -> x
    float[] gyroscopeValues -> y
    android.os.Handler handle -> z
    1:1:void <init>(com.badlogic.gdx.Application,android.content.Context,java.lang.Object,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(La/c;Landroid/content/Context;Ljava/lang/Object;Lb/c;)V"}
    1:1:void setOnscreenKeyboardVisible(boolean,com.badlogic.gdx.Input$OnscreenKeyboardType):0:0 -> A
      # {"id":"com.android.tools.r8.residualsignature","signature":"(ZLa/k$a;)V"}
    1:1:void unregisterSensorListeners():0:0 -> B
    1:1:boolean isButtonPressed(int):0:0 -> a
    1:1:boolean isTouched():0:0 -> b
    1:1:void addKeyListener(android.view.View$OnKeyListener):0:0 -> c
    1:1:void onPause():0:0 -> d
    1:1:void processEvents():0:0 -> e
    1:1:void onResume():0:0 -> f
    1:1:void setInputProcessor(com.badlogic.gdx.InputProcessor):0:0 -> h
      # {"id":"com.android.tools.r8.residualsignature","signature":"(La/m;)V"}
    1:1:void addGenericMotionListener(android.view.View$OnGenericMotionListener):0:0 -> i
    1:1:long getCurrentEventTime():0:0 -> j
    1:1:void setOnscreenKeyboardVisible(boolean):0:0 -> k
    1:1:int getX():0:0 -> m
    1:1:void setKeyboardAvailable(boolean):0:0 -> n
    1:1:int getY():0:0 -> o
    1:1:boolean onGenericMotion(android.view.View,android.view.MotionEvent):0:0 -> onGenericMotion
    1:1:boolean onKey(android.view.View,int,android.view.KeyEvent):0:0 -> onKey
    1:1:boolean onTouch(android.view.View,android.view.MotionEvent):0:0 -> onTouch
    1:1:boolean isTouched(int):0:0 -> p
    1:1:int getAndroidInputType(com.badlogic.gdx.Input$OnscreenKeyboardType):0:0 -> s
      # {"id":"com.android.tools.r8.residualsignature","signature":"(La/k$a;)I"}
    1:1:int getFreePointerIndex():0:0 -> t
    1:1:int getRotation():0:0 -> u
    1:1:int lookUpPointerIndex(int):0:0 -> v
    1:1:void registerSensorListeners():0:0 -> w
    1:1:float[] resize(float[]):0:0 -> x
    1:1:int[] resize(int[]):0:0 -> y
    1:1:boolean[] resize(boolean[]):0:0 -> z
com.badlogic.gdx.backends.android.DefaultAndroidInput$1 -> b.i0$a:
    com.badlogic.gdx.backends.android.DefaultAndroidInput this$0 -> d
    1:1:void <init>(com.badlogic.gdx.backends.android.DefaultAndroidInput,int,int):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lb/i0;II)V"}
    1:1:java.lang.Object newObject():0:0 -> d
    1:1:com.badlogic.gdx.backends.android.DefaultAndroidInput$KeyEvent newObject():0:0 -> g
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lb/i0$e;"}
com.badlogic.gdx.backends.android.DefaultAndroidInput$2 -> b.i0$b:
    com.badlogic.gdx.backends.android.DefaultAndroidInput this$0 -> d
    1:1:void <init>(com.badlogic.gdx.backends.android.DefaultAndroidInput,int,int):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lb/i0;II)V"}
    1:1:java.lang.Object newObject():0:0 -> d
    1:1:com.badlogic.gdx.backends.android.DefaultAndroidInput$TouchEvent newObject():0:0 -> g
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lb/i0$g;"}
com.badlogic.gdx.backends.android.DefaultAndroidInput$4 -> b.i0$c:
    boolean val$visible -> a
    com.badlogic.gdx.Input$OnscreenKeyboardType val$type -> b
    com.badlogic.gdx.backends.android.DefaultAndroidInput this$0 -> c
    1:1:void <init>(com.badlogic.gdx.backends.android.DefaultAndroidInput,boolean,com.badlogic.gdx.Input$OnscreenKeyboardType):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lb/i0;ZLa/k$a;)V"}
    1:1:void run():0:0 -> run
com.badlogic.gdx.backends.android.DefaultAndroidInput$5 -> b.i0$d:
    int[] $SwitchMap$com$badlogic$gdx$Input$OnscreenKeyboardType -> a
    1:1:void <clinit>():0:0 -> <clinit>
com.badlogic.gdx.backends.android.DefaultAndroidInput$KeyEvent -> b.i0$e:
    long timeStamp -> a
    int type -> b
    int keyCode -> c
    char keyChar -> d
    void <init>() -> <init>
com.badlogic.gdx.backends.android.DefaultAndroidInput$SensorListener -> b.i0$f:
    com.badlogic.gdx.backends.android.DefaultAndroidInput this$0 -> a
    1:1:void <init>(com.badlogic.gdx.backends.android.DefaultAndroidInput):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lb/i0;)V"}
    1:1:void onAccuracyChanged(android.hardware.Sensor,int):0:0 -> onAccuracyChanged
    1:1:void onSensorChanged(android.hardware.SensorEvent):0:0 -> onSensorChanged
com.badlogic.gdx.backends.android.DefaultAndroidInput$TouchEvent -> b.i0$g:
    long timeStamp -> a
    int type -> b
    int x -> c
    int y -> d
    int scrollAmountX -> e
    int scrollAmountY -> f
    int button -> g
    int pointer -> h
    void <init>() -> <init>
com.badlogic.gdx.backends.android.GdxNativeLoader -> b.j0:
    void load() -> a
com.badlogic.gdx.backends.android.surfaceview.FillResolutionStrategy -> c.a:
    void <init>() -> <init>
    1:1:com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy$MeasuredDimension calcMeasures(int,int):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(II)Lc/d$a;"}
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20 -> c.b:
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy resolutionStrategy -> a
    com.badlogic.gdx.Input$OnscreenKeyboardType onscreenKeyboardType -> b
    java.lang.String TAG -> c
    int targetGLESVersion -> d
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>(android.content.Context,com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy,int):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Landroid/content/Context;Lc/d;I)V"}
    1:1:boolean checkEglError(java.lang.String,javax.microedition.khronos.egl.EGL10):0:0 -> a
    1:1:void init(boolean,int,int):0:0 -> b
    1:1:android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo):0:0 -> onCreateInputConnection
    1:1:void onDetachedFromWindow():0:0 -> onDetachedFromWindow
    1:1:void onMeasure(int,int):0:0 -> onMeasure
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$1 -> c.b$a:
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20 this$0 -> a
    1:1:void <init>(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20,android.view.View,boolean):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lc/b;Landroid/view/View;Z)V"}
    1:1:void sendDownUpKeyEventForBackwardCompatibility(int):0:0 -> a
    1:1:boolean deleteSurroundingText(int,int):0:0 -> deleteSurroundingText
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$ConfigChooser -> c.b$b:
    int mRedSize -> a
    int mGreenSize -> b
    int mBlueSize -> c
    int mAlphaSize -> d
    int mDepthSize -> e
    int mStencilSize -> f
    int[] mValue -> g
    int[] s_configAttribs2 -> h
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>(int,int,int,int,int,int):0:0 -> <init>
    1:1:javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[]):0:0 -> a
    1:1:int findConfigAttrib(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int):0:0 -> b
    1:1:javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay):0:0 -> chooseConfig
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$ContextFactory -> c.b$c:
    int EGL_CONTEXT_CLIENT_VERSION -> a
    1:1:void <clinit>():0:0 -> <clinit>
    void <init>() -> <init>
    1:1:javax.microedition.khronos.egl.EGLContext createContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig):0:0 -> createContext
    1:1:void destroyContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLContext):0:0 -> destroyContext
com.badlogic.gdx.backends.android.surfaceview.GdxEglConfigChooser -> c.c:
    int mRedSize -> a
    int mGreenSize -> b
    int mBlueSize -> c
    int mAlphaSize -> d
    int mDepthSize -> e
    int mStencilSize -> f
    int mNumSamples -> g
    int[] mConfigAttribs -> h
    int[] mValue -> i
    1:1:void <init>(int,int,int,int,int,int,int):0:0 -> <init>
    1:1:javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[]):0:0 -> a
    1:1:int findConfigAttrib(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int):0:0 -> b
    1:1:javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay):0:0 -> chooseConfig
com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy -> c.d:
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy$MeasuredDimension calcMeasures(int,int) -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(II)Lc/d$a;"}
com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy$MeasuredDimension -> c.d$a:
    int width -> a
    int height -> b
    1:1:void <init>(int,int):0:0 -> <init>
com.badlogic.gdx.controllers.AbstractControllerManager -> d.a:
    com.badlogic.gdx.utils.Array controllers -> a
    com.badlogic.gdx.controllers.Controller currentController -> b
    1:1:void <init>():0:0 -> <init>
    1:1:com.badlogic.gdx.controllers.Controller access$000(com.badlogic.gdx.controllers.AbstractControllerManager):0:0 -> g
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ld/a;)Ld/b;"}
    1:1:com.badlogic.gdx.controllers.Controller access$002(com.badlogic.gdx.controllers.AbstractControllerManager,com.badlogic.gdx.controllers.Controller):0:0 -> h
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ld/a;Ld/b;)Ld/b;"}
com.badlogic.gdx.controllers.AbstractControllerManager$ManageCurrentControllerListener -> d.a$a:
    com.badlogic.gdx.controllers.AbstractControllerManager this$0 -> a
    1:1:void <init>(com.badlogic.gdx.controllers.AbstractControllerManager):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ld/a;)V"}
    1:1:boolean buttonUp(com.badlogic.gdx.controllers.Controller,int):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ld/b;I)Z"}
    1:1:boolean axisMoved(com.badlogic.gdx.controllers.Controller,int,float):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ld/b;IF)Z"}
    1:1:void connected(com.badlogic.gdx.controllers.Controller):0:0 -> c
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ld/b;)V"}
    1:1:void disconnected(com.badlogic.gdx.controllers.Controller):0:0 -> d
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ld/b;)V"}
    1:1:boolean buttonDown(com.badlogic.gdx.controllers.Controller,int):0:0 -> e
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ld/b;I)Z"}
com.badlogic.gdx.controllers.Controller -> d.b:
com.badlogic.gdx.controllers.ControllerAdapter -> d.c:
    void <init>() -> <init>
com.badlogic.gdx.controllers.ControllerListener -> d.d:
    boolean buttonUp(com.badlogic.gdx.controllers.Controller,int) -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ld/b;I)Z"}
    boolean axisMoved(com.badlogic.gdx.controllers.Controller,int,float) -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ld/b;IF)Z"}
    void connected(com.badlogic.gdx.controllers.Controller) -> c
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ld/b;)V"}
    void disconnected(com.badlogic.gdx.controllers.Controller) -> d
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ld/b;)V"}
    boolean buttonDown(com.badlogic.gdx.controllers.Controller,int) -> e
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ld/b;I)Z"}
com.badlogic.gdx.controllers.android.AndroidController -> com.badlogic.gdx.controllers.android.a:
    int deviceId -> a
    java.lang.String name -> b
    com.badlogic.gdx.utils.IntIntMap buttons -> c
    float[] axes -> d
    int[] axesIds -> e
    float povX -> f
    float povY -> g
    boolean povAxis -> h
    com.badlogic.gdx.utils.Array listeners -> i
    java.lang.String uuid -> j
    boolean connected -> k
    1:1:float getAxis(int):0:0 -> a
    1:1:boolean getButton(int):0:0 -> b
    1:1:com.badlogic.gdx.utils.Array getListeners():0:0 -> c
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/b;"}
    1:1:java.lang.String getName():0:0 -> d
    1:1:boolean hasPovAxis():0:0 -> e
com.badlogic.gdx.controllers.android.AndroidControllerEvent -> com.badlogic.gdx.controllers.android.b:
    com.badlogic.gdx.controllers.android.AndroidController controller -> a
    int type -> b
    int code -> c
    float axisValue -> d
com.badlogic.gdx.controllers.android.AndroidControllers -> com.badlogic.gdx.controllers.android.AndroidControllers:
    com.badlogic.gdx.utils.IntMap controllerMap -> c
    com.badlogic.gdx.utils.Array listeners -> d
    com.badlogic.gdx.utils.Array eventQueue -> e
    com.badlogic.gdx.utils.Pool eventPool -> f
    boolean ignoreNoGamepadButtons -> g
    1:1:void resume():0:0 -> a
    1:1:void pause():0:0 -> b
    1:1:com.badlogic.gdx.utils.Array access$000(com.badlogic.gdx.controllers.android.AndroidControllers):0:0 -> j
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/controllers/android/AndroidControllers;)Ll/b;"}
    1:1:com.badlogic.gdx.utils.Array access$100(com.badlogic.gdx.controllers.android.AndroidControllers):0:0 -> k
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/controllers/android/AndroidControllers;)Ll/b;"}
    1:1:com.badlogic.gdx.utils.Array access$200(com.badlogic.gdx.controllers.android.AndroidControllers):0:0 -> l
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/controllers/android/AndroidControllers;)Ll/b;"}
    1:1:com.badlogic.gdx.utils.Array access$300(com.badlogic.gdx.controllers.android.AndroidControllers):0:0 -> m
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/controllers/android/AndroidControllers;)Ll/b;"}
    1:1:com.badlogic.gdx.utils.Pool access$400(com.badlogic.gdx.controllers.android.AndroidControllers):0:0 -> o
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/controllers/android/AndroidControllers;)Ll/c0;"}
    1:1:void addController(int,boolean):0:0 -> p
    1:1:void gatherControllers(boolean):0:0 -> q
    1:1:boolean isController(android.view.InputDevice):0:0 -> r
    1:1:void removeController(int):0:0 -> s
    1:1:void setupEventQueue():0:0 -> t
com.badlogic.gdx.controllers.android.AndroidControllers$1 -> com.badlogic.gdx.controllers.android.AndroidControllers$a:
    com.badlogic.gdx.controllers.android.AndroidControllers this$0 -> d
    1:1:java.lang.Object newObject():0:0 -> d
    1:1:com.badlogic.gdx.controllers.android.AndroidControllerEvent newObject():0:0 -> g
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lcom/badlogic/gdx/controllers/android/b;"}
com.badlogic.gdx.controllers.android.AndroidControllers$2 -> com.badlogic.gdx.controllers.android.AndroidControllers$b:
    com.badlogic.gdx.controllers.android.AndroidControllers this$0 -> a
com.badlogic.gdx.controllers.android.ControllerLifeCycleListener -> com.badlogic.gdx.controllers.android.c:
    android.hardware.input.InputManager inputManager -> a
    com.badlogic.gdx.controllers.android.AndroidControllers controllers -> b
    1:1:void resume():0:0 -> a
    1:1:void pause():0:0 -> b
com.badlogic.gdx.files.FileHandle -> e.a:
    java.io.File file -> a
    com.badlogic.gdx.Files$FileType type -> b
    void <init>() -> <init>
    1:1:void <init>(java.io.File,com.badlogic.gdx.Files$FileType):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/io/File;La/g$a;)V"}
    2:2:void <init>(java.lang.String,com.badlogic.gdx.Files$FileType):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;La/g$a;)V"}
    1:1:com.badlogic.gdx.files.FileHandle child(java.lang.String):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;)Le/a;"}
    1:1:int estimateLength():0:0 -> b
    1:1:boolean exists():0:0 -> c
    1:1:java.lang.String extension():0:0 -> d
    1:1:java.io.File file():0:0 -> e
    1:1:boolean equals(java.lang.Object):0:0 -> equals
    1:1:long length():0:0 -> f
    1:1:java.lang.String name():0:0 -> g
    1:1:java.lang.String nameWithoutExtension():0:0 -> h
    1:1:int hashCode():0:0 -> hashCode
    1:1:com.badlogic.gdx.files.FileHandle parent():0:0 -> i
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Le/a;"}
    1:1:java.lang.String path():0:0 -> j
    1:1:java.io.InputStream read():0:0 -> k
    1:1:byte[] readBytes():0:0 -> l
    1:1:java.io.BufferedReader reader(int):0:0 -> m
    1:1:java.io.Reader reader(java.lang.String):0:0 -> n
    1:1:com.badlogic.gdx.files.FileHandle sibling(java.lang.String):0:0 -> o
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;)Le/a;"}
    1:1:com.badlogic.gdx.Files$FileType type():0:0 -> p
      # {"id":"com.android.tools.r8.residualsignature","signature":"()La/g$a;"}
    1:1:java.lang.String toString():0:0 -> toString
com.badlogic.gdx.files.FileHandle$1 -> e.a$a:
    int[] $SwitchMap$com$badlogic$gdx$Files$FileType -> a
    1:1:void <clinit>():0:0 -> <clinit>
com.badlogic.gdx.graphics.Camera -> f.a:
    com.badlogic.gdx.math.Vector3 position -> a
    com.badlogic.gdx.math.Vector3 direction -> b
    com.badlogic.gdx.math.Vector3 up -> c
    com.badlogic.gdx.math.Matrix4 projection -> d
    com.badlogic.gdx.math.Matrix4 view -> e
    com.badlogic.gdx.math.Matrix4 combined -> f
    com.badlogic.gdx.math.Matrix4 invProjectionView -> g
    float near -> h
    float far -> i
    float viewportWidth -> j
    float viewportHeight -> k
    com.badlogic.gdx.math.Frustum frustum -> l
    com.badlogic.gdx.math.Vector3 tmpVec -> m
    com.badlogic.gdx.math.collision.Ray ray -> n
    1:1:void <init>():0:0 -> <init>
    1:1:com.badlogic.gdx.math.Vector3 project(com.badlogic.gdx.math.Vector3,float,float,float,float):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/k;FFFF)Li/k;"}
    1:1:com.badlogic.gdx.math.Vector3 unproject(com.badlogic.gdx.math.Vector3,float,float,float,float):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/k;FFFF)Li/k;"}
    void update() -> c
com.badlogic.gdx.graphics.Color -> com.badlogic.gdx.graphics.Color:
    1:1:void <init>(float,float,float,float):0:0 -> <init>
    2:2:void <init>(int):0:0 -> <init>
    3:3:void <init>(com.badlogic.gdx.graphics.Color):0:0 -> <init>
    1:1:void abgr8888ToColor(com.badlogic.gdx.graphics.Color,float):0:0 -> abgr8888ToColor
    2:2:void abgr8888ToColor(com.badlogic.gdx.graphics.Color,int):0:0 -> abgr8888ToColor
    1:1:com.badlogic.gdx.graphics.Color add(float,float,float,float):0:0 -> add
    2:2:com.badlogic.gdx.graphics.Color add(com.badlogic.gdx.graphics.Color):0:0 -> add
    1:1:int argb8888(float,float,float,float):0:0 -> argb8888
    2:2:int argb8888(com.badlogic.gdx.graphics.Color):0:0 -> argb8888
    1:1:com.badlogic.gdx.graphics.Color fromHsv(float,float,float):0:0 -> fromHsv
    2:2:com.badlogic.gdx.graphics.Color fromHsv(float[]):0:0 -> fromHsv
    1:1:com.badlogic.gdx.graphics.Color lerp(float,float,float,float,float):0:0 -> lerp
    2:2:com.badlogic.gdx.graphics.Color lerp(com.badlogic.gdx.graphics.Color,float):0:0 -> lerp
    1:1:com.badlogic.gdx.graphics.Color mul(float):0:0 -> mul
    2:2:com.badlogic.gdx.graphics.Color mul(float,float,float,float):0:0 -> mul
    3:3:com.badlogic.gdx.graphics.Color mul(com.badlogic.gdx.graphics.Color):0:0 -> mul
    1:1:int rgb565(float,float,float):0:0 -> rgb565
    2:2:int rgb565(com.badlogic.gdx.graphics.Color):0:0 -> rgb565
    1:1:int rgb888(float,float,float):0:0 -> rgb888
    2:2:int rgb888(com.badlogic.gdx.graphics.Color):0:0 -> rgb888
    1:1:int rgba4444(float,float,float,float):0:0 -> rgba4444
    2:2:int rgba4444(com.badlogic.gdx.graphics.Color):0:0 -> rgba4444
    1:1:int rgba8888(float,float,float,float):0:0 -> rgba8888
    2:2:int rgba8888(com.badlogic.gdx.graphics.Color):0:0 -> rgba8888
    1:1:com.badlogic.gdx.graphics.Color set(float,float,float,float):0:0 -> set
    2:2:com.badlogic.gdx.graphics.Color set(int):0:0 -> set
    3:3:com.badlogic.gdx.graphics.Color set(com.badlogic.gdx.graphics.Color):0:0 -> set
    1:1:com.badlogic.gdx.graphics.Color sub(float,float,float,float):0:0 -> sub
    2:2:com.badlogic.gdx.graphics.Color sub(com.badlogic.gdx.graphics.Color):0:0 -> sub
    1:1:float toFloatBits():0:0 -> toFloatBits
    2:2:float toFloatBits(float,float,float,float):0:0 -> toFloatBits
    3:3:float toFloatBits(int,int,int,int):0:0 -> toFloatBits
    1:1:int toIntBits():0:0 -> toIntBits
    2:2:int toIntBits(int,int,int,int):0:0 -> toIntBits
    1:1:com.badlogic.gdx.graphics.Color valueOf(java.lang.String):0:0 -> valueOf
    2:2:com.badlogic.gdx.graphics.Color valueOf(java.lang.String,com.badlogic.gdx.graphics.Color):0:0 -> valueOf
com.badlogic.gdx.graphics.Colors -> f.b:
    com.badlogic.gdx.utils.ObjectMap map -> a
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:com.badlogic.gdx.graphics.Color get(java.lang.String):0:0 -> a
    1:1:void reset():0:0 -> b
com.badlogic.gdx.graphics.Cubemap -> f.c:
    com.badlogic.gdx.graphics.CubemapData data -> i
    java.util.Map managedCubemaps -> j
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void clearAllCubemaps(com.badlogic.gdx.Application):0:0 -> L
      # {"id":"com.android.tools.r8.residualsignature","signature":"(La/c;)V"}
    1:1:java.lang.String getManagedStatus():0:0 -> M
    1:1:void invalidateAllCubemaps(com.badlogic.gdx.Application):0:0 -> N
      # {"id":"com.android.tools.r8.residualsignature","signature":"(La/c;)V"}
    1:1:boolean isManaged():0:0 -> O
    1:1:void load(com.badlogic.gdx.graphics.CubemapData):0:0 -> P
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lf/d;)V"}
    1:1:void reload():0:0 -> Q
    1:1:void dispose():0:0 -> dispose
com.badlogic.gdx.graphics.CubemapData -> f.d:
    void prepare() -> a
    boolean isPrepared() -> d
    boolean isManaged() -> f
    void consumeCubemapData() -> g
com.badlogic.gdx.graphics.GL20 -> f.e:
    int glGenFramebuffer() -> A
    java.lang.String glGetProgramInfoLog(int) -> B
    void glEnableVertexAttribArray(int) -> D
    java.lang.String glGetString(int) -> E
    void glClear(int) -> F
    void glUniform1i(int,int) -> G
    void glTexParameteri(int,int,int) -> H
    void glBindBuffer(int,int) -> I
    void glBufferData(int,int,java.nio.Buffer,int) -> K
    void glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer) -> L
    int glGetUniformLocation(int,java.lang.String) -> M
    void glDeleteFramebuffer(int) -> N
    void glDisable(int) -> O
    void glVertexAttribPointer(int,int,int,boolean,int,int) -> P
    int glGetAttribLocation(int,java.lang.String) -> Q
    void glPixelStorei(int,int) -> R
    java.lang.String glGetActiveAttrib(int,int,java.nio.IntBuffer,java.nio.IntBuffer) -> S
    void glDepthMask(boolean) -> T
    void glScissor(int,int,int,int) -> U
    void glDisableVertexAttribArray(int) -> V
    void glClearColor(float,float,float,float) -> W
    int glCreateShader(int) -> X
    void glDeleteTexture(int) -> Z
    void glEnable(int) -> a
    void glGetIntegerv(int,java.nio.IntBuffer) -> a0
    int glGenBuffer() -> b
    void glBindTexture(int,int) -> b0
    void glBindFramebuffer(int,int) -> c
    void glDeleteShader(int) -> c0
    void glDeleteProgram(int) -> d0
    void glDrawArrays(int,int,int) -> e
    void glCompileShader(int) -> e0
    void glUniformMatrix4fv(int,int,boolean,float[],int) -> f
    void glDeleteBuffer(int) -> f0
    void glVertexAttribPointer(int,int,int,boolean,int,java.nio.Buffer) -> g
    void glGetShaderiv(int,int,java.nio.IntBuffer) -> g0
    void glGetFloatv(int,java.nio.FloatBuffer) -> h
    void glViewport(int,int,int,int) -> i
    void glShaderSource(int,java.lang.String) -> j
    void glAttachShader(int,int) -> k
    void glTexParameterf(int,int,float) -> l
    java.lang.String glGetActiveUniform(int,int,java.nio.IntBuffer,java.nio.IntBuffer) -> m
    void glUseProgram(int) -> n
    void glGenerateMipmap(int) -> o
    void glGetProgramiv(int,int,java.nio.IntBuffer) -> p
    void glLinkProgram(int) -> q
    void glDeleteRenderbuffer(int) -> r
    void glBufferSubData(int,int,int,java.nio.Buffer) -> s
    java.lang.String glGetShaderInfoLog(int) -> t
    void glDrawElements(int,int,int,java.nio.Buffer) -> u
    void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> v
    int glGenTexture() -> w
    int glCreateProgram() -> x
    void glBlendFuncSeparate(int,int,int,int) -> y
    void glDrawElements(int,int,int,int) -> z
com.badlogic.gdx.graphics.GL30 -> f.f:
    void glDeleteVertexArrays(int,java.nio.IntBuffer) -> C
    void glGenVertexArrays(int,java.nio.IntBuffer) -> J
    void glBindVertexArray(int) -> Y
    void glTexImage3D(int,int,int,int,int,int,int,int,int,java.nio.Buffer) -> d
com.badlogic.gdx.graphics.GLTexture -> f.g:
    int glTarget -> a
    int glHandle -> b
    com.badlogic.gdx.graphics.Texture$TextureFilter minFilter -> c
    com.badlogic.gdx.graphics.Texture$TextureFilter magFilter -> d
    com.badlogic.gdx.graphics.Texture$TextureWrap uWrap -> e
    com.badlogic.gdx.graphics.Texture$TextureWrap vWrap -> f
    float anisotropicFilterLevel -> g
    float maxAnisotropicFilterLevel -> h
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>(int,int):0:0 -> <init>
    1:1:void setFilter(com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureFilter):0:0 -> E
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lf/l$a;Lf/l$a;)V"}
    1:1:void setWrap(com.badlogic.gdx.graphics.Texture$TextureWrap,com.badlogic.gdx.graphics.Texture$TextureWrap):0:0 -> F
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lf/l$b;Lf/l$b;)V"}
    1:1:float unsafeSetAnisotropicFilter(float,boolean):0:0 -> G
    1:1:void unsafeSetFilter(com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureFilter,boolean):0:0 -> H
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lf/l$a;Lf/l$a;Z)V"}
    1:1:void unsafeSetWrap(com.badlogic.gdx.graphics.Texture$TextureWrap,com.badlogic.gdx.graphics.Texture$TextureWrap,boolean):0:0 -> I
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lf/l$b;Lf/l$b;Z)V"}
    1:1:void uploadImageData(int,com.badlogic.gdx.graphics.TextureData):0:0 -> J
      # {"id":"com.android.tools.r8.residualsignature","signature":"(ILf/o;)V"}
    1:1:void uploadImageData(int,com.badlogic.gdx.graphics.TextureData,int):0:0 -> K
      # {"id":"com.android.tools.r8.residualsignature","signature":"(ILf/o;I)V"}
    1:1:void dispose():0:0 -> dispose
    1:1:void delete():0:0 -> e
    1:1:com.badlogic.gdx.graphics.Texture$TextureFilter getMagFilter():0:0 -> g
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lf/l$a;"}
    1:1:float getMaxAnisotropicFilterLevel():0:0 -> p
    1:1:com.badlogic.gdx.graphics.Texture$TextureFilter getMinFilter():0:0 -> t
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lf/l$a;"}
    1:1:void bind():0:0 -> z
com.badlogic.gdx.graphics.Mesh -> f.h:
    com.badlogic.gdx.graphics.glutils.VertexData vertices -> a
    com.badlogic.gdx.graphics.glutils.IndexData indices -> b
    boolean autoBind -> c
    boolean isVertexArray -> d
    boolean isInstanced -> e
    com.badlogic.gdx.math.Vector3 tmpV -> f
    java.util.Map meshes -> g
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>(com.badlogic.gdx.graphics.Mesh$VertexDataType,boolean,int,int,com.badlogic.gdx.graphics.VertexAttributes):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lf/h$b;ZIILf/q;)V"}
    2:2:void <init>(com.badlogic.gdx.graphics.Mesh$VertexDataType,boolean,int,int,com.badlogic.gdx.graphics.VertexAttribute[]):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lf/h$b;ZII[Lf/p;)V"}
    3:3:void <init>(boolean,int,int,com.badlogic.gdx.graphics.VertexAttribute[]):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(ZII[Lf/p;)V"}
    1:1:int getNumIndices():0:0 -> C
    1:1:java.nio.ShortBuffer getIndicesBuffer(boolean):0:0 -> E
    1:1:java.lang.String getManagedStatus():0:0 -> F
    1:1:com.badlogic.gdx.graphics.VertexAttribute getVertexAttribute(int):0:0 -> G
      # {"id":"com.android.tools.r8.residualsignature","signature":"(I)Lf/p;"}
    1:1:com.badlogic.gdx.graphics.VertexAttributes getVertexAttributes():0:0 -> H
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lf/q;"}
    1:1:void invalidateAllMeshes(com.badlogic.gdx.Application):0:0 -> I
      # {"id":"com.android.tools.r8.residualsignature","signature":"(La/c;)V"}
    1:1:com.badlogic.gdx.graphics.glutils.VertexData makeVertexBuffer(boolean,int,com.badlogic.gdx.graphics.VertexAttributes):0:0 -> J
      # {"id":"com.android.tools.r8.residualsignature","signature":"(ZILf/q;)Lg/s;"}
    1:1:void render(com.badlogic.gdx.graphics.glutils.ShaderProgram,int):0:0 -> K
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lg/m;I)V"}
    1:1:void render(com.badlogic.gdx.graphics.glutils.ShaderProgram,int,int,int):0:0 -> L
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lg/m;III)V"}
    1:1:void render(com.badlogic.gdx.graphics.glutils.ShaderProgram,int,int,int,boolean):0:0 -> M
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lg/m;IIIZ)V"}
    1:1:com.badlogic.gdx.graphics.Mesh setIndices(short[]):0:0 -> N
      # {"id":"com.android.tools.r8.residualsignature","signature":"([S)Lf/h;"}
    1:1:com.badlogic.gdx.graphics.Mesh setVertices(float[],int,int):0:0 -> O
      # {"id":"com.android.tools.r8.residualsignature","signature":"([FII)Lf/h;"}
    1:1:void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram):0:0 -> P
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lg/m;)V"}
    1:1:void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[],int[]):0:0 -> Q
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lg/m;[I[I)V"}
    1:1:int getNumVertices():0:0 -> d
    1:1:void dispose():0:0 -> dispose
    1:1:void addManagedMesh(com.badlogic.gdx.Application,com.badlogic.gdx.graphics.Mesh):0:0 -> e
      # {"id":"com.android.tools.r8.residualsignature","signature":"(La/c;Lf/h;)V"}
    1:1:void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram):0:0 -> g
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lg/m;)V"}
    1:1:void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[],int[]):0:0 -> p
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lg/m;[I[I)V"}
    1:1:void clearAllMeshes(com.badlogic.gdx.Application):0:0 -> t
      # {"id":"com.android.tools.r8.residualsignature","signature":"(La/c;)V"}
com.badlogic.gdx.graphics.Mesh$1 -> f.h$a:
    int[] $SwitchMap$com$badlogic$gdx$graphics$Mesh$VertexDataType -> a
    1:1:void <clinit>():0:0 -> <clinit>
com.badlogic.gdx.graphics.Mesh$VertexDataType -> f.h$b:
    com.badlogic.gdx.graphics.Mesh$VertexDataType VertexArray -> a
    com.badlogic.gdx.graphics.Mesh$VertexDataType VertexBufferObject -> b
    com.badlogic.gdx.graphics.Mesh$VertexDataType VertexBufferObjectSubData -> c
    com.badlogic.gdx.graphics.Mesh$VertexDataType VertexBufferObjectWithVAO -> d
    com.badlogic.gdx.graphics.Mesh$VertexDataType[] $VALUES -> e
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>(java.lang.String,int):0:0 -> <init>
    1:1:com.badlogic.gdx.graphics.Mesh$VertexDataType valueOf(java.lang.String):0:0 -> valueOf
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;)Lf/h$b;"}
    1:1:com.badlogic.gdx.graphics.Mesh$VertexDataType[] values():0:0 -> values
      # {"id":"com.android.tools.r8.residualsignature","signature":"()[Lf/h$b;"}
com.badlogic.gdx.graphics.OrthographicCamera -> f.i:
    float zoom -> o
    com.badlogic.gdx.math.Vector3 tmp -> p
    1:1:void <init>():0:0 -> <init>
    2:2:void <init>(float,float):0:0 -> <init>
    1:1:void update():0:0 -> c
    1:1:void setToOrtho(boolean,float,float):0:0 -> d
    1:1:void update(boolean):0:0 -> e
com.badlogic.gdx.graphics.Pixmap -> f.j:
    com.badlogic.gdx.graphics.Pixmap$Blending blending -> a
    com.badlogic.gdx.graphics.Pixmap$Filter filter -> b
    com.badlogic.gdx.graphics.g2d.Gdx2DPixmap pixmap -> c
    int color -> d
    boolean disposed -> e
    1:1:void <init>(int,int,com.badlogic.gdx.graphics.Pixmap$Format):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(IILf/j$c;)V"}
    2:2:void <init>(com.badlogic.gdx.files.FileHandle):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le/a;)V"}
    1:1:int getGLFormat():0:0 -> E
    1:1:int getGLInternalFormat():0:0 -> F
    1:1:int getGLType():0:0 -> G
    1:1:int getHeight():0:0 -> H
    1:1:java.nio.ByteBuffer getPixels():0:0 -> I
    1:1:int getWidth():0:0 -> J
    1:1:void setBlending(com.badlogic.gdx.graphics.Pixmap$Blending):0:0 -> K
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lf/j$a;)V"}
    1:1:void dispose():0:0 -> dispose
    1:1:void drawPixmap(com.badlogic.gdx.graphics.Pixmap,int,int,int,int,int,int):0:0 -> e
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lf/j;IIIIII)V"}
    1:1:void drawPixmap(com.badlogic.gdx.graphics.Pixmap,int,int,int,int,int,int,int,int):0:0 -> g
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lf/j;IIIIIIII)V"}
    1:1:void fill():0:0 -> p
    1:1:void setColor(float,float,float,float):0:0 -> setColor
    1:1:com.badlogic.gdx.graphics.Pixmap$Format getFormat():0:0 -> t
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lf/j$c;"}
com.badlogic.gdx.graphics.Pixmap$Blending -> f.j$a:
    com.badlogic.gdx.graphics.Pixmap$Blending None -> a
    com.badlogic.gdx.graphics.Pixmap$Blending SourceOver -> b
    com.badlogic.gdx.graphics.Pixmap$Blending[] $VALUES -> c
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>(java.lang.String,int):0:0 -> <init>
    1:1:com.badlogic.gdx.graphics.Pixmap$Blending valueOf(java.lang.String):0:0 -> valueOf
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;)Lf/j$a;"}
    1:1:com.badlogic.gdx.graphics.Pixmap$Blending[] values():0:0 -> values
      # {"id":"com.android.tools.r8.residualsignature","signature":"()[Lf/j$a;"}
com.badlogic.gdx.graphics.Pixmap$Filter -> f.j$b:
    com.badlogic.gdx.graphics.Pixmap$Filter NearestNeighbour -> a
    com.badlogic.gdx.graphics.Pixmap$Filter BiLinear -> b
    com.badlogic.gdx.graphics.Pixmap$Filter[] $VALUES -> c
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>(java.lang.String,int):0:0 -> <init>
    1:1:com.badlogic.gdx.graphics.Pixmap$Filter valueOf(java.lang.String):0:0 -> valueOf
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;)Lf/j$b;"}
    1:1:com.badlogic.gdx.graphics.Pixmap$Filter[] values():0:0 -> values
      # {"id":"com.android.tools.r8.residualsignature","signature":"()[Lf/j$b;"}
com.badlogic.gdx.graphics.Pixmap$Format -> f.j$c:
    com.badlogic.gdx.graphics.Pixmap$Format Alpha -> a
    com.badlogic.gdx.graphics.Pixmap$Format Intensity -> b
    com.badlogic.gdx.graphics.Pixmap$Format LuminanceAlpha -> c
    com.badlogic.gdx.graphics.Pixmap$Format RGB565 -> d
    com.badlogic.gdx.graphics.Pixmap$Format RGBA4444 -> e
    com.badlogic.gdx.graphics.Pixmap$Format RGB888 -> f
    com.badlogic.gdx.graphics.Pixmap$Format RGBA8888 -> g
    com.badlogic.gdx.graphics.Pixmap$Format[] $VALUES -> h
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>(java.lang.String,int):0:0 -> <init>
    1:1:com.badlogic.gdx.graphics.Pixmap$Format fromGdx2DPixmapFormat(int):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(I)Lf/j$c;"}
    1:1:int toGdx2DPixmapFormat(com.badlogic.gdx.graphics.Pixmap$Format):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lf/j$c;)I"}
    1:1:com.badlogic.gdx.graphics.Pixmap$Format valueOf(java.lang.String):0:0 -> valueOf
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;)Lf/j$c;"}
    1:1:com.badlogic.gdx.graphics.Pixmap$Format[] values():0:0 -> values
      # {"id":"com.android.tools.r8.residualsignature","signature":"()[Lf/j$c;"}
com.badlogic.gdx.graphics.PixmapIO -> f.k:
    1:1:com.badlogic.gdx.graphics.Pixmap readCIM(com.badlogic.gdx.files.FileHandle):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le/a;)Lf/j;"}
com.badlogic.gdx.graphics.PixmapIO$CIM -> f.k$a:
    byte[] writeBuffer -> a
    byte[] readBuffer -> b
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:com.badlogic.gdx.graphics.Pixmap read(com.badlogic.gdx.files.FileHandle):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le/a;)Lf/j;"}
com.badlogic.gdx.graphics.Texture -> f.l:
    com.badlogic.gdx.graphics.TextureData data -> i
    java.util.Map managedTextures -> j
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>(int,int,com.badlogic.gdx.graphics.TextureData):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(IILf/o;)V"}
    2:2:void <init>(com.badlogic.gdx.files.FileHandle):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le/a;)V"}
    3:3:void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.Pixmap$Format,boolean):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le/a;Lf/j$c;Z)V"}
    4:4:void <init>(com.badlogic.gdx.files.FileHandle,boolean):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le/a;Z)V"}
    5:5:void <init>(com.badlogic.gdx.graphics.TextureData):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lf/o;)V"}
    1:1:void addManagedTexture(com.badlogic.gdx.Application,com.badlogic.gdx.graphics.Texture):0:0 -> L
      # {"id":"com.android.tools.r8.residualsignature","signature":"(La/c;Lf/l;)V"}
    1:1:void clearAllTextures(com.badlogic.gdx.Application):0:0 -> M
      # {"id":"com.android.tools.r8.residualsignature","signature":"(La/c;)V"}
    1:1:int getHeight():0:0 -> N
    1:1:java.lang.String getManagedStatus():0:0 -> O
    1:1:int getWidth():0:0 -> P
    1:1:void invalidateAllTextures(com.badlogic.gdx.Application):0:0 -> Q
      # {"id":"com.android.tools.r8.residualsignature","signature":"(La/c;)V"}
    1:1:boolean isManaged():0:0 -> R
    1:1:void load(com.badlogic.gdx.graphics.TextureData):0:0 -> S
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lf/o;)V"}
    1:1:void reload():0:0 -> T
    1:1:void dispose():0:0 -> dispose
    1:1:java.lang.String toString():0:0 -> toString
com.badlogic.gdx.graphics.Texture$TextureFilter -> f.l$a:
    int glEnum -> a
    com.badlogic.gdx.graphics.Texture$TextureFilter Nearest -> b
    com.badlogic.gdx.graphics.Texture$TextureFilter Linear -> c
    com.badlogic.gdx.graphics.Texture$TextureFilter MipMap -> d
    com.badlogic.gdx.graphics.Texture$TextureFilter MipMapNearestNearest -> e
    com.badlogic.gdx.graphics.Texture$TextureFilter MipMapLinearNearest -> f
    com.badlogic.gdx.graphics.Texture$TextureFilter MipMapNearestLinear -> g
    com.badlogic.gdx.graphics.Texture$TextureFilter MipMapLinearLinear -> h
    com.badlogic.gdx.graphics.Texture$TextureFilter[] $VALUES -> i
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>(java.lang.String,int,int):0:0 -> <init>
    1:1:int getGLEnum():0:0 -> a
    1:1:boolean isMipMap():0:0 -> b
    1:1:com.badlogic.gdx.graphics.Texture$TextureFilter valueOf(java.lang.String):0:0 -> valueOf
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;)Lf/l$a;"}
    1:1:com.badlogic.gdx.graphics.Texture$TextureFilter[] values():0:0 -> values
      # {"id":"com.android.tools.r8.residualsignature","signature":"()[Lf/l$a;"}
com.badlogic.gdx.graphics.Texture$TextureWrap -> f.l$b:
    int glEnum -> a
    com.badlogic.gdx.graphics.Texture$TextureWrap MirroredRepeat -> b
    com.badlogic.gdx.graphics.Texture$TextureWrap ClampToEdge -> c
    com.badlogic.gdx.graphics.Texture$TextureWrap Repeat -> d
    com.badlogic.gdx.graphics.Texture$TextureWrap[] $VALUES -> e
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>(java.lang.String,int,int):0:0 -> <init>
    1:1:int getGLEnum():0:0 -> a
    1:1:com.badlogic.gdx.graphics.Texture$TextureWrap valueOf(java.lang.String):0:0 -> valueOf
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;)Lf/l$b;"}
    1:1:com.badlogic.gdx.graphics.Texture$TextureWrap[] values():0:0 -> values
      # {"id":"com.android.tools.r8.residualsignature","signature":"()[Lf/l$b;"}
com.badlogic.gdx.graphics.TextureArray -> f.m:
    java.util.Map managedTextureArrays -> i
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void clearAllTextureArrays(com.badlogic.gdx.Application):0:0 -> L
      # {"id":"com.android.tools.r8.residualsignature","signature":"(La/c;)V"}
    1:1:void invalidateAllTextureArrays(com.badlogic.gdx.Application):0:0 -> M
      # {"id":"com.android.tools.r8.residualsignature","signature":"(La/c;)V"}
    1:1:boolean isManaged():0:0 -> N
    1:1:void load(com.badlogic.gdx.graphics.TextureArrayData):0:0 -> O
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lf/n;)V"}
    1:1:void reload():0:0 -> P
com.badlogic.gdx.graphics.TextureArrayData -> f.n:
    void prepare() -> a
    int getWidth() -> b
    int getHeight() -> c
    boolean isPrepared() -> d
    int getDepth() -> e
    int getInternalFormat() -> f
    void consumeTextureArrayData() -> g
    int getGLType() -> h
com.badlogic.gdx.graphics.TextureData -> f.o:
    void prepare() -> a
    int getWidth() -> b
    int getHeight() -> c
    boolean isPrepared() -> d
    com.badlogic.gdx.graphics.TextureData$TextureDataType getType() -> e
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lf/o$b;"}
    boolean isManaged() -> f
    void consumeCustomData(int) -> h
    boolean disposePixmap() -> i
    com.badlogic.gdx.graphics.Pixmap consumePixmap() -> j
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lf/j;"}
    com.badlogic.gdx.graphics.Pixmap$Format getFormat() -> k
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lf/j$c;"}
    boolean useMipMaps() -> l
com.badlogic.gdx.graphics.TextureData$Factory -> f.o$a:
    1:1:com.badlogic.gdx.graphics.TextureData loadFromFile(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.Pixmap$Format,boolean):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le/a;Lf/j$c;Z)Lf/o;"}
com.badlogic.gdx.graphics.TextureData$TextureDataType -> f.o$b:
    com.badlogic.gdx.graphics.TextureData$TextureDataType Pixmap -> a
    com.badlogic.gdx.graphics.TextureData$TextureDataType Custom -> b
    com.badlogic.gdx.graphics.TextureData$TextureDataType[] $VALUES -> c
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>(java.lang.String,int):0:0 -> <init>
    1:1:com.badlogic.gdx.graphics.TextureData$TextureDataType valueOf(java.lang.String):0:0 -> valueOf
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;)Lf/o$b;"}
    1:1:com.badlogic.gdx.graphics.TextureData$TextureDataType[] values():0:0 -> values
      # {"id":"com.android.tools.r8.residualsignature","signature":"()[Lf/o$b;"}
com.badlogic.gdx.graphics.VertexAttribute -> f.p:
    int usage -> a
    int numComponents -> b
    boolean normalized -> c
    int type -> d
    int offset -> e
    java.lang.String alias -> f
    int unit -> g
    int usageIndex -> h
    1:1:void <init>(int,int,int,boolean,java.lang.String,int):0:0 -> <init>
    2:2:void <init>(int,int,java.lang.String):0:0 -> <init>
    3:3:void <init>(int,int,java.lang.String,int):0:0 -> <init>
    1:1:boolean equals(com.badlogic.gdx.graphics.VertexAttribute):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lf/p;)Z"}
    1:1:int getKey():0:0 -> b
    1:1:int getSizeInBytes():0:0 -> c
    1:1:boolean equals(java.lang.Object):0:0 -> equals
    1:1:int hashCode():0:0 -> hashCode
com.badlogic.gdx.graphics.VertexAttributes -> f.q:
    com.badlogic.gdx.graphics.VertexAttribute[] attributes -> a
    int vertexSize -> b
    long mask -> c
    int boneWeightUnits -> d
    int textureCoordinates -> e
    com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterable iterable -> f
    1:1:void <init>(com.badlogic.gdx.graphics.VertexAttribute[]):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"([Lf/p;)V"}
    1:1:int calculateOffsets():0:0 -> a
    1:1:int compareTo(com.badlogic.gdx.graphics.VertexAttributes):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lf/q;)I"}
    1:1:com.badlogic.gdx.graphics.VertexAttribute get(int):0:0 -> c
      # {"id":"com.android.tools.r8.residualsignature","signature":"(I)Lf/p;"}
    1:1:int compareTo(java.lang.Object):0:0 -> compareTo
    1:1:long getMask():0:0 -> d
    1:1:int size():0:0 -> e
    1:1:boolean equals(java.lang.Object):0:0 -> equals
    1:1:int hashCode():0:0 -> hashCode
    1:1:java.util.Iterator iterator():0:0 -> iterator
    1:1:java.lang.String toString():0:0 -> toString
com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterable -> f.q$a:
    java.lang.Object[] array -> a
    com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterator iterator1 -> b
    com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterator iterator2 -> c
    1:1:void <init>(java.lang.Object[]):0:0 -> <init>
    1:1:java.util.Iterator iterator():0:0 -> iterator
com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterator -> f.q$b:
    java.lang.Object[] array -> a
    int index -> b
    boolean valid -> c
    1:1:void <init>(java.lang.Object[]):0:0 -> <init>
    1:1:boolean hasNext():0:0 -> hasNext
    1:1:java.util.Iterator iterator():0:0 -> iterator
    1:1:java.lang.Object next():0:0 -> next
    1:1:void remove():0:0 -> remove
com.badlogic.gdx.graphics.g2d.Batch -> com.badlogic.gdx.graphics.g2d.a:
    void setBlendFunction(int,int) -> A
    void setProjectionMatrix(com.badlogic.gdx.math.Matrix4) -> B
    void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float) -> D
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/j;FFFF)V"}
    void end() -> c
    void setTransformMatrix(com.badlogic.gdx.math.Matrix4) -> f
    void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float,float,float,float,float,float) -> h
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/j;FFFFFFFFF)V"}
    void setPackedColor(float) -> i
    float getPackedColor() -> j
    com.badlogic.gdx.math.Matrix4 getTransformMatrix() -> o
    void setColor(float,float,float,float) -> setColor
    void setColor(com.badlogic.gdx.graphics.Color) -> setColor
    void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float,float,float,float,float) -> u
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lf/l;FFFFFFFF)V"}
    void draw(com.badlogic.gdx.graphics.Texture,float[],int,int) -> v
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lf/l;[FII)V"}
    void begin() -> y
com.badlogic.gdx.graphics.g2d.BitmapFont -> com.badlogic.gdx.graphics.g2d.BitmapFont:
    1:1:void <init>():0:0 -> <init>
    2:2:void <init>(com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData,com.badlogic.gdx.graphics.g2d.TextureRegion,boolean):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/BitmapFont$a;Lcom/badlogic/gdx/graphics/g2d/j;Z)V"}
    3:3:void <init>(com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData,com.badlogic.gdx.utils.Array,boolean):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/BitmapFont$a;Ll/b;Z)V"}
    4:4:void <init>(com.badlogic.gdx.files.FileHandle):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le/a;)V"}
    5:5:void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.g2d.TextureRegion):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le/a;Lcom/badlogic/gdx/graphics/g2d/j;)V"}
    6:6:void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.g2d.TextureRegion,boolean):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le/a;Lcom/badlogic/gdx/graphics/g2d/j;Z)V"}
    7:7:void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le/a;Le/a;Z)V"}
    8:8:void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean,boolean):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le/a;Le/a;ZZ)V"}
    9:9:void <init>(com.badlogic.gdx.files.FileHandle,boolean):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le/a;Z)V"}
    10:10:void <init>(boolean):0:0 -> <init>
    1:1:com.badlogic.gdx.graphics.g2d.GlyphLayout draw(com.badlogic.gdx.graphics.g2d.Batch,java.lang.CharSequence,float,float):0:0 -> draw
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/a;Ljava/lang/CharSequence;FF)Lcom/badlogic/gdx/graphics/g2d/c;"}
    2:2:com.badlogic.gdx.graphics.g2d.GlyphLayout draw(com.badlogic.gdx.graphics.g2d.Batch,java.lang.CharSequence,float,float,float,int,boolean):0:0 -> draw
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/a;Ljava/lang/CharSequence;FFFIZ)Lcom/badlogic/gdx/graphics/g2d/c;"}
    3:3:com.badlogic.gdx.graphics.g2d.GlyphLayout draw(com.badlogic.gdx.graphics.g2d.Batch,java.lang.CharSequence,float,float,int,int,float,int,boolean):0:0 -> draw
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/a;Ljava/lang/CharSequence;FFIIFIZ)Lcom/badlogic/gdx/graphics/g2d/c;"}
    4:4:com.badlogic.gdx.graphics.g2d.GlyphLayout draw(com.badlogic.gdx.graphics.g2d.Batch,java.lang.CharSequence,float,float,int,int,float,int,boolean,java.lang.String):0:0 -> draw
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/a;Ljava/lang/CharSequence;FFIIFIZLjava/lang/String;)Lcom/badlogic/gdx/graphics/g2d/c;"}
    5:5:void draw(com.badlogic.gdx.graphics.g2d.Batch,com.badlogic.gdx.graphics.g2d.GlyphLayout,float,float):0:0 -> draw
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/a;Lcom/badlogic/gdx/graphics/g2d/c;FF)V"}
    1:1:com.badlogic.gdx.graphics.g2d.TextureRegion getRegion():0:0 -> getRegion
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lcom/badlogic/gdx/graphics/g2d/j;"}
    2:2:com.badlogic.gdx.graphics.g2d.TextureRegion getRegion(int):0:0 -> getRegion
      # {"id":"com.android.tools.r8.residualsignature","signature":"(I)Lcom/badlogic/gdx/graphics/g2d/j;"}
    1:1:com.badlogic.gdx.utils.Array getRegions():0:0 -> getRegions
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/b;"}
    1:1:void setColor(float,float,float,float):0:0 -> setColor
    2:2:void setColor(com.badlogic.gdx.graphics.Color):0:0 -> setColor
com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData -> com.badlogic.gdx.graphics.g2d.BitmapFont$a:
    java.lang.String name -> a
    java.lang.String[] imagePaths -> b
    com.badlogic.gdx.files.FileHandle fontFile -> c
    boolean flipped -> d
    float padTop -> e
    float padRight -> f
    float padBottom -> g
    float padLeft -> h
    float lineHeight -> i
    float capHeight -> j
    float ascent -> k
    float descent -> l
    float down -> m
    float blankLineScale -> n
    float scaleX -> o
    float scaleY -> p
    boolean markupEnabled -> q
    float cursorX -> r
    com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph[][] glyphs -> s
    com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph missingGlyph -> t
    float spaceXadvance -> u
    float xHeight -> v
    char[] breakChars -> w
    char[] xChars -> x
    char[] capChars -> y
    1:1:void <init>(com.badlogic.gdx.files.FileHandle,boolean):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le/a;Z)V"}
    1:1:com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph getFirstGlyph():0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lcom/badlogic/gdx/graphics/g2d/BitmapFont$b;"}
    1:1:com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph getGlyph(char):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(C)Lcom/badlogic/gdx/graphics/g2d/BitmapFont$b;"}
    1:1:void getGlyphs(com.badlogic.gdx.graphics.g2d.GlyphLayout$GlyphRun,java.lang.CharSequence,int,int,com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph):0:0 -> c
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/c$a;Ljava/lang/CharSequence;IILcom/badlogic/gdx/graphics/g2d/BitmapFont$b;)V"}
    1:1:int getWrapIndex(com.badlogic.gdx.utils.Array,int):0:0 -> d
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/b;I)I"}
    1:1:boolean hasGlyph(char):0:0 -> e
    1:1:boolean isBreakChar(char):0:0 -> f
    1:1:boolean isWhitespace(char):0:0 -> g
    1:1:void load(com.badlogic.gdx.files.FileHandle,boolean):0:0 -> h
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le/a;Z)V"}
    1:1:void setGlyph(int,com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph):0:0 -> i
      # {"id":"com.android.tools.r8.residualsignature","signature":"(ILcom/badlogic/gdx/graphics/g2d/BitmapFont$b;)V"}
    1:1:void setGlyphRegion(com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph,com.badlogic.gdx.graphics.g2d.TextureRegion):0:0 -> j
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/BitmapFont$b;Lcom/badlogic/gdx/graphics/g2d/j;)V"}
    1:1:void setScale(float):0:0 -> k
    1:1:void setScale(float,float):0:0 -> l
com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph -> com.badlogic.gdx.graphics.g2d.BitmapFont$b:
    int id -> a
    int srcX -> b
    int srcY -> c
    int width -> d
    int height -> e
    float u -> f
    float v -> g
    float u2 -> h
    float v2 -> i
    int xoffset -> j
    int yoffset -> k
    int xadvance -> l
    byte[][] kerning -> m
    boolean fixedWidth -> n
    int page -> o
    1:1:int getKerning(char):0:0 -> a
    1:1:void setKerning(int,int):0:0 -> b
com.badlogic.gdx.graphics.g2d.BitmapFontCache -> com.badlogic.gdx.graphics.g2d.b:
    com.badlogic.gdx.graphics.g2d.BitmapFont font -> a
    boolean integer -> b
    com.badlogic.gdx.utils.Array layouts -> c
    com.badlogic.gdx.utils.Array pooledLayouts -> d
    int glyphCount -> e
    float x -> f
    float y -> g
    com.badlogic.gdx.graphics.Color color -> h
    float currentTint -> i
    float[][] pageVertices -> j
    int[] idx -> k
    com.badlogic.gdx.utils.IntArray[] pageGlyphIndices -> l
    int[] tempGlyphCount -> m
    com.badlogic.gdx.graphics.Color tempColor -> n
    1:1:void addGlyph(com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph,float,float,float):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/BitmapFont$b;FFF)V"}
    1:1:com.badlogic.gdx.graphics.g2d.GlyphLayout addText(java.lang.CharSequence,float,float):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/CharSequence;FF)Lcom/badlogic/gdx/graphics/g2d/c;"}
    1:1:com.badlogic.gdx.graphics.g2d.GlyphLayout addText(java.lang.CharSequence,float,float,float,int,boolean):0:0 -> c
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/CharSequence;FFFIZ)Lcom/badlogic/gdx/graphics/g2d/c;"}
    1:1:com.badlogic.gdx.graphics.g2d.GlyphLayout addText(java.lang.CharSequence,float,float,int,int,float,int,boolean):0:0 -> d
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/CharSequence;FFIIFIZ)Lcom/badlogic/gdx/graphics/g2d/c;"}
    1:1:com.badlogic.gdx.graphics.g2d.GlyphLayout addText(java.lang.CharSequence,float,float,int,int,float,int,boolean,java.lang.String):0:0 -> e
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/CharSequence;FFIIFIZLjava/lang/String;)Lcom/badlogic/gdx/graphics/g2d/c;"}
    1:1:void addText(com.badlogic.gdx.graphics.g2d.GlyphLayout,float,float):0:0 -> f
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/c;FF)V"}
    1:1:void addToCache(com.badlogic.gdx.graphics.g2d.GlyphLayout,float,float):0:0 -> g
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/c;FF)V"}
    1:1:void clear():0:0 -> h
    1:1:void draw(com.badlogic.gdx.graphics.g2d.Batch):0:0 -> i
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/a;)V"}
    1:1:com.badlogic.gdx.graphics.Color getColor():0:0 -> j
    1:1:com.badlogic.gdx.graphics.g2d.BitmapFont getFont():0:0 -> k
    1:1:void requireGlyphs(com.badlogic.gdx.graphics.g2d.GlyphLayout):0:0 -> l
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/c;)V"}
    1:1:void requirePageGlyphs(int,int):0:0 -> m
    1:1:void setPageCount(int):0:0 -> n
    1:1:void setPosition(float,float):0:0 -> o
    1:1:void setText(com.badlogic.gdx.graphics.g2d.GlyphLayout,float,float):0:0 -> p
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/c;FF)V"}
    1:1:void setUseIntegerPositions(boolean):0:0 -> q
    1:1:void tint(com.badlogic.gdx.graphics.Color):0:0 -> r
    1:1:void translate(float,float):0:0 -> s
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap -> com.badlogic.gdx.graphics.g2d.Gdx2DPixmap:
    long basePtr -> a
    int width -> b
    int height -> c
    int format -> d
    java.nio.ByteBuffer pixelPtr -> e
    long[] nativeData -> f
    1:1:void <init>(int,int,int):0:0 -> <init>
    2:2:void <init>(byte[],int,int,int):0:0 -> <init>
    1:1:int getFormat():0:0 -> E
    1:1:java.lang.String getFormatString(int):0:0 -> F
    1:1:int getGLFormat():0:0 -> G
    1:1:int getGLInternalFormat():0:0 -> H
    1:1:int getGLType():0:0 -> I
    1:1:int getHeight():0:0 -> J
    1:1:java.nio.ByteBuffer getPixels():0:0 -> K
    1:1:int getWidth():0:0 -> L
    1:1:void setBlend(int):0:0 -> M
    1:1:int toGlFormat(int):0:0 -> N
    1:1:int toGlType(int):0:0 -> O
    1:1:void clear(int):0:0 -> e
    1:1:void convert(int):0:0 -> g
    1:1:void drawPixmap(com.badlogic.gdx.graphics.g2d.Gdx2DPixmap,int,int,int,int,int,int):0:0 -> p
    1:1:void drawPixmap(com.badlogic.gdx.graphics.g2d.Gdx2DPixmap,int,int,int,int,int,int,int,int):0:0 -> t
com.badlogic.gdx.graphics.g2d.GlyphLayout -> com.badlogic.gdx.graphics.g2d.c:
    com.badlogic.gdx.utils.Array runs -> a
    com.badlogic.gdx.utils.IntArray colors -> b
    int glyphCount -> c
    float width -> d
    float height -> e
    com.badlogic.gdx.utils.Pool glyphRunPool -> f
    com.badlogic.gdx.utils.IntArray colorStack -> g
    1:1:void alignRuns(float,int):0:0 -> a
    1:1:void calculateWidths(com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/BitmapFont$a;)V"}
    1:1:float getGlyphWidth(com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph,com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData):0:0 -> c
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/BitmapFont$b;Lcom/badlogic/gdx/graphics/g2d/BitmapFont$a;)F"}
    1:1:float getLineOffset(com.badlogic.gdx.utils.Array,com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData):0:0 -> d
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/b;Lcom/badlogic/gdx/graphics/g2d/BitmapFont$a;)F"}
    1:1:int parseColorMarkup(java.lang.CharSequence,int,int):0:0 -> e
    1:1:void setLastGlyphXAdvance(com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData,com.badlogic.gdx.graphics.g2d.GlyphLayout$GlyphRun):0:0 -> f
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/BitmapFont$a;Lcom/badlogic/gdx/graphics/g2d/c$a;)V"}
    1:1:void setText(com.badlogic.gdx.graphics.g2d.BitmapFont,java.lang.CharSequence):0:0 -> g
    1:1:void setText(com.badlogic.gdx.graphics.g2d.BitmapFont,java.lang.CharSequence,int,int,com.badlogic.gdx.graphics.Color,float,int,boolean,java.lang.String):0:0 -> h
    1:1:void setText(com.badlogic.gdx.graphics.g2d.BitmapFont,java.lang.CharSequence,com.badlogic.gdx.graphics.Color,float,int,boolean):0:0 -> i
    1:1:void truncate(com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData,com.badlogic.gdx.graphics.g2d.GlyphLayout$GlyphRun,float,java.lang.String):0:0 -> j
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/BitmapFont$a;Lcom/badlogic/gdx/graphics/g2d/c$a;FLjava/lang/String;)V"}
    1:1:com.badlogic.gdx.graphics.g2d.GlyphLayout$GlyphRun wrap(com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData,com.badlogic.gdx.graphics.g2d.GlyphLayout$GlyphRun,int):0:0 -> k
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/BitmapFont$a;Lcom/badlogic/gdx/graphics/g2d/c$a;I)Lcom/badlogic/gdx/graphics/g2d/c$a;"}
com.badlogic.gdx.graphics.g2d.GlyphLayout$GlyphRun -> com.badlogic.gdx.graphics.g2d.c$a:
    com.badlogic.gdx.utils.Array glyphs -> a
    com.badlogic.gdx.utils.FloatArray xAdvances -> b
    float x -> c
    float y -> d
    float width -> e
    1:1:void appendRun(com.badlogic.gdx.graphics.g2d.GlyphLayout$GlyphRun):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/c$a;)V"}
com.badlogic.gdx.graphics.g2d.NinePatch -> com.badlogic.gdx.graphics.g2d.d:
    com.badlogic.gdx.graphics.Texture texture -> a
    int bottomLeft -> b
    int bottomCenter -> c
    int bottomRight -> d
    int middleLeft -> e
    int middleCenter -> f
    int middleRight -> g
    int topLeft -> h
    int topCenter -> i
    int topRight -> j
    float leftWidth -> k
    float rightWidth -> l
    float middleWidth -> m
    float middleHeight -> n
    float topHeight -> o
    float bottomHeight -> p
    float[] vertices -> q
    int idx -> r
    com.badlogic.gdx.graphics.Color color -> s
    float padLeft -> t
    float padRight -> u
    float padTop -> v
    float padBottom -> w
    com.badlogic.gdx.graphics.Color tmpDrawColor -> x
    1:1:void <init>(com.badlogic.gdx.graphics.g2d.NinePatch,com.badlogic.gdx.graphics.Color):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/d;Lcom/badlogic/gdx/graphics/Color;)V"}
    2:2:void <init>(com.badlogic.gdx.graphics.g2d.TextureRegion):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/j;)V"}
    3:3:void <init>(com.badlogic.gdx.graphics.g2d.TextureRegion,int,int,int,int):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/j;IIII)V"}
    1:1:int add(com.badlogic.gdx.graphics.g2d.TextureRegion,boolean,boolean):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/j;ZZ)I"}
    1:1:void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/a;FFFF)V"}
    1:1:void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float,float,float,float,float,float):0:0 -> c
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/a;FFFFFFFFF)V"}
    1:1:float getBottomHeight():0:0 -> d
    1:1:float getLeftWidth():0:0 -> e
    1:1:float getPadBottom():0:0 -> f
    1:1:float getPadLeft():0:0 -> g
    1:1:float getPadRight():0:0 -> h
    1:1:float getPadTop():0:0 -> i
    1:1:float getRightWidth():0:0 -> j
    1:1:float getTopHeight():0:0 -> k
    1:1:float getTotalHeight():0:0 -> l
    1:1:float getTotalWidth():0:0 -> m
    1:1:void load(com.badlogic.gdx.graphics.g2d.TextureRegion[]):0:0 -> n
      # {"id":"com.android.tools.r8.residualsignature","signature":"([Lcom/badlogic/gdx/graphics/g2d/j;)V"}
    1:1:void prepareVertices(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float):0:0 -> o
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/a;FFFF)V"}
    1:1:void scale(float,float):0:0 -> p
    1:1:void set(int,float,float,float,float,float):0:0 -> q
    1:1:void setPadding(float,float,float,float):0:0 -> r
com.badlogic.gdx.graphics.g2d.ParticleEffect -> com.badlogic.gdx.graphics.g2d.e:
    com.badlogic.gdx.utils.Array emitters -> a
    boolean ownsTexture -> b
    float xSizeScale -> c
    float ySizeScale -> d
    float motionScale -> e
    1:1:void load(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.g2d.TextureAtlas,java.lang.String):0:0 -> E
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le/a;Lcom/badlogic/gdx/graphics/g2d/i;Ljava/lang/String;)V"}
    1:1:void load(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle):0:0 -> F
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le/a;Le/a;)V"}
    1:1:void loadEmitterImages(com.badlogic.gdx.graphics.g2d.TextureAtlas,java.lang.String):0:0 -> G
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/i;Ljava/lang/String;)V"}
    1:1:void loadEmitterImages(com.badlogic.gdx.files.FileHandle):0:0 -> H
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le/a;)V"}
    1:1:void loadEmitters(com.badlogic.gdx.files.FileHandle):0:0 -> I
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le/a;)V"}
    1:1:com.badlogic.gdx.graphics.Texture loadTexture(com.badlogic.gdx.files.FileHandle):0:0 -> J
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le/a;)Lf/l;"}
    1:1:com.badlogic.gdx.graphics.g2d.ParticleEmitter newEmitter(java.io.BufferedReader):0:0 -> K
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/io/BufferedReader;)Lcom/badlogic/gdx/graphics/g2d/f;"}
    1:1:void reset(boolean):0:0 -> L
    1:1:void scaleEffect(float,float,float):0:0 -> M
    1:1:void setPosition(float,float):0:0 -> N
    1:1:void start():0:0 -> O
    1:1:void update(float):0:0 -> P
    1:1:void allowCompletion():0:0 -> e
    1:1:void draw(com.badlogic.gdx.graphics.g2d.Batch):0:0 -> g
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/a;)V"}
    1:1:boolean isComplete():0:0 -> p
    1:1:void load(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.g2d.TextureAtlas):0:0 -> t
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le/a;Lcom/badlogic/gdx/graphics/g2d/i;)V"}
com.badlogic.gdx.graphics.g2d.ParticleEmitter -> com.badlogic.gdx.graphics.g2d.f:
    int minParticleCount -> A
    int maxParticleCount -> B
    float x -> C
    float y -> D
    java.lang.String name -> E
    com.badlogic.gdx.utils.Array imagePaths -> F
    int activeCount -> G
    boolean[] active -> H
    boolean firstUpdate -> I
    boolean flipX -> J
    boolean flipY -> K
    int updateFlags -> L
    boolean allowCompletion -> M
    int emission -> N
    int emissionDiff -> O
    int emissionDelta -> P
    int lifeOffset -> Q
    int lifeOffsetDiff -> R
    int life -> S
    int lifeDiff -> T
    float spawnWidth -> U
    float spawnWidthDiff -> V
    float spawnHeight -> W
    float spawnHeightDiff -> X
    float duration -> Y
    float durationTimer -> Z
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue delayValue -> a
    float delay -> a0
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$IndependentScaledNumericValue lifeOffsetValue -> b
    float delayTimer -> b0
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue durationValue -> c
    boolean attached -> c0
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$IndependentScaledNumericValue lifeValue -> d
    boolean continuous -> d0
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue emissionValue -> e
    boolean aligned -> e0
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue xScaleValue -> f
    boolean behind -> f0
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue yScaleValue -> g
    boolean additive -> g0
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue rotationValue -> h
    boolean premultipliedAlpha -> h0
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue velocityValue -> i
    boolean cleansUpBlendFunction -> i0
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue angleValue -> j
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue windValue -> k
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue gravityValue -> l
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue transparencyValue -> m
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$GradientColorValue tintValue -> n
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue xOffsetValue -> o
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue yOffsetValue -> p
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue spawnWidthValue -> q
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue spawnHeightValue -> r
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShapeValue spawnShapeValue -> s
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue[] xSizeValues -> t
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue[] ySizeValues -> u
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue[] motionValues -> v
    float accumulator -> w
    com.badlogic.gdx.utils.Array sprites -> x
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpriteMode spriteMode -> y
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$Particle[] particles -> z
    1:1:void <init>():0:0 -> <init>
    2:2:void <init>(java.io.BufferedReader):0:0 -> <init>
    1:1:void setImagePaths(com.badlogic.gdx.utils.Array):0:0 -> A
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/b;)V"}
    1:1:void setMaxParticleCount(int):0:0 -> B
    1:1:void setMinParticleCount(int):0:0 -> C
    1:1:void setPosition(float,float):0:0 -> D
    1:1:void setSprites(com.badlogic.gdx.utils.Array):0:0 -> E
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/b;)V"}
    1:1:void start():0:0 -> F
    1:1:void update(float):0:0 -> G
    1:1:boolean updateParticle(com.badlogic.gdx.graphics.g2d.ParticleEmitter$Particle,float,int):0:0 -> H
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/f$d;FI)Z"}
    1:1:void activateParticle(int):0:0 -> a
    1:1:void addParticle():0:0 -> b
    1:1:void addParticles(int):0:0 -> c
    1:1:void allowCompletion():0:0 -> d
    1:1:void draw(com.badlogic.gdx.graphics.g2d.Batch):0:0 -> e
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/a;)V"}
    1:1:void generateLifeOffsetValues():0:0 -> f
    1:1:void generateLifeValues():0:0 -> g
    1:1:com.badlogic.gdx.utils.Array getImagePaths():0:0 -> h
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/b;"}
    1:1:com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue[] getMotionValues():0:0 -> i
      # {"id":"com.android.tools.r8.residualsignature","signature":"()[Lcom/badlogic/gdx/graphics/g2d/f$f;"}
    1:1:com.badlogic.gdx.utils.Array getSprites():0:0 -> j
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/b;"}
    1:1:com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue[] getXSizeValues():0:0 -> k
      # {"id":"com.android.tools.r8.residualsignature","signature":"()[Lcom/badlogic/gdx/graphics/g2d/f$f;"}
    1:1:com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue[] getYSizeValues():0:0 -> l
      # {"id":"com.android.tools.r8.residualsignature","signature":"()[Lcom/badlogic/gdx/graphics/g2d/f$f;"}
    1:1:void initialize():0:0 -> m
    1:1:boolean isComplete():0:0 -> n
    1:1:void load(java.io.BufferedReader):0:0 -> o
    1:1:com.badlogic.gdx.graphics.g2d.ParticleEmitter$Particle newParticle(com.badlogic.gdx.graphics.g2d.Sprite):0:0 -> p
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/g;)Lcom/badlogic/gdx/graphics/g2d/f$d;"}
    1:1:boolean readBoolean(java.io.BufferedReader,java.lang.String):0:0 -> q
    1:1:boolean readBoolean(java.lang.String):0:0 -> r
    1:1:float readFloat(java.io.BufferedReader,java.lang.String):0:0 -> s
    1:1:int readInt(java.io.BufferedReader,java.lang.String):0:0 -> t
    1:1:java.lang.String readString(java.io.BufferedReader,java.lang.String):0:0 -> u
    1:1:java.lang.String readString(java.lang.String):0:0 -> v
    1:1:void reset():0:0 -> w
    1:1:void restart():0:0 -> x
    1:1:void scaleMotion(float):0:0 -> y
    1:1:void scaleSize(float,float):0:0 -> z
com.badlogic.gdx.graphics.g2d.ParticleEmitter$1 -> com.badlogic.gdx.graphics.g2d.f$a:
    int[] $SwitchMap$com$badlogic$gdx$graphics$g2d$ParticleEmitter$SpriteMode -> a
    int[] $SwitchMap$com$badlogic$gdx$graphics$g2d$ParticleEmitter$SpawnEllipseSide -> b
    int[] $SwitchMap$com$badlogic$gdx$graphics$g2d$ParticleEmitter$SpawnShape -> c
com.badlogic.gdx.graphics.g2d.ParticleEmitter$GradientColorValue -> com.badlogic.gdx.graphics.g2d.f$b:
    float[] colors -> c
    float[] timeline -> d
    float[] temp -> e
    1:1:void load(java.io.BufferedReader):0:0 -> a
    1:1:float[] getColor(float):0:0 -> d
com.badlogic.gdx.graphics.g2d.ParticleEmitter$IndependentScaledNumericValue -> com.badlogic.gdx.graphics.g2d.f$c:
    boolean independent -> j
    1:1:void load(java.io.BufferedReader):0:0 -> a
com.badlogic.gdx.graphics.g2d.ParticleEmitter$Particle -> com.badlogic.gdx.graphics.g2d.f$d:
    float rotationDiff -> A
    float velocity -> B
    float velocityDiff -> C
    float angle -> D
    float angleDiff -> E
    float angleCos -> F
    float angleSin -> G
    float transparency -> H
    float transparencyDiff -> I
    float wind -> J
    float windDiff -> K
    float gravity -> L
    float gravityDiff -> M
    float[] tint -> N
    int frame -> O
    int life -> t
    int currentLife -> u
    float xScale -> v
    float xScaleDiff -> w
    float yScale -> x
    float yScaleDiff -> y
    float rotation -> z
com.badlogic.gdx.graphics.g2d.ParticleEmitter$ParticleValue -> com.badlogic.gdx.graphics.g2d.f$e:
    boolean active -> a
    boolean alwaysActive -> b
    1:1:void load(java.io.BufferedReader):0:0 -> a
    1:1:void setActive(boolean):0:0 -> b
    1:1:void setAlwaysActive(boolean):0:0 -> c
com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue -> com.badlogic.gdx.graphics.g2d.f$f:
    float lowMin -> c
    float lowMax -> d
    1:1:void load(java.io.BufferedReader):0:0 -> a
    1:1:float newLowValue():0:0 -> d
    1:1:void scale(float):0:0 -> e
com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue -> com.badlogic.gdx.graphics.g2d.f$g:
    float[] scaling -> e
    float[] timeline -> f
    float highMin -> g
    float highMax -> h
    boolean relative -> i
    1:1:void load(java.io.BufferedReader):0:0 -> a
    1:1:void scale(float):0:0 -> e
    1:1:float getScale(float):0:0 -> f
    1:1:boolean isRelative():0:0 -> g
    1:1:float newHighValue():0:0 -> h
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide -> com.badlogic.gdx.graphics.g2d.f$h:
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide both -> a
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide top -> b
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide bottom -> c
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide[] $VALUES -> d
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape -> com.badlogic.gdx.graphics.g2d.f$i:
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape point -> a
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape line -> b
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape square -> c
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape ellipse -> d
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape[] $VALUES -> e
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShapeValue -> com.badlogic.gdx.graphics.g2d.f$j:
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape shape -> c
    boolean edges -> d
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide side -> e
    1:1:void load(java.io.BufferedReader):0:0 -> a
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpriteMode -> com.badlogic.gdx.graphics.g2d.f$k:
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpriteMode single -> a
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpriteMode random -> b
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpriteMode animated -> c
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpriteMode[] $VALUES -> d
com.badlogic.gdx.graphics.g2d.Sprite -> com.badlogic.gdx.graphics.g2d.g:
    float[] vertices -> h
    com.badlogic.gdx.graphics.Color color -> i
    float x -> j
    float y -> k
    float width -> l
    float height -> m
    float originX -> n
    float originY -> o
    float rotation -> p
    float scaleX -> q
    float scaleY -> r
    boolean dirty -> s
    1:1:void <init>():0:0 -> <init>
    2:2:void <init>(com.badlogic.gdx.graphics.g2d.Sprite):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/g;)V"}
    3:3:void <init>(com.badlogic.gdx.graphics.g2d.TextureRegion):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/j;)V"}
    4:4:void <init>(com.badlogic.gdx.graphics.Texture):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lf/l;)V"}
    5:5:void <init>(com.badlogic.gdx.graphics.Texture,int,int,int,int):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lf/l;IIII)V"}
    1:1:void setColor(float,float,float,float):0:0 -> A
    1:1:void setColor(com.badlogic.gdx.graphics.Color):0:0 -> B
    1:1:void setOrigin(float,float):0:0 -> C
    1:1:void setPackedColor(float):0:0 -> D
    1:1:void setRotation(float):0:0 -> E
    1:1:void setScale(float):0:0 -> F
    1:1:void setScale(float,float):0:0 -> G
    1:1:void setSize(float,float):0:0 -> H
    1:1:void translate(float,float):0:0 -> I
    1:1:void flip(boolean,boolean):0:0 -> a
    1:1:void setRegion(float,float,float,float):0:0 -> k
    1:1:void draw(com.badlogic.gdx.graphics.g2d.Batch):0:0 -> o
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/a;)V"}
    1:1:com.badlogic.gdx.graphics.Color getColor():0:0 -> p
    1:1:float getHeight():0:0 -> q
    1:1:float getOriginX():0:0 -> r
    1:1:float getOriginY():0:0 -> s
    1:1:float[] getVertices():0:0 -> t
    1:1:float getWidth():0:0 -> u
    1:1:float getX():0:0 -> v
    1:1:float getY():0:0 -> w
    1:1:void rotate90(boolean):0:0 -> x
    1:1:void set(com.badlogic.gdx.graphics.g2d.Sprite):0:0 -> y
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/g;)V"}
    1:1:void setBounds(float,float,float,float):0:0 -> z
com.badlogic.gdx.graphics.g2d.SpriteBatch -> com.badlogic.gdx.graphics.g2d.h:
    com.badlogic.gdx.graphics.Mesh mesh -> a
    float[] vertices -> b
    int idx -> c
    com.badlogic.gdx.graphics.Texture lastTexture -> d
    float invTexWidth -> e
    float invTexHeight -> f
    boolean drawing -> g
    com.badlogic.gdx.math.Matrix4 transformMatrix -> h
    com.badlogic.gdx.math.Matrix4 projectionMatrix -> i
    com.badlogic.gdx.math.Matrix4 combinedMatrix -> j
    boolean blendingDisabled -> k
    int blendSrcFunc -> l
    int blendDstFunc -> m
    int blendSrcFuncAlpha -> n
    int blendDstFuncAlpha -> o
    com.badlogic.gdx.graphics.glutils.ShaderProgram shader -> p
    com.badlogic.gdx.graphics.glutils.ShaderProgram customShader -> q
    boolean ownsShader -> r
    com.badlogic.gdx.graphics.Color color -> s
    float colorPacked -> t
    int renderCalls -> u
    int totalRenderCalls -> v
    int maxSpritesInBatch -> w
    com.badlogic.gdx.graphics.Mesh$VertexDataType defaultVertexDataType -> x
    1:1:void <init>():0:0 -> <init>
    2:2:void <init>(int,com.badlogic.gdx.graphics.glutils.ShaderProgram):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(ILg/m;)V"}
    1:1:void setBlendFunction(int,int):0:0 -> A
    1:1:void setProjectionMatrix(com.badlogic.gdx.math.Matrix4):0:0 -> B
    1:1:void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float):0:0 -> D
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/j;FFFF)V"}
    1:1:void switchTexture(com.badlogic.gdx.graphics.Texture):0:0 -> E
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lf/l;)V"}
    1:1:void end():0:0 -> c
    1:1:com.badlogic.gdx.graphics.glutils.ShaderProgram createDefaultShader():0:0 -> e
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lg/m;"}
    1:1:void setTransformMatrix(com.badlogic.gdx.math.Matrix4):0:0 -> f
    1:1:boolean isBlendingEnabled():0:0 -> g
    1:1:void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float,float,float,float,float,float):0:0 -> h
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/j;FFFFFFFFF)V"}
    1:1:void setPackedColor(float):0:0 -> i
    1:1:float getPackedColor():0:0 -> j
    1:1:com.badlogic.gdx.math.Matrix4 getTransformMatrix():0:0 -> o
    1:1:void setBlendFunctionSeparate(int,int,int,int):0:0 -> p
    1:1:void setColor(float,float,float,float):0:0 -> setColor
    2:2:void setColor(com.badlogic.gdx.graphics.Color):0:0 -> setColor
    1:1:void setupMatrices():0:0 -> t
    1:1:void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float,float,float,float,float):0:0 -> u
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lf/l;FFFFFFFF)V"}
    1:1:void draw(com.badlogic.gdx.graphics.Texture,float[],int,int):0:0 -> v
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lf/l;[FII)V"}
    1:1:void begin():0:0 -> y
com.badlogic.gdx.graphics.g2d.TextureAtlas -> com.badlogic.gdx.graphics.g2d.i:
    com.badlogic.gdx.utils.ObjectSet textures -> a
    com.badlogic.gdx.utils.Array regions -> b
    1:1:void <init>(com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/i$c;)V"}
    2:2:void <init>(com.badlogic.gdx.files.FileHandle):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le/a;)V"}
    3:3:void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le/a;Le/a;)V"}
    4:4:void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le/a;Le/a;Z)V"}
    1:1:com.badlogic.gdx.graphics.g2d.Sprite newSprite(com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion):0:0 -> E
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/i$a;)Lcom/badlogic/gdx/graphics/g2d/g;"}
    1:1:com.badlogic.gdx.graphics.g2d.Sprite createSprite(java.lang.String):0:0 -> e
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;)Lcom/badlogic/gdx/graphics/g2d/g;"}
    1:1:com.badlogic.gdx.utils.Array findRegions(java.lang.String):0:0 -> g
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;)Ll/b;"}
    1:1:com.badlogic.gdx.utils.Array getRegions():0:0 -> p
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/b;"}
    1:1:void load(com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData):0:0 -> t
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/i$c;)V"}
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion -> com.badlogic.gdx.graphics.g2d.i$a:
    int index -> h
    java.lang.String name -> i
    float offsetX -> j
    float offsetY -> k
    int packedWidth -> l
    int packedHeight -> m
    int originalWidth -> n
    int originalHeight -> o
    boolean rotate -> p
    int degrees -> q
    java.lang.String[] names -> r
    int[][] values -> s
    1:1:void <init>(com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/i$a;)V"}
    2:2:void <init>(com.badlogic.gdx.graphics.Texture,int,int,int,int):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lf/l;IIII)V"}
    1:1:void flip(boolean,boolean):0:0 -> a
    1:1:int[] findValue(java.lang.String):0:0 -> o
    1:1:float getRotatedPackedHeight():0:0 -> p
    1:1:float getRotatedPackedWidth():0:0 -> q
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasSprite -> com.badlogic.gdx.graphics.g2d.i$b:
    com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion region -> t
    float originalOffsetX -> u
    float originalOffsetY -> v
    1:1:void <init>(com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/i$a;)V"}
    2:2:void <init>(com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasSprite):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/i$b;)V"}
    1:1:void setOrigin(float,float):0:0 -> C
    1:1:void setSize(float,float):0:0 -> H
    1:1:float getHeightRatio():0:0 -> J
    1:1:float getWidthRatio():0:0 -> K
    1:1:float getHeight():0:0 -> q
    1:1:float getOriginX():0:0 -> r
    1:1:float getOriginY():0:0 -> s
    1:1:float getWidth():0:0 -> u
    1:1:float getX():0:0 -> v
    1:1:float getY():0:0 -> w
    1:1:void rotate90(boolean):0:0 -> x
    1:1:void setBounds(float,float,float,float):0:0 -> z
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData -> com.badlogic.gdx.graphics.g2d.i$c:
    com.badlogic.gdx.utils.Array pages -> a
    com.badlogic.gdx.utils.Array regions -> b
    1:1:void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le/a;Le/a;Z)V"}
    1:1:void load(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le/a;Le/a;Z)V"}
    1:1:int readEntry(java.lang.String[],java.lang.String):0:0 -> b
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$1 -> com.badlogic.gdx.graphics.g2d.i$c$f:
    java.lang.String[] val$entry -> a
    com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData this$0 -> b
    1:1:void parse(java.lang.Object):0:0 -> a
    1:1:void parse(com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Page):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/i$c$p;)V"}
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$10 -> com.badlogic.gdx.graphics.g2d.i$c$a:
    java.lang.String[] val$entry -> a
    com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData this$0 -> b
    1:1:void parse(java.lang.Object):0:0 -> a
    1:1:void parse(com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/i$c$q;)V"}
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$11 -> com.badlogic.gdx.graphics.g2d.i$c$b:
    java.lang.String[] val$entry -> a
    com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData this$0 -> b
    1:1:void parse(java.lang.Object):0:0 -> a
    1:1:void parse(com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/i$c$q;)V"}
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$12 -> com.badlogic.gdx.graphics.g2d.i$c$c:
    java.lang.String[] val$entry -> a
    com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData this$0 -> b
    1:1:void parse(java.lang.Object):0:0 -> a
    1:1:void parse(com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/i$c$q;)V"}
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$13 -> com.badlogic.gdx.graphics.g2d.i$c$d:
    java.lang.String[] val$entry -> a
    boolean[] val$hasIndexes -> b
    com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData this$0 -> c
    1:1:void parse(java.lang.Object):0:0 -> a
    1:1:void parse(com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/i$c$q;)V"}
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$14 -> com.badlogic.gdx.graphics.g2d.i$c$e:
    com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData this$0 -> a
    1:1:int compare(com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region,com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/i$c$q;Lcom/badlogic/gdx/graphics/g2d/i$c$q;)I"}
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$2 -> com.badlogic.gdx.graphics.g2d.i$c$g:
    java.lang.String[] val$entry -> a
    com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData this$0 -> b
    1:1:void parse(java.lang.Object):0:0 -> a
    1:1:void parse(com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Page):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/i$c$p;)V"}
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$3 -> com.badlogic.gdx.graphics.g2d.i$c$h:
    java.lang.String[] val$entry -> a
    com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData this$0 -> b
    1:1:void parse(java.lang.Object):0:0 -> a
    1:1:void parse(com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Page):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/i$c$p;)V"}
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$4 -> com.badlogic.gdx.graphics.g2d.i$c$i:
    java.lang.String[] val$entry -> a
    com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData this$0 -> b
    1:1:void parse(java.lang.Object):0:0 -> a
    1:1:void parse(com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Page):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/i$c$p;)V"}
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$5 -> com.badlogic.gdx.graphics.g2d.i$c$j:
    java.lang.String[] val$entry -> a
    com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData this$0 -> b
    1:1:void parse(java.lang.Object):0:0 -> a
    1:1:void parse(com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Page):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/i$c$p;)V"}
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$6 -> com.badlogic.gdx.graphics.g2d.i$c$k:
    java.lang.String[] val$entry -> a
    com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData this$0 -> b
    1:1:void parse(java.lang.Object):0:0 -> a
    1:1:void parse(com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/i$c$q;)V"}
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$7 -> com.badlogic.gdx.graphics.g2d.i$c$l:
    java.lang.String[] val$entry -> a
    com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData this$0 -> b
    1:1:void parse(java.lang.Object):0:0 -> a
    1:1:void parse(com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/i$c$q;)V"}
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$8 -> com.badlogic.gdx.graphics.g2d.i$c$m:
    java.lang.String[] val$entry -> a
    com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData this$0 -> b
    1:1:void parse(java.lang.Object):0:0 -> a
    1:1:void parse(com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/i$c$q;)V"}
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$9 -> com.badlogic.gdx.graphics.g2d.i$c$n:
    java.lang.String[] val$entry -> a
    com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData this$0 -> b
    1:1:void parse(java.lang.Object):0:0 -> a
    1:1:void parse(com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/i$c$q;)V"}
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Field -> com.badlogic.gdx.graphics.g2d.i$c$o:
    void parse(java.lang.Object) -> a
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Page -> com.badlogic.gdx.graphics.g2d.i$c$p:
    com.badlogic.gdx.files.FileHandle textureFile -> a
    com.badlogic.gdx.graphics.Texture texture -> b
    float width -> c
    float height -> d
    boolean useMipMaps -> e
    com.badlogic.gdx.graphics.Pixmap$Format format -> f
    com.badlogic.gdx.graphics.Texture$TextureFilter minFilter -> g
    com.badlogic.gdx.graphics.Texture$TextureFilter magFilter -> h
    com.badlogic.gdx.graphics.Texture$TextureWrap uWrap -> i
    com.badlogic.gdx.graphics.Texture$TextureWrap vWrap -> j
    boolean pma -> k
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region -> com.badlogic.gdx.graphics.g2d.i$c$q:
    com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Page page -> a
    java.lang.String name -> b
    int left -> c
    int top -> d
    int width -> e
    int height -> f
    float offsetX -> g
    float offsetY -> h
    int originalWidth -> i
    int originalHeight -> j
    int degrees -> k
    boolean rotate -> l
    int index -> m
    java.lang.String[] names -> n
    int[][] values -> o
    boolean flip -> p
com.badlogic.gdx.graphics.g2d.TextureRegion -> com.badlogic.gdx.graphics.g2d.j:
    com.badlogic.gdx.graphics.Texture texture -> a
    float u -> b
    float v -> c
    float u2 -> d
    float v2 -> e
    int regionWidth -> f
    int regionHeight -> g
    void <init>() -> <init>
    1:1:void <init>(com.badlogic.gdx.graphics.g2d.TextureRegion,int,int,int,int):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/j;IIII)V"}
    2:2:void <init>(com.badlogic.gdx.graphics.Texture):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lf/l;)V"}
    3:3:void <init>(com.badlogic.gdx.graphics.Texture,int,int,int,int):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lf/l;IIII)V"}
    1:1:void flip(boolean,boolean):0:0 -> a
    1:1:int getRegionHeight():0:0 -> b
    1:1:int getRegionWidth():0:0 -> c
    1:1:int getRegionX():0:0 -> d
    1:1:int getRegionY():0:0 -> e
    1:1:com.badlogic.gdx.graphics.Texture getTexture():0:0 -> f
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lf/l;"}
    1:1:float getU():0:0 -> g
    1:1:float getU2():0:0 -> h
    1:1:float getV():0:0 -> i
    1:1:float getV2():0:0 -> j
    1:1:void setRegion(float,float,float,float):0:0 -> k
    1:1:void setRegion(int,int,int,int):0:0 -> l
    1:1:void setRegion(com.badlogic.gdx.graphics.g2d.TextureRegion):0:0 -> m
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/j;)V"}
    1:1:void setRegion(com.badlogic.gdx.graphics.g2d.TextureRegion,int,int,int,int):0:0 -> n
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/j;IIII)V"}
com.badlogic.gdx.graphics.glutils.ETC1 -> com.badlogic.gdx.graphics.glutils.ETC1:
    int PKM_HEADER_SIZE -> a
    int ETC1_RGB8_OES -> b
    1:1:com.badlogic.gdx.graphics.Pixmap decodeImage(com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data,com.badlogic.gdx.graphics.Pixmap$Format):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/glutils/ETC1$a;Lf/j$c;)Lf/j;"}
    1:1:int getPixelSize(com.badlogic.gdx.graphics.Pixmap$Format):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lf/j$c;)I"}
com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data -> com.badlogic.gdx.graphics.glutils.ETC1$a:
    int width -> a
    int height -> b
    java.nio.ByteBuffer compressedData -> c
    int dataOffset -> d
    1:1:void <init>(int,int,java.nio.ByteBuffer,int):0:0 -> <init>
    2:2:void <init>(com.badlogic.gdx.files.FileHandle):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le/a;)V"}
    1:1:void checkNPOT():0:0 -> e
    1:1:boolean hasPKMHeader():0:0 -> g
com.badlogic.gdx.graphics.glutils.ETC1TextureData -> com.badlogic.gdx.graphics.glutils.a:
    com.badlogic.gdx.files.FileHandle file -> a
    com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data data -> b
    boolean useMipMaps -> c
    int width -> d
    int height -> e
    boolean isPrepared -> f
    1:1:void <init>(com.badlogic.gdx.files.FileHandle,boolean):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le/a;Z)V"}
    1:1:void prepare():0:0 -> a
    1:1:int getWidth():0:0 -> b
    1:1:int getHeight():0:0 -> c
    1:1:boolean isPrepared():0:0 -> d
    1:1:com.badlogic.gdx.graphics.TextureData$TextureDataType getType():0:0 -> e
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lf/o$b;"}
    1:1:boolean isManaged():0:0 -> f
    1:1:void consumeCustomData(int):0:0 -> h
    1:1:boolean disposePixmap():0:0 -> i
    1:1:com.badlogic.gdx.graphics.Pixmap consumePixmap():0:0 -> j
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lf/j;"}
    1:1:com.badlogic.gdx.graphics.Pixmap$Format getFormat():0:0 -> k
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lf/j$c;"}
    1:1:boolean useMipMaps():0:0 -> l
com.badlogic.gdx.graphics.glutils.FileTextureData -> g.a:
    com.badlogic.gdx.files.FileHandle file -> a
    int width -> b
    int height -> c
    com.badlogic.gdx.graphics.Pixmap$Format format -> d
    com.badlogic.gdx.graphics.Pixmap pixmap -> e
    boolean useMipMaps -> f
    boolean isPrepared -> g
    1:1:void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap$Format,boolean):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le/a;Lf/j;Lf/j$c;Z)V"}
    1:1:void prepare():0:0 -> a
    1:1:int getWidth():0:0 -> b
    1:1:int getHeight():0:0 -> c
    1:1:boolean isPrepared():0:0 -> d
    1:1:com.badlogic.gdx.graphics.TextureData$TextureDataType getType():0:0 -> e
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lf/o$b;"}
    1:1:boolean isManaged():0:0 -> f
    1:1:void consumeCustomData(int):0:0 -> h
    1:1:boolean disposePixmap():0:0 -> i
    1:1:com.badlogic.gdx.graphics.Pixmap consumePixmap():0:0 -> j
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lf/j;"}
    1:1:com.badlogic.gdx.graphics.Pixmap$Format getFormat():0:0 -> k
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lf/j$c;"}
    1:1:boolean useMipMaps():0:0 -> l
    1:1:java.lang.String toString():0:0 -> toString
com.badlogic.gdx.graphics.glutils.GLFrameBuffer -> g.b:
    com.badlogic.gdx.utils.Array textureAttachments -> a
    int framebufferHandle -> b
    int depthStencilPackedBufferHandle -> c
    boolean hasDepthStencilPackedBuffer -> d
    java.util.Map buffers -> e
    int defaultFramebufferHandle -> f
    boolean defaultFramebufferHandleInitialized -> g
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>():0:0 -> <init>
    1:1:java.lang.String getManagedStatus():0:0 -> E
    1:1:java.lang.StringBuilder getManagedStatus(java.lang.StringBuilder):0:0 -> F
    1:1:void invalidateAllFrameBuffers(com.badlogic.gdx.Application):0:0 -> G
      # {"id":"com.android.tools.r8.residualsignature","signature":"(La/c;)V"}
    1:1:void dispose():0:0 -> dispose
    1:1:void build():0:0 -> e
    1:1:void checkValidBuilder():0:0 -> g
    1:1:void clearAllFrameBuffers(com.badlogic.gdx.Application):0:0 -> p
      # {"id":"com.android.tools.r8.residualsignature","signature":"(La/c;)V"}
    void disposeColorTexture(com.badlogic.gdx.graphics.GLTexture) -> t
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lf/g;)V"}
com.badlogic.gdx.graphics.glutils.GLVersion -> g.c:
    int majorVersion -> a
    int minorVersion -> b
    int releaseVersion -> c
    java.lang.String vendorString -> d
    java.lang.String rendererString -> e
    com.badlogic.gdx.graphics.glutils.GLVersion$Type type -> f
    java.lang.String TAG -> g
    1:1:void <init>(com.badlogic.gdx.Application$ApplicationType,java.lang.String,java.lang.String,java.lang.String):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(La/c$a;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V"}
    1:1:void extractVersion(java.lang.String,java.lang.String):0:0 -> a
    1:1:int getMajorVersion():0:0 -> b
    1:1:int parseInt(java.lang.String,int):0:0 -> c
com.badlogic.gdx.graphics.glutils.GLVersion$Type -> g.c$a:
    com.badlogic.gdx.graphics.glutils.GLVersion$Type OpenGL -> a
    com.badlogic.gdx.graphics.glutils.GLVersion$Type GLES -> b
    com.badlogic.gdx.graphics.glutils.GLVersion$Type WebGL -> c
    com.badlogic.gdx.graphics.glutils.GLVersion$Type NONE -> d
    com.badlogic.gdx.graphics.glutils.GLVersion$Type[] $VALUES -> e
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>(java.lang.String,int):0:0 -> <init>
    1:1:com.badlogic.gdx.graphics.glutils.GLVersion$Type valueOf(java.lang.String):0:0 -> valueOf
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;)Lg/c$a;"}
    1:1:com.badlogic.gdx.graphics.glutils.GLVersion$Type[] values():0:0 -> values
      # {"id":"com.android.tools.r8.residualsignature","signature":"()[Lg/c$a;"}
com.badlogic.gdx.graphics.glutils.HdpiMode -> g.d:
    com.badlogic.gdx.graphics.glutils.HdpiMode Logical -> a
    com.badlogic.gdx.graphics.glutils.HdpiMode Pixels -> b
    com.badlogic.gdx.graphics.glutils.HdpiMode[] $VALUES -> c
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>(java.lang.String,int):0:0 -> <init>
    1:1:com.badlogic.gdx.graphics.glutils.HdpiMode valueOf(java.lang.String):0:0 -> valueOf
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;)Lg/d;"}
    1:1:com.badlogic.gdx.graphics.glutils.HdpiMode[] values():0:0 -> values
      # {"id":"com.android.tools.r8.residualsignature","signature":"()[Lg/d;"}
com.badlogic.gdx.graphics.glutils.HdpiUtils -> g.e:
    com.badlogic.gdx.graphics.glutils.HdpiMode mode -> a
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void glScissor(int,int,int,int):0:0 -> a
    1:1:void glViewport(int,int,int,int):0:0 -> b
    1:1:int toBackBufferX(int):0:0 -> c
    1:1:int toBackBufferY(int):0:0 -> d
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer -> g.g:
    void end() -> c
    int getNumVertices() -> d
    void dispose() -> dispose
    int getMaxVertices() -> e
    void color(float) -> f
    void vertex(float,float,float) -> g
    void begin(com.badlogic.gdx.math.Matrix4,int) -> h
    void color(float,float,float,float) -> i
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer20 -> g.f:
    int primitiveType -> a
    int vertexIdx -> b
    int numSetTexCoords -> c
    int maxVertices -> d
    int numVertices -> e
    com.badlogic.gdx.graphics.Mesh mesh -> f
    com.badlogic.gdx.graphics.glutils.ShaderProgram shader -> g
    boolean ownsShader -> h
    int numTexCoords -> i
    int vertexSize -> j
    int normalOffset -> k
    int colorOffset -> l
    int texCoordOffset -> m
    com.badlogic.gdx.math.Matrix4 projModelView -> n
    float[] vertices -> o
    java.lang.String[] shaderUniformNames -> p
    1:1:void <init>(int,boolean,boolean,int):0:0 -> <init>
    2:2:void <init>(int,boolean,boolean,int,com.badlogic.gdx.graphics.glutils.ShaderProgram):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(IZZILg/m;)V"}
    1:1:com.badlogic.gdx.graphics.VertexAttribute[] buildVertexAttributes(boolean,boolean,int):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(ZZI)[Lf/p;"}
    1:1:com.badlogic.gdx.graphics.glutils.ShaderProgram createDefaultShader(boolean,boolean,int):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(ZZI)Lg/m;"}
    1:1:void end():0:0 -> c
    1:1:int getNumVertices():0:0 -> d
    1:1:void dispose():0:0 -> dispose
    1:1:int getMaxVertices():0:0 -> e
    1:1:void color(float):0:0 -> f
    1:1:void vertex(float,float,float):0:0 -> g
    1:1:void begin(com.badlogic.gdx.math.Matrix4,int):0:0 -> h
    1:1:void color(float,float,float,float):0:0 -> i
    1:1:java.lang.String createFragmentShader(boolean,boolean,int):0:0 -> j
    1:1:java.lang.String createVertexShader(boolean,boolean,int):0:0 -> k
    1:1:void flush():0:0 -> l
com.badlogic.gdx.graphics.glutils.IndexArray -> g.h:
    java.nio.ShortBuffer buffer -> a
    java.nio.ByteBuffer byteBuffer -> b
    boolean empty -> c
    1:1:void <init>(int):0:0 -> <init>
    1:1:int getNumIndices():0:0 -> C
    1:1:void dispose():0:0 -> dispose
    1:1:void invalidate():0:0 -> invalidate
    1:1:void unbind():0:0 -> k
    1:1:void setIndices(short[],int,int):0:0 -> m
    1:1:java.nio.ShortBuffer getBuffer(boolean):0:0 -> q
    1:1:int getNumMaxIndices():0:0 -> w
    1:1:void bind():0:0 -> z
com.badlogic.gdx.graphics.glutils.IndexBufferObject -> g.i:
    java.nio.ShortBuffer buffer -> a
    java.nio.ByteBuffer byteBuffer -> b
    boolean ownsBuffer -> c
    int bufferHandle -> d
    boolean isDirect -> e
    boolean isDirty -> f
    boolean isBound -> g
    int usage -> h
    boolean empty -> i
    1:1:void <init>(boolean,int):0:0 -> <init>
    1:1:int getNumIndices():0:0 -> C
    1:1:void dispose():0:0 -> dispose
    1:1:void invalidate():0:0 -> invalidate
    1:1:void unbind():0:0 -> k
    1:1:void setIndices(short[],int,int):0:0 -> m
    1:1:java.nio.ShortBuffer getBuffer(boolean):0:0 -> q
    1:1:int getNumMaxIndices():0:0 -> w
    1:1:void bind():0:0 -> z
com.badlogic.gdx.graphics.glutils.IndexBufferObjectSubData -> g.j:
    java.nio.ShortBuffer buffer -> a
    java.nio.ByteBuffer byteBuffer -> b
    int bufferHandle -> c
    boolean isDirect -> d
    boolean isDirty -> e
    boolean isBound -> f
    int usage -> g
    1:1:void <init>(boolean,int):0:0 -> <init>
    1:1:int getNumIndices():0:0 -> C
    1:1:void dispose():0:0 -> dispose
    1:1:int createBufferObject():0:0 -> e
    1:1:void invalidate():0:0 -> invalidate
    1:1:void unbind():0:0 -> k
    1:1:void setIndices(short[],int,int):0:0 -> m
    1:1:java.nio.ShortBuffer getBuffer(boolean):0:0 -> q
    1:1:int getNumMaxIndices():0:0 -> w
    1:1:void bind():0:0 -> z
com.badlogic.gdx.graphics.glutils.IndexData -> g.k:
    int getNumIndices() -> C
    void dispose() -> dispose
    void invalidate() -> invalidate
    void unbind() -> k
    void setIndices(short[],int,int) -> m
    java.nio.ShortBuffer getBuffer(boolean) -> q
    int getNumMaxIndices() -> w
    void bind() -> z
com.badlogic.gdx.graphics.glutils.KTXTextureData -> com.badlogic.gdx.graphics.glutils.b:
    com.badlogic.gdx.files.FileHandle file -> a
    int glType -> b
    int glTypeSize -> c
    int glFormat -> d
    int glInternalFormat -> e
    int glBaseInternalFormat -> f
    int pixelWidth -> g
    int pixelHeight -> h
    int pixelDepth -> i
    int numberOfArrayElements -> j
    int numberOfFaces -> k
    int numberOfMipmapLevels -> l
    int imagePos -> m
    java.nio.ByteBuffer compressedData -> n
    boolean useMipMaps -> o
    1:1:void <init>(com.badlogic.gdx.files.FileHandle,boolean):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le/a;Z)V"}
    1:1:void prepare():0:0 -> a
    1:1:int getWidth():0:0 -> b
    1:1:int getHeight():0:0 -> c
    1:1:boolean isPrepared():0:0 -> d
    1:1:com.badlogic.gdx.graphics.TextureData$TextureDataType getType():0:0 -> e
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lf/o$b;"}
    1:1:boolean isManaged():0:0 -> f
    1:1:void consumeCubemapData():0:0 -> g
    1:1:void consumeCustomData(int):0:0 -> h
    1:1:boolean disposePixmap():0:0 -> i
    1:1:com.badlogic.gdx.graphics.Pixmap consumePixmap():0:0 -> j
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lf/j;"}
    1:1:com.badlogic.gdx.graphics.Pixmap$Format getFormat():0:0 -> k
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lf/j$c;"}
    1:1:boolean useMipMaps():0:0 -> l
    1:1:void disposePreparedData():0:0 -> m
com.badlogic.gdx.graphics.glutils.MipMapGenerator -> g.l:
    boolean useHWMipMap -> a
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void generateMipMap(int,com.badlogic.gdx.graphics.Pixmap,int,int):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(ILf/j;II)V"}
    1:1:void generateMipMapCPU(int,com.badlogic.gdx.graphics.Pixmap,int,int):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(ILf/j;II)V"}
    1:1:void generateMipMapDesktop(int,com.badlogic.gdx.graphics.Pixmap,int,int):0:0 -> c
      # {"id":"com.android.tools.r8.residualsignature","signature":"(ILf/j;II)V"}
    1:1:void generateMipMapGLES20(int,com.badlogic.gdx.graphics.Pixmap):0:0 -> d
      # {"id":"com.android.tools.r8.residualsignature","signature":"(ILf/j;)V"}
com.badlogic.gdx.graphics.glutils.ShaderProgram -> g.m:
    java.lang.String log -> a
    boolean isCompiled -> b
    com.badlogic.gdx.utils.ObjectIntMap uniforms -> c
    com.badlogic.gdx.utils.ObjectIntMap uniformTypes -> d
    com.badlogic.gdx.utils.ObjectIntMap uniformSizes -> e
    java.lang.String[] uniformNames -> f
    com.badlogic.gdx.utils.ObjectIntMap attributes -> g
    com.badlogic.gdx.utils.ObjectIntMap attributeTypes -> h
    com.badlogic.gdx.utils.ObjectIntMap attributeSizes -> i
    java.lang.String[] attributeNames -> j
    int program -> k
    int vertexShaderHandle -> l
    int fragmentShaderHandle -> m
    java.nio.FloatBuffer matrix -> n
    java.lang.String vertexShaderSource -> o
    java.lang.String fragmentShaderSource -> p
    boolean invalidated -> q
    int refCount -> r
    java.nio.IntBuffer params -> s
    java.nio.IntBuffer type -> t
    boolean pedantic -> u
    java.lang.String prependVertexCode -> v
    java.lang.String prependFragmentCode -> w
    com.badlogic.gdx.utils.ObjectMap shaders -> x
    java.nio.IntBuffer intbuf -> y
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>(java.lang.String,java.lang.String):0:0 -> <init>
    1:1:int createProgram():0:0 -> E
    1:1:void disableVertexAttribute(int):0:0 -> F
    1:1:void disableVertexAttribute(java.lang.String):0:0 -> G
    1:1:void enableVertexAttribute(int):0:0 -> H
    1:1:int fetchAttributeLocation(java.lang.String):0:0 -> I
    1:1:void fetchAttributes():0:0 -> J
    1:1:int fetchUniformLocation(java.lang.String):0:0 -> K
    1:1:int fetchUniformLocation(java.lang.String,boolean):0:0 -> L
    1:1:void fetchUniforms():0:0 -> M
    1:1:int getAttributeLocation(java.lang.String):0:0 -> N
    1:1:java.lang.String getLog():0:0 -> O
    1:1:java.lang.String getManagedStatus():0:0 -> P
    1:1:void invalidateAllShaderPrograms(com.badlogic.gdx.Application):0:0 -> Q
      # {"id":"com.android.tools.r8.residualsignature","signature":"(La/c;)V"}
    1:1:boolean isCompiled():0:0 -> R
    1:1:int linkProgram(int):0:0 -> S
    1:1:int loadShader(int,java.lang.String):0:0 -> T
    1:1:void setUniformMatrix(int,com.badlogic.gdx.math.Matrix4,boolean):0:0 -> U
    1:1:void setUniformMatrix(java.lang.String,com.badlogic.gdx.math.Matrix4):0:0 -> V
    1:1:void setUniformMatrix(java.lang.String,com.badlogic.gdx.math.Matrix4,boolean):0:0 -> W
    1:1:void setUniformi(java.lang.String,int):0:0 -> X
    1:1:void setVertexAttribute(int,int,int,boolean,int,int):0:0 -> Y
    1:1:void setVertexAttribute(int,int,int,boolean,int,java.nio.Buffer):0:0 -> Z
    1:1:void dispose():0:0 -> dispose
    1:1:void addManagedShader(com.badlogic.gdx.Application,com.badlogic.gdx.graphics.glutils.ShaderProgram):0:0 -> e
      # {"id":"com.android.tools.r8.residualsignature","signature":"(La/c;Lg/m;)V"}
    1:1:void checkManaged():0:0 -> g
    1:1:void clearAllShaderPrograms(com.badlogic.gdx.Application):0:0 -> p
      # {"id":"com.android.tools.r8.residualsignature","signature":"(La/c;)V"}
    1:1:void compileShaders(java.lang.String,java.lang.String):0:0 -> t
    1:1:void bind():0:0 -> z
com.badlogic.gdx.graphics.glutils.ShapeRenderer -> g.n:
    com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer renderer -> a
    boolean matrixDirty -> b
    com.badlogic.gdx.math.Matrix4 projectionMatrix -> c
    com.badlogic.gdx.math.Matrix4 transformMatrix -> d
    com.badlogic.gdx.math.Matrix4 combinedMatrix -> e
    com.badlogic.gdx.math.Vector2 tmp -> f
    com.badlogic.gdx.graphics.Color color -> g
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType shapeType -> h
    boolean autoShapeType -> i
    float defaultRectLineWidth -> j
    1:1:void <init>():0:0 -> <init>
    2:2:void <init>(int):0:0 -> <init>
    3:3:void <init>(int,com.badlogic.gdx.graphics.glutils.ShaderProgram):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(ILg/m;)V"}
    1:1:void setProjectionMatrix(com.badlogic.gdx.math.Matrix4):0:0 -> B
    1:1:void rect(float,float,float,float,float,float,float,float,float):0:0 -> E
    1:1:void rect(float,float,float,float,float,float,float,float,float,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color):0:0 -> F
    1:1:void set(com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType):0:0 -> G
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lg/n$a;)V"}
    1:1:void setAutoShapeType(boolean):0:0 -> H
    1:1:void end():0:0 -> c
    1:1:void dispose():0:0 -> dispose
    1:1:void begin(com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType):0:0 -> e
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lg/n$a;)V"}
    1:1:void setTransformMatrix(com.badlogic.gdx.math.Matrix4):0:0 -> f
    1:1:void flush():0:0 -> flush
    1:1:void check(com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType,com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType,int):0:0 -> g
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lg/n$a;Lg/n$a;I)V"}
    1:1:com.badlogic.gdx.math.Matrix4 getTransformMatrix():0:0 -> o
    1:1:boolean isDrawing():0:0 -> p
    1:1:void setColor(com.badlogic.gdx.graphics.Color):0:0 -> setColor
    1:1:void rect(float,float,float,float):0:0 -> t
    1:1:void begin():0:0 -> y
com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType -> g.n$a:
    int glType -> a
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType Point -> b
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType Line -> c
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType Filled -> d
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType[] $VALUES -> e
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>(java.lang.String,int,int):0:0 -> <init>
    1:1:int getGlType():0:0 -> a
    1:1:com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType valueOf(java.lang.String):0:0 -> valueOf
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;)Lg/n$a;"}
    1:1:com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType[] values():0:0 -> values
      # {"id":"com.android.tools.r8.residualsignature","signature":"()[Lg/n$a;"}
com.badlogic.gdx.graphics.glutils.VertexArray -> g.o:
    com.badlogic.gdx.graphics.VertexAttributes attributes -> a
    java.nio.FloatBuffer buffer -> b
    java.nio.ByteBuffer byteBuffer -> c
    boolean isBound -> d
    1:1:void <init>(int,com.badlogic.gdx.graphics.VertexAttributes):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(ILf/q;)V"}
    1:1:int getNumVertices():0:0 -> d
    1:1:void dispose():0:0 -> dispose
    1:1:void invalidate():0:0 -> invalidate
    1:1:void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]):0:0 -> l
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lg/m;[I)V"}
    1:1:com.badlogic.gdx.graphics.VertexAttributes getAttributes():0:0 -> n
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lf/q;"}
    1:1:void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]):0:0 -> s
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lg/m;[I)V"}
    1:1:void setVertices(float[],int,int):0:0 -> x
com.badlogic.gdx.graphics.glutils.VertexBufferObject -> g.p:
    com.badlogic.gdx.graphics.VertexAttributes attributes -> a
    java.nio.FloatBuffer buffer -> b
    java.nio.ByteBuffer byteBuffer -> c
    boolean ownsBuffer -> d
    int bufferHandle -> e
    int usage -> f
    boolean isDirty -> g
    boolean isBound -> h
    1:1:void <init>(boolean,int,com.badlogic.gdx.graphics.VertexAttributes):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(ZILf/q;)V"}
    1:1:int getNumVertices():0:0 -> d
    1:1:void dispose():0:0 -> dispose
    1:1:void bufferChanged():0:0 -> e
    1:1:void setBuffer(java.nio.Buffer,boolean,com.badlogic.gdx.graphics.VertexAttributes):0:0 -> g
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/nio/Buffer;ZLf/q;)V"}
    1:1:void invalidate():0:0 -> invalidate
    1:1:void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]):0:0 -> l
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lg/m;[I)V"}
    1:1:com.badlogic.gdx.graphics.VertexAttributes getAttributes():0:0 -> n
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lf/q;"}
    1:1:void setUsage(int):0:0 -> p
    1:1:void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]):0:0 -> s
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lg/m;[I)V"}
    1:1:void setVertices(float[],int,int):0:0 -> x
com.badlogic.gdx.graphics.glutils.VertexBufferObjectSubData -> g.q:
    com.badlogic.gdx.graphics.VertexAttributes attributes -> a
    java.nio.FloatBuffer buffer -> b
    java.nio.ByteBuffer byteBuffer -> c
    int bufferHandle -> d
    boolean isDirect -> e
    boolean isStatic -> f
    int usage -> g
    boolean isDirty -> h
    boolean isBound -> i
    1:1:void <init>(boolean,int,com.badlogic.gdx.graphics.VertexAttributes):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(ZILf/q;)V"}
    1:1:int getNumVertices():0:0 -> d
    1:1:void dispose():0:0 -> dispose
    1:1:void bufferChanged():0:0 -> e
    1:1:int createBufferObject():0:0 -> g
    1:1:void invalidate():0:0 -> invalidate
    1:1:void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]):0:0 -> l
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lg/m;[I)V"}
    1:1:com.badlogic.gdx.graphics.VertexAttributes getAttributes():0:0 -> n
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lf/q;"}
    1:1:void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]):0:0 -> s
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lg/m;[I)V"}
    1:1:void setVertices(float[],int,int):0:0 -> x
com.badlogic.gdx.graphics.glutils.VertexBufferObjectWithVAO -> g.r:
    com.badlogic.gdx.graphics.VertexAttributes attributes -> a
    java.nio.FloatBuffer buffer -> b
    java.nio.ByteBuffer byteBuffer -> c
    boolean ownsBuffer -> d
    int bufferHandle -> e
    boolean isStatic -> f
    int usage -> g
    boolean isDirty -> h
    boolean isBound -> i
    int vaoHandle -> j
    com.badlogic.gdx.utils.IntArray cachedLocations -> k
    java.nio.IntBuffer tmpHandle -> l
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>(boolean,int,com.badlogic.gdx.graphics.VertexAttributes):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(ZILf/q;)V"}
    1:1:void deleteVAO():0:0 -> E
    1:1:void unbindAttributes(com.badlogic.gdx.graphics.glutils.ShaderProgram):0:0 -> F
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lg/m;)V"}
    1:1:int getNumVertices():0:0 -> d
    1:1:void dispose():0:0 -> dispose
    1:1:void bindAttributes(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]):0:0 -> e
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lg/m;[I)V"}
    1:1:void bindData(com.badlogic.gdx.graphics.GL20):0:0 -> g
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lf/e;)V"}
    1:1:void invalidate():0:0 -> invalidate
    1:1:void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]):0:0 -> l
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lg/m;[I)V"}
    1:1:com.badlogic.gdx.graphics.VertexAttributes getAttributes():0:0 -> n
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lf/q;"}
    1:1:void bufferChanged():0:0 -> p
    1:1:void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]):0:0 -> s
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lg/m;[I)V"}
    1:1:void createVAO():0:0 -> t
    1:1:void setVertices(float[],int,int):0:0 -> x
com.badlogic.gdx.graphics.glutils.VertexData -> g.s:
    int getNumVertices() -> d
    void dispose() -> dispose
    void invalidate() -> invalidate
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> l
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lg/m;[I)V"}
    com.badlogic.gdx.graphics.VertexAttributes getAttributes() -> n
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lf/q;"}
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> s
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lg/m;[I)V"}
    void setVertices(float[],int,int) -> x
com.badlogic.gdx.input.GestureDetector -> h.a:
    com.badlogic.gdx.input.GestureDetector$GestureListener listener -> a
    float tapRectangleWidth -> b
    float tapRectangleHeight -> c
    long tapCountInterval -> d
    float longPressSeconds -> e
    long maxFlingDelay -> f
    boolean inTapRectangle -> g
    int tapCount -> h
    long lastTapTime -> i
    float lastTapX -> j
    float lastTapY -> k
    int lastTapButton -> l
    int lastTapPointer -> m
    boolean longPressFired -> n
    boolean pinching -> o
    boolean panning -> p
    com.badlogic.gdx.input.GestureDetector$VelocityTracker tracker -> q
    float tapRectangleCenterX -> r
    float tapRectangleCenterY -> s
    long touchDownTime -> t
    com.badlogic.gdx.math.Vector2 pointer1 -> u
    com.badlogic.gdx.math.Vector2 pointer2 -> v
    com.badlogic.gdx.math.Vector2 initialPointer1 -> w
    com.badlogic.gdx.math.Vector2 initialPointer2 -> x
    com.badlogic.gdx.utils.Timer$Task longPressTask -> y
    1:1:void <init>(float,float,float,float,float,com.badlogic.gdx.input.GestureDetector$GestureListener):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(FFFFFLh/a$c;)V"}
    2:2:void <init>(float,float,float,float,com.badlogic.gdx.input.GestureDetector$GestureListener):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(FFFFLh/a$c;)V"}
    1:1:void cancel():0:0 -> E
    1:1:boolean isPanning():0:0 -> F
    1:1:boolean isWithinTapRectangle(float,float,float,float):0:0 -> G
    1:1:void reset():0:0 -> H
    1:1:void setTapRectangleSize(float,float):0:0 -> I
    1:1:void setTapSquareSize(float):0:0 -> J
    1:1:boolean touchDown(float,float,int,int):0:0 -> K
    1:1:boolean touchDragged(float,float,int):0:0 -> L
    1:1:boolean touchUp(float,float,int,int):0:0 -> M
    1:1:boolean touchCancelled(int,int,int,int):0:0 -> touchCancelled
    1:1:boolean touchDown(int,int,int,int):0:0 -> touchDown
    1:1:boolean touchDragged(int,int,int):0:0 -> touchDragged
    1:1:boolean touchUp(int,int,int,int):0:0 -> touchUp
com.badlogic.gdx.input.GestureDetector$1 -> h.a$a:
    com.badlogic.gdx.input.GestureDetector this$0 -> f
    1:1:void <init>(com.badlogic.gdx.input.GestureDetector):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lh/a;)V"}
    1:1:void run():0:0 -> run
com.badlogic.gdx.input.GestureDetector$GestureAdapter -> h.a$b:
    void <init>() -> <init>
    1:1:void pinchStop():0:0 -> c
    1:1:boolean touchDown(float,float,int,int):0:0 -> d
com.badlogic.gdx.input.GestureDetector$GestureListener -> h.a$c:
    boolean fling(float,float,int) -> a
    boolean panStop(float,float,int,int) -> b
    void pinchStop() -> c
    boolean touchDown(float,float,int,int) -> d
    boolean zoom(float,float) -> e
    boolean longPress(float,float) -> f
    boolean pan(float,float,float,float) -> g
    boolean pinch(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2) -> h
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/j;Li/j;Li/j;Li/j;)Z"}
    boolean tap(float,float,int,int) -> i
com.badlogic.gdx.input.GestureDetector$VelocityTracker -> h.a$d:
    int sampleSize -> a
    float lastX -> b
    float lastY -> c
    float deltaX -> d
    float deltaY -> e
    long lastTime -> f
    int numSamples -> g
    float[] meanX -> h
    float[] meanY -> i
    long[] meanTime -> j
    1:1:void <init>():0:0 -> <init>
    1:1:float getAverage(float[],int):0:0 -> a
    1:1:long getAverage(long[],int):0:0 -> b
    1:1:float getVelocityX():0:0 -> c
    1:1:float getVelocityY():0:0 -> d
    1:1:void start(float,float,long):0:0 -> e
    1:1:void update(float,float,long):0:0 -> f
com.badlogic.gdx.math.Affine2 -> i.a:
    float m00 -> a
    float m01 -> b
    float m02 -> c
    float m10 -> d
    float m11 -> e
    float m12 -> f
    1:1:void <init>():0:0 -> <init>
    1:1:com.badlogic.gdx.math.Affine2 preMul(com.badlogic.gdx.math.Affine2):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/a;)Li/a;"}
    1:1:com.badlogic.gdx.math.Affine2 setToTrnRotScl(float,float,float,float,float):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(FFFFF)Li/a;"}
    1:1:com.badlogic.gdx.math.Affine2 translate(float,float):0:0 -> c
      # {"id":"com.android.tools.r8.residualsignature","signature":"(FF)Li/a;"}
    1:1:java.lang.String toString():0:0 -> toString
com.badlogic.gdx.math.Circle -> i.b:
    float x -> a
    float y -> b
    float radius -> c
    void <init>() -> <init>
    1:1:void <init>(float,float,float):0:0 -> <init>
    1:1:boolean contains(float,float):0:0 -> a
    1:1:void set(float,float,float):0:0 -> b
    1:1:boolean equals(java.lang.Object):0:0 -> equals
    1:1:int hashCode():0:0 -> hashCode
    1:1:java.lang.String toString():0:0 -> toString
com.badlogic.gdx.math.Frustum -> i.c:
    com.badlogic.gdx.math.Plane[] planes -> a
    com.badlogic.gdx.math.Vector3[] planePoints -> b
    float[] planePointsArray -> c
    com.badlogic.gdx.math.Vector3[] clipSpacePlanePoints -> d
    float[] clipSpacePlanePointsArray -> e
    com.badlogic.gdx.math.Vector3 tmpV -> f
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>():0:0 -> <init>
    1:1:void update(com.badlogic.gdx.math.Matrix4):0:0 -> a
com.badlogic.gdx.math.Interpolation -> i.d:
    com.badlogic.gdx.math.Interpolation$Exp exp10 -> A
    com.badlogic.gdx.math.Interpolation$ExpIn exp10In -> B
    com.badlogic.gdx.math.Interpolation$ExpOut exp10Out -> C
    com.badlogic.gdx.math.Interpolation$Exp exp5 -> D
    com.badlogic.gdx.math.Interpolation$ExpIn exp5In -> E
    com.badlogic.gdx.math.Interpolation$ExpOut exp5Out -> F
    com.badlogic.gdx.math.Interpolation circle -> G
    com.badlogic.gdx.math.Interpolation circleIn -> H
    com.badlogic.gdx.math.Interpolation circleOut -> I
    com.badlogic.gdx.math.Interpolation$Elastic elastic -> J
    com.badlogic.gdx.math.Interpolation$ElasticIn elasticIn -> K
    com.badlogic.gdx.math.Interpolation$ElasticOut elasticOut -> L
    com.badlogic.gdx.math.Interpolation$Swing swing -> M
    com.badlogic.gdx.math.Interpolation$SwingIn swingIn -> N
    com.badlogic.gdx.math.Interpolation$SwingOut swingOut -> O
    com.badlogic.gdx.math.Interpolation$Bounce bounce -> P
    com.badlogic.gdx.math.Interpolation$BounceIn bounceIn -> Q
    com.badlogic.gdx.math.Interpolation$BounceOut bounceOut -> R
    com.badlogic.gdx.math.Interpolation linear -> a
    com.badlogic.gdx.math.Interpolation smooth -> b
    com.badlogic.gdx.math.Interpolation smooth2 -> c
    com.badlogic.gdx.math.Interpolation smoother -> d
    com.badlogic.gdx.math.Interpolation fade -> e
    com.badlogic.gdx.math.Interpolation$Pow pow2 -> f
    com.badlogic.gdx.math.Interpolation$PowIn pow2In -> g
    com.badlogic.gdx.math.Interpolation$PowIn slowFast -> h
    com.badlogic.gdx.math.Interpolation$PowOut pow2Out -> i
    com.badlogic.gdx.math.Interpolation$PowOut fastSlow -> j
    com.badlogic.gdx.math.Interpolation pow2InInverse -> k
    com.badlogic.gdx.math.Interpolation pow2OutInverse -> l
    com.badlogic.gdx.math.Interpolation$Pow pow3 -> m
    com.badlogic.gdx.math.Interpolation$PowIn pow3In -> n
    com.badlogic.gdx.math.Interpolation$PowOut pow3Out -> o
    com.badlogic.gdx.math.Interpolation pow3InInverse -> p
    com.badlogic.gdx.math.Interpolation pow3OutInverse -> q
    com.badlogic.gdx.math.Interpolation$Pow pow4 -> r
    com.badlogic.gdx.math.Interpolation$PowIn pow4In -> s
    com.badlogic.gdx.math.Interpolation$PowOut pow4Out -> t
    com.badlogic.gdx.math.Interpolation$Pow pow5 -> u
    com.badlogic.gdx.math.Interpolation$PowIn pow5In -> v
    com.badlogic.gdx.math.Interpolation$PowOut pow5Out -> w
    com.badlogic.gdx.math.Interpolation sine -> x
    com.badlogic.gdx.math.Interpolation sineIn -> y
    com.badlogic.gdx.math.Interpolation sineOut -> z
    1:1:void <clinit>():0:0 -> <clinit>
    void <init>() -> <init>
    float apply(float) -> a
    1:1:float apply(float,float,float):0:0 -> b
com.badlogic.gdx.math.Interpolation$1 -> i.d$f:
    void <init>() -> <init>
    1:1:float apply(float):0:0 -> a
com.badlogic.gdx.math.Interpolation$10 -> i.d$a:
    void <init>() -> <init>
    1:1:float apply(float):0:0 -> a
com.badlogic.gdx.math.Interpolation$11 -> i.d$b:
    void <init>() -> <init>
    1:1:float apply(float):0:0 -> a
com.badlogic.gdx.math.Interpolation$12 -> i.d$c:
    void <init>() -> <init>
    1:1:float apply(float):0:0 -> a
com.badlogic.gdx.math.Interpolation$13 -> i.d$d:
    void <init>() -> <init>
    1:1:float apply(float):0:0 -> a
com.badlogic.gdx.math.Interpolation$14 -> i.d$e:
    void <init>() -> <init>
    1:1:float apply(float):0:0 -> a
com.badlogic.gdx.math.Interpolation$2 -> i.d$g:
    void <init>() -> <init>
    1:1:float apply(float):0:0 -> a
com.badlogic.gdx.math.Interpolation$3 -> i.d$h:
    void <init>() -> <init>
    1:1:float apply(float):0:0 -> a
com.badlogic.gdx.math.Interpolation$4 -> i.d$i:
    void <init>() -> <init>
    1:1:float apply(float):0:0 -> a
com.badlogic.gdx.math.Interpolation$5 -> i.d$j:
    void <init>() -> <init>
    1:1:float apply(float):0:0 -> a
com.badlogic.gdx.math.Interpolation$6 -> i.d$k:
    void <init>() -> <init>
    1:1:float apply(float):0:0 -> a
com.badlogic.gdx.math.Interpolation$7 -> i.d$l:
    void <init>() -> <init>
    1:1:float apply(float):0:0 -> a
com.badlogic.gdx.math.Interpolation$8 -> i.d$m:
    void <init>() -> <init>
    1:1:float apply(float):0:0 -> a
com.badlogic.gdx.math.Interpolation$9 -> i.d$n:
    void <init>() -> <init>
    1:1:float apply(float):0:0 -> a
com.badlogic.gdx.math.Interpolation$Bounce -> i.d$o:
    1:1:void <init>(int):0:0 -> <init>
    1:1:float apply(float):0:0 -> a
    1:1:float out(float):0:0 -> c
com.badlogic.gdx.math.Interpolation$BounceIn -> i.d$p:
    1:1:void <init>(int):0:0 -> <init>
    1:1:float apply(float):0:0 -> a
com.badlogic.gdx.math.Interpolation$BounceOut -> i.d$q:
    float[] widths -> S
    float[] heights -> T
    1:1:void <init>(int):0:0 -> <init>
    1:1:float apply(float):0:0 -> a
com.badlogic.gdx.math.Interpolation$Elastic -> i.d$r:
    float value -> S
    float power -> T
    float scale -> U
    float bounces -> V
    1:1:void <init>(float,float,int,float):0:0 -> <init>
    1:1:float apply(float):0:0 -> a
com.badlogic.gdx.math.Interpolation$ElasticIn -> i.d$s:
    1:1:void <init>(float,float,int,float):0:0 -> <init>
    1:1:float apply(float):0:0 -> a
com.badlogic.gdx.math.Interpolation$ElasticOut -> i.d$t:
    1:1:void <init>(float,float,int,float):0:0 -> <init>
    1:1:float apply(float):0:0 -> a
com.badlogic.gdx.math.Interpolation$Exp -> i.d$u:
    float value -> S
    float power -> T
    float min -> U
    float scale -> V
    1:1:void <init>(float,float):0:0 -> <init>
    1:1:float apply(float):0:0 -> a
com.badlogic.gdx.math.Interpolation$ExpIn -> i.d$v:
    1:1:void <init>(float,float):0:0 -> <init>
    1:1:float apply(float):0:0 -> a
com.badlogic.gdx.math.Interpolation$ExpOut -> i.d$w:
    1:1:void <init>(float,float):0:0 -> <init>
    1:1:float apply(float):0:0 -> a
com.badlogic.gdx.math.Interpolation$Pow -> i.d$x:
    int power -> S
    1:1:void <init>(int):0:0 -> <init>
    1:1:float apply(float):0:0 -> a
com.badlogic.gdx.math.Interpolation$PowIn -> i.d$y:
    1:1:void <init>(int):0:0 -> <init>
    1:1:float apply(float):0:0 -> a
com.badlogic.gdx.math.Interpolation$PowOut -> i.d$z:
    1:1:void <init>(int):0:0 -> <init>
    1:1:float apply(float):0:0 -> a
com.badlogic.gdx.math.Interpolation$Swing -> i.d$a0:
    float scale -> S
    1:1:void <init>(float):0:0 -> <init>
    1:1:float apply(float):0:0 -> a
com.badlogic.gdx.math.Interpolation$SwingIn -> i.d$b0:
    float scale -> S
    1:1:void <init>(float):0:0 -> <init>
    1:1:float apply(float):0:0 -> a
com.badlogic.gdx.math.Interpolation$SwingOut -> i.d$c0:
    float scale -> S
    1:1:void <init>(float):0:0 -> <init>
    1:1:float apply(float):0:0 -> a
com.badlogic.gdx.math.MathUtils -> i.e:
    java.util.Random random -> a
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:int ceil(float):0:0 -> a
    1:1:float clamp(float,float,float):0:0 -> b
    1:1:int clamp(int,int,int):0:0 -> c
    1:1:float cos(float):0:0 -> d
    1:1:float cosDeg(float):0:0 -> e
    1:1:boolean isEqual(float,float,float):0:0 -> f
    1:1:boolean isPowerOfTwo(int):0:0 -> g
    1:1:float lerpAngleDeg(float,float,float):0:0 -> h
    1:1:int nextPowerOfTwo(int):0:0 -> i
    1:1:float random():0:0 -> j
    1:1:float random(float):0:0 -> k
    1:1:int random(int,int):0:0 -> l
    1:1:int roundPositive(float):0:0 -> m
    1:1:float sin(float):0:0 -> n
    1:1:float sinDeg(float):0:0 -> o
com.badlogic.gdx.math.MathUtils$Sin -> i.e$a:
    float[] table -> a
    1:1:void <clinit>():0:0 -> <clinit>
com.badlogic.gdx.math.Matrix4 -> com.badlogic.gdx.math.Matrix4:
    float[] val -> a
    com.badlogic.gdx.math.Quaternion quat -> b
    com.badlogic.gdx.math.Quaternion quat2 -> c
    com.badlogic.gdx.math.Vector3 l_vez -> d
    com.badlogic.gdx.math.Vector3 l_vex -> e
    com.badlogic.gdx.math.Vector3 l_vey -> f
    com.badlogic.gdx.math.Vector3 tmpVec -> g
    com.badlogic.gdx.math.Matrix4 tmpMat -> h
    com.badlogic.gdx.math.Vector3 right -> i
    com.badlogic.gdx.math.Vector3 tmpForward -> j
    com.badlogic.gdx.math.Vector3 tmpUp -> k
    1:1:float det(float[]):0:0 -> a
    1:1:com.badlogic.gdx.math.Matrix4 idt():0:0 -> b
    1:1:boolean inv(float[]):0:0 -> c
    1:1:com.badlogic.gdx.math.Matrix4 mul(com.badlogic.gdx.math.Matrix4):0:0 -> d
    1:1:void mul(float[],float[]):0:0 -> e
    1:1:com.badlogic.gdx.math.Matrix4 set(com.badlogic.gdx.math.Matrix4):0:0 -> f
    1:1:com.badlogic.gdx.math.Matrix4 set(com.badlogic.gdx.math.Affine2):0:0 -> g
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/a;)Lcom/badlogic/gdx/math/Matrix4;"}
    1:1:com.badlogic.gdx.math.Matrix4 set(float[]):0:0 -> h
    1:1:com.badlogic.gdx.math.Matrix4 setToLookAt(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3):0:0 -> i
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/k;Li/k;)Lcom/badlogic/gdx/math/Matrix4;"}
    1:1:com.badlogic.gdx.math.Matrix4 setToLookAt(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3):0:0 -> j
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/k;Li/k;Li/k;)Lcom/badlogic/gdx/math/Matrix4;"}
    1:1:com.badlogic.gdx.math.Matrix4 setToOrtho(float,float,float,float,float,float):0:0 -> k
    1:1:com.badlogic.gdx.math.Matrix4 setToOrtho2D(float,float,float,float):0:0 -> l
    1:1:com.badlogic.gdx.math.Matrix4 setToTranslation(float,float,float):0:0 -> m
com.badlogic.gdx.math.Plane -> i.f:
    com.badlogic.gdx.math.Vector3 normal -> a
    float d -> b
    1:1:void <init>(com.badlogic.gdx.math.Vector3,float):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/k;F)V"}
    1:1:void set(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/k;Li/k;Li/k;)V"}
    1:1:java.lang.String toString():0:0 -> toString
com.badlogic.gdx.math.Quaternion -> i.g:
    float x -> a
    float y -> b
    float z -> c
    float w -> d
    com.badlogic.gdx.math.Quaternion tmp1 -> e
    com.badlogic.gdx.math.Quaternion tmp2 -> f
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>():0:0 -> <init>
    2:2:void <init>(float,float,float,float):0:0 -> <init>
    1:1:com.badlogic.gdx.math.Quaternion idt():0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Li/g;"}
    1:1:com.badlogic.gdx.math.Quaternion set(float,float,float,float):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(FFFF)Li/g;"}
    1:1:boolean equals(java.lang.Object):0:0 -> equals
    1:1:int hashCode():0:0 -> hashCode
    1:1:java.lang.String toString():0:0 -> toString
com.badlogic.gdx.math.RandomXS128 -> i.h:
    long seed0 -> a
    long seed1 -> b
    1:1:void <init>():0:0 -> <init>
    1:1:long murmurHash3(long):0:0 -> a
    1:1:long nextLong(long):0:0 -> b
    1:1:void setState(long,long):0:0 -> c
    1:1:int next(int):0:0 -> next
    1:1:boolean nextBoolean():0:0 -> nextBoolean
    1:1:void nextBytes(byte[]):0:0 -> nextBytes
    1:1:double nextDouble():0:0 -> nextDouble
    1:1:float nextFloat():0:0 -> nextFloat
    1:1:int nextInt():0:0 -> nextInt
    2:2:int nextInt(int):0:0 -> nextInt
    1:1:long nextLong():0:0 -> nextLong
    1:1:void setSeed(long):0:0 -> setSeed
com.badlogic.gdx.math.Rectangle -> i.i:
    1:1:void <clinit>():0:0 -> <clinit>
    void <init>() -> <init>
    1:1:void <init>(float,float,float,float):0:0 -> <init>
    2:2:void <init>(com.badlogic.gdx.math.Rectangle):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/i;)V"}
    1:1:float area():0:0 -> area
    1:1:boolean contains(float,float):0:0 -> contains
    2:2:boolean contains(com.badlogic.gdx.math.Circle):0:0 -> contains
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/b;)Z"}
    3:3:boolean contains(com.badlogic.gdx.math.Rectangle):0:0 -> contains
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/i;)Z"}
    4:4:boolean contains(com.badlogic.gdx.math.Vector2):0:0 -> contains
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/j;)Z"}
    1:1:boolean equals(java.lang.Object):0:0 -> equals
    1:1:com.badlogic.gdx.math.Rectangle fitInside(com.badlogic.gdx.math.Rectangle):0:0 -> fitInside
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/i;)Li/i;"}
    1:1:com.badlogic.gdx.math.Rectangle fitOutside(com.badlogic.gdx.math.Rectangle):0:0 -> fitOutside
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/i;)Li/i;"}
    1:1:com.badlogic.gdx.math.Rectangle fromString(java.lang.String):0:0 -> fromString
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;)Li/i;"}
    1:1:float getAspectRatio():0:0 -> getAspectRatio
    1:1:com.badlogic.gdx.math.Vector2 getCenter(com.badlogic.gdx.math.Vector2):0:0 -> getCenter
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/j;)Li/j;"}
    1:1:float getHeight():0:0 -> getHeight
    1:1:com.badlogic.gdx.math.Vector2 getPosition(com.badlogic.gdx.math.Vector2):0:0 -> getPosition
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/j;)Li/j;"}
    1:1:com.badlogic.gdx.math.Vector2 getSize(com.badlogic.gdx.math.Vector2):0:0 -> getSize
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/j;)Li/j;"}
    1:1:float getWidth():0:0 -> getWidth
    1:1:float getX():0:0 -> getX
    1:1:float getY():0:0 -> getY
    1:1:int hashCode():0:0 -> hashCode
    1:1:com.badlogic.gdx.math.Rectangle merge(float,float):0:0 -> merge
      # {"id":"com.android.tools.r8.residualsignature","signature":"(FF)Li/i;"}
    2:2:com.badlogic.gdx.math.Rectangle merge(com.badlogic.gdx.math.Rectangle):0:0 -> merge
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/i;)Li/i;"}
    3:3:com.badlogic.gdx.math.Rectangle merge(com.badlogic.gdx.math.Vector2):0:0 -> merge
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/j;)Li/i;"}
    4:4:com.badlogic.gdx.math.Rectangle merge(com.badlogic.gdx.math.Vector2[]):0:0 -> merge
      # {"id":"com.android.tools.r8.residualsignature","signature":"([Li/j;)Li/i;"}
    1:1:boolean overlaps(com.badlogic.gdx.math.Rectangle):0:0 -> overlaps
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/i;)Z"}
    1:1:float perimeter():0:0 -> perimeter
    1:1:com.badlogic.gdx.math.Rectangle set(float,float,float,float):0:0 -> set
      # {"id":"com.android.tools.r8.residualsignature","signature":"(FFFF)Li/i;"}
    2:2:com.badlogic.gdx.math.Rectangle set(com.badlogic.gdx.math.Rectangle):0:0 -> set
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/i;)Li/i;"}
    1:1:com.badlogic.gdx.math.Rectangle setCenter(float,float):0:0 -> setCenter
      # {"id":"com.android.tools.r8.residualsignature","signature":"(FF)Li/i;"}
    2:2:com.badlogic.gdx.math.Rectangle setCenter(com.badlogic.gdx.math.Vector2):0:0 -> setCenter
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/j;)Li/i;"}
    1:1:com.badlogic.gdx.math.Rectangle setHeight(float):0:0 -> setHeight
      # {"id":"com.android.tools.r8.residualsignature","signature":"(F)Li/i;"}
    1:1:com.badlogic.gdx.math.Rectangle setPosition(float,float):0:0 -> setPosition
      # {"id":"com.android.tools.r8.residualsignature","signature":"(FF)Li/i;"}
    2:2:com.badlogic.gdx.math.Rectangle setPosition(com.badlogic.gdx.math.Vector2):0:0 -> setPosition
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/j;)Li/i;"}
    1:1:com.badlogic.gdx.math.Rectangle setSize(float):0:0 -> setSize
      # {"id":"com.android.tools.r8.residualsignature","signature":"(F)Li/i;"}
    2:2:com.badlogic.gdx.math.Rectangle setSize(float,float):0:0 -> setSize
      # {"id":"com.android.tools.r8.residualsignature","signature":"(FF)Li/i;"}
    1:1:com.badlogic.gdx.math.Rectangle setWidth(float):0:0 -> setWidth
      # {"id":"com.android.tools.r8.residualsignature","signature":"(F)Li/i;"}
    1:1:com.badlogic.gdx.math.Rectangle setX(float):0:0 -> setX
      # {"id":"com.android.tools.r8.residualsignature","signature":"(F)Li/i;"}
    1:1:com.badlogic.gdx.math.Rectangle setY(float):0:0 -> setY
      # {"id":"com.android.tools.r8.residualsignature","signature":"(F)Li/i;"}
    1:1:java.lang.String toString():0:0 -> toString
com.badlogic.gdx.math.Vector2 -> i.j:
    float x -> a
    float y -> b
    com.badlogic.gdx.math.Vector2 X -> c
    com.badlogic.gdx.math.Vector2 Y -> d
    com.badlogic.gdx.math.Vector2 Zero -> e
    1:1:void <clinit>():0:0 -> <clinit>
    void <init>() -> <init>
    1:1:void <init>(float,float):0:0 -> <init>
    1:1:com.badlogic.gdx.math.Vector2 add(float,float):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(FF)Li/j;"}
    1:1:float dst(com.badlogic.gdx.math.Vector2):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/j;)F"}
    1:1:float len():0:0 -> c
    1:1:float len(float,float):0:0 -> d
    1:1:com.badlogic.gdx.math.Vector2 nor():0:0 -> e
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Li/j;"}
    1:1:boolean equals(java.lang.Object):0:0 -> equals
    1:1:com.badlogic.gdx.math.Vector2 scl(float):0:0 -> f
      # {"id":"com.android.tools.r8.residualsignature","signature":"(F)Li/j;"}
    1:1:com.badlogic.gdx.math.Vector2 set(float,float):0:0 -> g
      # {"id":"com.android.tools.r8.residualsignature","signature":"(FF)Li/j;"}
    1:1:com.badlogic.gdx.math.Vector2 set(com.badlogic.gdx.math.Vector2):0:0 -> h
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/j;)Li/j;"}
    1:1:int hashCode():0:0 -> hashCode
    1:1:com.badlogic.gdx.math.Vector2 sub(float,float):0:0 -> i
      # {"id":"com.android.tools.r8.residualsignature","signature":"(FF)Li/j;"}
    1:1:com.badlogic.gdx.math.Vector2 sub(com.badlogic.gdx.math.Vector2):0:0 -> j
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/j;)Li/j;"}
    1:1:java.lang.String toString():0:0 -> toString
com.badlogic.gdx.math.Vector3 -> i.k:
    float x -> a
    float y -> b
    float z -> c
    com.badlogic.gdx.math.Vector3 X -> d
    com.badlogic.gdx.math.Vector3 Y -> e
    com.badlogic.gdx.math.Vector3 Z -> f
    com.badlogic.gdx.math.Vector3 Zero -> g
    com.badlogic.gdx.math.Matrix4 tmpMat -> h
    1:1:void <clinit>():0:0 -> <clinit>
    void <init>() -> <init>
    1:1:void <init>(float,float,float):0:0 -> <init>
    1:1:com.badlogic.gdx.math.Vector3 add(float,float,float):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(FFF)Li/k;"}
    1:1:com.badlogic.gdx.math.Vector3 add(com.badlogic.gdx.math.Vector3):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/k;)Li/k;"}
    1:1:com.badlogic.gdx.math.Vector3 crs(float,float,float):0:0 -> c
      # {"id":"com.android.tools.r8.residualsignature","signature":"(FFF)Li/k;"}
    1:1:com.badlogic.gdx.math.Vector3 crs(com.badlogic.gdx.math.Vector3):0:0 -> d
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/k;)Li/k;"}
    1:1:float dot(com.badlogic.gdx.math.Vector3):0:0 -> e
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/k;)F"}
    1:1:boolean equals(java.lang.Object):0:0 -> equals
    1:1:float len2():0:0 -> f
    1:1:com.badlogic.gdx.math.Vector3 mul(com.badlogic.gdx.math.Matrix4):0:0 -> g
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/math/Matrix4;)Li/k;"}
    1:1:com.badlogic.gdx.math.Vector3 nor():0:0 -> h
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Li/k;"}
    1:1:int hashCode():0:0 -> hashCode
    1:1:com.badlogic.gdx.math.Vector3 prj(com.badlogic.gdx.math.Matrix4):0:0 -> i
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/math/Matrix4;)Li/k;"}
    1:1:com.badlogic.gdx.math.Vector3 scl(float):0:0 -> j
      # {"id":"com.android.tools.r8.residualsignature","signature":"(F)Li/k;"}
    1:1:com.badlogic.gdx.math.Vector3 set(float,float,float):0:0 -> k
      # {"id":"com.android.tools.r8.residualsignature","signature":"(FFF)Li/k;"}
    1:1:com.badlogic.gdx.math.Vector3 set(com.badlogic.gdx.math.Vector3):0:0 -> l
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/k;)Li/k;"}
    1:1:com.badlogic.gdx.math.Vector3 sub(float,float,float):0:0 -> m
      # {"id":"com.android.tools.r8.residualsignature","signature":"(FFF)Li/k;"}
    1:1:com.badlogic.gdx.math.Vector3 sub(com.badlogic.gdx.math.Vector3):0:0 -> n
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/k;)Li/k;"}
    1:1:java.lang.String toString():0:0 -> toString
com.badlogic.gdx.math.collision.Ray -> j.a:
    com.badlogic.gdx.math.Vector3 origin -> a
    com.badlogic.gdx.math.Vector3 direction -> b
    com.badlogic.gdx.math.Vector3 tmp -> c
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>():0:0 -> <init>
    2:2:void <init>(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/k;Li/k;)V"}
    1:1:boolean equals(java.lang.Object):0:0 -> equals
    1:1:int hashCode():0:0 -> hashCode
    1:1:java.lang.String toString():0:0 -> toString
com.badlogic.gdx.net.NetJavaImpl -> k.a:
    java.util.concurrent.ThreadPoolExecutor executorService -> a
    com.badlogic.gdx.utils.ObjectMap connections -> b
    com.badlogic.gdx.utils.ObjectMap listeners -> c
    com.badlogic.gdx.utils.ObjectMap tasks -> d
    1:1:void <init>(int):0:0 -> <init>
com.badlogic.gdx.net.NetJavaImpl$1 -> k.a$a:
    java.util.concurrent.atomic.AtomicInteger threadID -> a
    com.badlogic.gdx.net.NetJavaImpl this$0 -> b
    1:1:void <init>(com.badlogic.gdx.net.NetJavaImpl):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lk/a;)V"}
    1:1:java.lang.Thread newThread(java.lang.Runnable):0:0 -> newThread
com.badlogic.gdx.scenes.scene2d.Action -> com.badlogic.gdx.scenes.scene2d.Action:
    1:1:com.badlogic.gdx.utils.Pool getPool():0:0 -> getPool
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/c0;"}
    1:1:void setPool(com.badlogic.gdx.utils.Pool):0:0 -> setPool
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/c0;)V"}
com.badlogic.gdx.scenes.scene2d.Actor -> com.badlogic.gdx.scenes.scene2d.Actor:
    1:1:boolean clipBegin():0:0 -> clipBegin
    2:2:boolean clipBegin(float,float,float,float):0:0 -> clipBegin
    1:1:void drawDebug(com.badlogic.gdx.graphics.glutils.ShapeRenderer):0:0 -> drawDebug
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lg/n;)V"}
    1:1:void drawDebugBounds(com.badlogic.gdx.graphics.glutils.ShapeRenderer):0:0 -> drawDebugBounds
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lg/n;)V"}
    1:1:com.badlogic.gdx.utils.Array getActions():0:0 -> getActions
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/b;"}
    1:1:com.badlogic.gdx.utils.DelayedRemovalArray getCaptureListeners():0:0 -> getCaptureListeners
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/g;"}
    1:1:com.badlogic.gdx.utils.DelayedRemovalArray getListeners():0:0 -> getListeners
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/g;"}
    1:1:float getX():0:0 -> getX
    2:2:float getX(int):0:0 -> getX
    1:1:float getY():0:0 -> getY
    2:2:float getY(int):0:0 -> getY
    1:1:com.badlogic.gdx.math.Vector2 localToActorCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2):0:0 -> localToActorCoordinates
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/scenes/scene2d/Actor;Li/j;)Li/j;"}
    1:1:com.badlogic.gdx.math.Vector2 localToAscendantCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2):0:0 -> localToAscendantCoordinates
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/scenes/scene2d/Actor;Li/j;)Li/j;"}
    1:1:com.badlogic.gdx.math.Vector2 localToParentCoordinates(com.badlogic.gdx.math.Vector2):0:0 -> localToParentCoordinates
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/j;)Li/j;"}
    1:1:com.badlogic.gdx.math.Vector2 localToScreenCoordinates(com.badlogic.gdx.math.Vector2):0:0 -> localToScreenCoordinates
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/j;)Li/j;"}
    1:1:com.badlogic.gdx.math.Vector2 localToStageCoordinates(com.badlogic.gdx.math.Vector2):0:0 -> localToStageCoordinates
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/j;)Li/j;"}
    1:1:com.badlogic.gdx.math.Vector2 parentToLocalCoordinates(com.badlogic.gdx.math.Vector2):0:0 -> parentToLocalCoordinates
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/j;)Li/j;"}
    1:1:void scaleBy(float):0:0 -> scaleBy
    2:2:void scaleBy(float,float):0:0 -> scaleBy
    1:1:com.badlogic.gdx.math.Vector2 screenToLocalCoordinates(com.badlogic.gdx.math.Vector2):0:0 -> screenToLocalCoordinates
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/j;)Li/j;"}
    1:1:void setColor(float,float,float,float):0:0 -> setColor
    2:2:void setColor(com.badlogic.gdx.graphics.Color):0:0 -> setColor
    1:1:void setOrigin(float,float):0:0 -> setOrigin
    2:2:void setOrigin(int):0:0 -> setOrigin
    1:1:void setPosition(float,float):0:0 -> setPosition
    2:2:void setPosition(float,float,int):0:0 -> setPosition
    1:1:void setScale(float):0:0 -> setScale
    2:2:void setScale(float,float):0:0 -> setScale
    1:1:void setX(float):0:0 -> setX
    2:2:void setX(float,int):0:0 -> setX
    1:1:void setY(float):0:0 -> setY
    2:2:void setY(float,int):0:0 -> setY
    1:1:void sizeBy(float):0:0 -> sizeBy
    2:2:void sizeBy(float,float):0:0 -> sizeBy
    1:1:com.badlogic.gdx.math.Vector2 stageToLocalCoordinates(com.badlogic.gdx.math.Vector2):0:0 -> stageToLocalCoordinates
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/j;)Li/j;"}
com.badlogic.gdx.scenes.scene2d.Group -> com.badlogic.gdx.scenes.scene2d.Group:
    1:1:void applyTransform(com.badlogic.gdx.graphics.g2d.Batch,com.badlogic.gdx.math.Matrix4):0:0 -> applyTransform
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/a;Lcom/badlogic/gdx/math/Matrix4;)V"}
    2:2:void applyTransform(com.badlogic.gdx.graphics.glutils.ShapeRenderer,com.badlogic.gdx.math.Matrix4):0:0 -> applyTransform
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lg/n;Lcom/badlogic/gdx/math/Matrix4;)V"}
    1:1:void clear():0:0 -> clear
    2:2:void clear(boolean):0:0 -> clear
    1:1:void clearChildren():0:0 -> clearChildren
    2:2:void clearChildren(boolean):0:0 -> clearChildren
    1:1:void drawDebug(com.badlogic.gdx.graphics.glutils.ShapeRenderer):0:0 -> drawDebug
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lg/n;)V"}
    1:1:void drawDebugChildren(com.badlogic.gdx.graphics.glutils.ShapeRenderer):0:0 -> drawDebugChildren
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lg/n;)V"}
    1:1:com.badlogic.gdx.utils.SnapshotArray getChildren():0:0 -> getChildren
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/k0;"}
    1:1:com.badlogic.gdx.math.Rectangle getCullingArea():0:0 -> getCullingArea
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Li/i;"}
    1:1:com.badlogic.gdx.math.Vector2 localToDescendantCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2):0:0 -> localToDescendantCoordinates
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/scenes/scene2d/Actor;Li/j;)Li/j;"}
    1:1:boolean removeActor(com.badlogic.gdx.scenes.scene2d.Actor):0:0 -> removeActor
    2:2:boolean removeActor(com.badlogic.gdx.scenes.scene2d.Actor,boolean):0:0 -> removeActor
    1:1:void resetTransform(com.badlogic.gdx.graphics.g2d.Batch):0:0 -> resetTransform
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/a;)V"}
    2:2:void resetTransform(com.badlogic.gdx.graphics.glutils.ShapeRenderer):0:0 -> resetTransform
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lg/n;)V"}
    1:1:void setCullingArea(com.badlogic.gdx.math.Rectangle):0:0 -> setCullingArea
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/i;)V"}
    1:1:boolean swapActor(int,int):0:0 -> swapActor
    2:2:boolean swapActor(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor):0:0 -> swapActor
    1:1:java.lang.String toString():0:0 -> toString
    2:2:void toString(java.lang.StringBuilder,int):0:0 -> toString
com.badlogic.gdx.scenes.scene2d.InputEvent -> com.badlogic.gdx.scenes.scene2d.InputEvent:
    1:1:com.badlogic.gdx.math.Vector2 toCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2):0:0 -> toCoordinates
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/scenes/scene2d/Actor;Li/j;)Li/j;"}
com.badlogic.gdx.scenes.scene2d.InputListener$1 -> com.badlogic.gdx.scenes.scene2d.InputListener$a:
    int[] $SwitchMap$com$badlogic$gdx$scenes$scene2d$InputEvent$Type -> a
com.badlogic.gdx.scenes.scene2d.Stage -> com.badlogic.gdx.scenes.scene2d.Stage:
    1:1:void <init>():0:0 -> <init>
    2:2:void <init>(com.badlogic.gdx.utils.viewport.Viewport):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ln/b;)V"}
    3:3:void <init>(com.badlogic.gdx.utils.viewport.Viewport,com.badlogic.gdx.graphics.g2d.Batch):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ln/b;Lcom/badlogic/gdx/graphics/g2d/a;)V"}
    1:1:void act():0:0 -> act
    2:2:void act(float):0:0 -> act
    1:1:void calculateScissors(com.badlogic.gdx.math.Rectangle,com.badlogic.gdx.math.Rectangle):0:0 -> calculateScissors
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/i;Li/i;)V"}
    1:1:void cancelTouchFocus():0:0 -> cancelTouchFocus
    2:2:void cancelTouchFocus(com.badlogic.gdx.scenes.scene2d.Actor):0:0 -> cancelTouchFocus
    1:1:com.badlogic.gdx.utils.Array getActors():0:0 -> getActors
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/b;"}
    1:1:com.badlogic.gdx.graphics.Camera getCamera():0:0 -> getCamera
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lf/a;"}
    1:1:com.badlogic.gdx.utils.viewport.Viewport getViewport():0:0 -> getViewport
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ln/b;"}
    1:1:com.badlogic.gdx.math.Vector2 screenToStageCoordinates(com.badlogic.gdx.math.Vector2):0:0 -> screenToStageCoordinates
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/j;)Li/j;"}
    1:1:void setDebugTableUnderMouse(com.badlogic.gdx.scenes.scene2d.ui.Table$Debug):0:0 -> setDebugTableUnderMouse
    2:2:void setDebugTableUnderMouse(boolean):0:0 -> setDebugTableUnderMouse
    1:1:void setViewport(com.badlogic.gdx.utils.viewport.Viewport):0:0 -> setViewport
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ln/b;)V"}
    1:1:com.badlogic.gdx.math.Vector2 stageToScreenCoordinates(com.badlogic.gdx.math.Vector2):0:0 -> stageToScreenCoordinates
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/j;)Li/j;"}
    1:1:com.badlogic.gdx.math.Vector2 toScreenCoordinates(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Matrix4):0:0 -> toScreenCoordinates
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/j;Lcom/badlogic/gdx/math/Matrix4;)Li/j;"}
com.badlogic.gdx.scenes.scene2d.actions.Actions -> com.badlogic.gdx.scenes.scene2d.actions.Actions:
    1:1:com.badlogic.gdx.scenes.scene2d.actions.AddAction addAction(com.badlogic.gdx.scenes.scene2d.Action):0:0 -> addAction
    2:2:com.badlogic.gdx.scenes.scene2d.actions.AddAction addAction(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Actor):0:0 -> addAction
    1:1:com.badlogic.gdx.scenes.scene2d.actions.AddListenerAction addListener(com.badlogic.gdx.scenes.scene2d.EventListener,boolean):0:0 -> addListener
    2:2:com.badlogic.gdx.scenes.scene2d.actions.AddListenerAction addListener(com.badlogic.gdx.scenes.scene2d.EventListener,boolean,com.badlogic.gdx.scenes.scene2d.Actor):0:0 -> addListener
    1:1:com.badlogic.gdx.scenes.scene2d.actions.AlphaAction alpha(float):0:0 -> alpha
    2:2:com.badlogic.gdx.scenes.scene2d.actions.AlphaAction alpha(float,float):0:0 -> alpha
    3:3:com.badlogic.gdx.scenes.scene2d.actions.AlphaAction alpha(float,float,com.badlogic.gdx.math.Interpolation):0:0 -> alpha
      # {"id":"com.android.tools.r8.residualsignature","signature":"(FFLi/d;)Lcom/badlogic/gdx/scenes/scene2d/actions/AlphaAction;"}
    1:1:com.badlogic.gdx.scenes.scene2d.actions.ColorAction color(com.badlogic.gdx.graphics.Color):0:0 -> color
    2:2:com.badlogic.gdx.scenes.scene2d.actions.ColorAction color(com.badlogic.gdx.graphics.Color,float):0:0 -> color
    3:3:com.badlogic.gdx.scenes.scene2d.actions.ColorAction color(com.badlogic.gdx.graphics.Color,float,com.badlogic.gdx.math.Interpolation):0:0 -> color
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/Color;FLi/d;)Lcom/badlogic/gdx/scenes/scene2d/actions/ColorAction;"}
    1:1:com.badlogic.gdx.scenes.scene2d.actions.DelayAction delay(float):0:0 -> delay
    2:2:com.badlogic.gdx.scenes.scene2d.actions.DelayAction delay(float,com.badlogic.gdx.scenes.scene2d.Action):0:0 -> delay
    1:1:com.badlogic.gdx.scenes.scene2d.actions.AlphaAction fadeIn(float):0:0 -> fadeIn
    2:2:com.badlogic.gdx.scenes.scene2d.actions.AlphaAction fadeIn(float,com.badlogic.gdx.math.Interpolation):0:0 -> fadeIn
      # {"id":"com.android.tools.r8.residualsignature","signature":"(FLi/d;)Lcom/badlogic/gdx/scenes/scene2d/actions/AlphaAction;"}
    1:1:com.badlogic.gdx.scenes.scene2d.actions.AlphaAction fadeOut(float):0:0 -> fadeOut
    2:2:com.badlogic.gdx.scenes.scene2d.actions.AlphaAction fadeOut(float,com.badlogic.gdx.math.Interpolation):0:0 -> fadeOut
      # {"id":"com.android.tools.r8.residualsignature","signature":"(FLi/d;)Lcom/badlogic/gdx/scenes/scene2d/actions/AlphaAction;"}
    1:1:com.badlogic.gdx.scenes.scene2d.actions.MoveByAction moveBy(float,float):0:0 -> moveBy
    2:2:com.badlogic.gdx.scenes.scene2d.actions.MoveByAction moveBy(float,float,float):0:0 -> moveBy
    3:3:com.badlogic.gdx.scenes.scene2d.actions.MoveByAction moveBy(float,float,float,com.badlogic.gdx.math.Interpolation):0:0 -> moveBy
      # {"id":"com.android.tools.r8.residualsignature","signature":"(FFFLi/d;)Lcom/badlogic/gdx/scenes/scene2d/actions/MoveByAction;"}
    1:1:com.badlogic.gdx.scenes.scene2d.actions.MoveToAction moveTo(float,float):0:0 -> moveTo
    2:2:com.badlogic.gdx.scenes.scene2d.actions.MoveToAction moveTo(float,float,float):0:0 -> moveTo
    3:3:com.badlogic.gdx.scenes.scene2d.actions.MoveToAction moveTo(float,float,float,com.badlogic.gdx.math.Interpolation):0:0 -> moveTo
      # {"id":"com.android.tools.r8.residualsignature","signature":"(FFFLi/d;)Lcom/badlogic/gdx/scenes/scene2d/actions/MoveToAction;"}
    1:1:com.badlogic.gdx.scenes.scene2d.actions.MoveToAction moveToAligned(float,float,int):0:0 -> moveToAligned
    2:2:com.badlogic.gdx.scenes.scene2d.actions.MoveToAction moveToAligned(float,float,int,float):0:0 -> moveToAligned
    3:3:com.badlogic.gdx.scenes.scene2d.actions.MoveToAction moveToAligned(float,float,int,float,com.badlogic.gdx.math.Interpolation):0:0 -> moveToAligned
      # {"id":"com.android.tools.r8.residualsignature","signature":"(FFIFLi/d;)Lcom/badlogic/gdx/scenes/scene2d/actions/MoveToAction;"}
    1:1:com.badlogic.gdx.scenes.scene2d.actions.ParallelAction parallel():0:0 -> parallel
    2:2:com.badlogic.gdx.scenes.scene2d.actions.ParallelAction parallel(com.badlogic.gdx.scenes.scene2d.Action):0:0 -> parallel
    3:3:com.badlogic.gdx.scenes.scene2d.actions.ParallelAction parallel(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action):0:0 -> parallel
    4:4:com.badlogic.gdx.scenes.scene2d.actions.ParallelAction parallel(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action):0:0 -> parallel
    5:5:com.badlogic.gdx.scenes.scene2d.actions.ParallelAction parallel(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action):0:0 -> parallel
    6:6:com.badlogic.gdx.scenes.scene2d.actions.ParallelAction parallel(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action):0:0 -> parallel
    7:7:com.badlogic.gdx.scenes.scene2d.actions.ParallelAction parallel(com.badlogic.gdx.scenes.scene2d.Action[]):0:0 -> parallel
    1:1:com.badlogic.gdx.scenes.scene2d.actions.RemoveAction removeAction(com.badlogic.gdx.scenes.scene2d.Action):0:0 -> removeAction
    2:2:com.badlogic.gdx.scenes.scene2d.actions.RemoveAction removeAction(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Actor):0:0 -> removeAction
    1:1:com.badlogic.gdx.scenes.scene2d.actions.RemoveActorAction removeActor():0:0 -> removeActor
    2:2:com.badlogic.gdx.scenes.scene2d.actions.RemoveActorAction removeActor(com.badlogic.gdx.scenes.scene2d.Actor):0:0 -> removeActor
    1:1:com.badlogic.gdx.scenes.scene2d.actions.RemoveListenerAction removeListener(com.badlogic.gdx.scenes.scene2d.EventListener,boolean):0:0 -> removeListener
    2:2:com.badlogic.gdx.scenes.scene2d.actions.RemoveListenerAction removeListener(com.badlogic.gdx.scenes.scene2d.EventListener,boolean,com.badlogic.gdx.scenes.scene2d.Actor):0:0 -> removeListener
    1:1:com.badlogic.gdx.scenes.scene2d.actions.RotateByAction rotateBy(float):0:0 -> rotateBy
    2:2:com.badlogic.gdx.scenes.scene2d.actions.RotateByAction rotateBy(float,float):0:0 -> rotateBy
    3:3:com.badlogic.gdx.scenes.scene2d.actions.RotateByAction rotateBy(float,float,com.badlogic.gdx.math.Interpolation):0:0 -> rotateBy
      # {"id":"com.android.tools.r8.residualsignature","signature":"(FFLi/d;)Lcom/badlogic/gdx/scenes/scene2d/actions/RotateByAction;"}
    1:1:com.badlogic.gdx.scenes.scene2d.actions.RotateToAction rotateTo(float):0:0 -> rotateTo
    2:2:com.badlogic.gdx.scenes.scene2d.actions.RotateToAction rotateTo(float,float):0:0 -> rotateTo
    3:3:com.badlogic.gdx.scenes.scene2d.actions.RotateToAction rotateTo(float,float,com.badlogic.gdx.math.Interpolation):0:0 -> rotateTo
      # {"id":"com.android.tools.r8.residualsignature","signature":"(FFLi/d;)Lcom/badlogic/gdx/scenes/scene2d/actions/RotateToAction;"}
    1:1:com.badlogic.gdx.scenes.scene2d.actions.ScaleByAction scaleBy(float,float):0:0 -> scaleBy
    2:2:com.badlogic.gdx.scenes.scene2d.actions.ScaleByAction scaleBy(float,float,float):0:0 -> scaleBy
    3:3:com.badlogic.gdx.scenes.scene2d.actions.ScaleByAction scaleBy(float,float,float,com.badlogic.gdx.math.Interpolation):0:0 -> scaleBy
      # {"id":"com.android.tools.r8.residualsignature","signature":"(FFFLi/d;)Lcom/badlogic/gdx/scenes/scene2d/actions/ScaleByAction;"}
    1:1:com.badlogic.gdx.scenes.scene2d.actions.ScaleToAction scaleTo(float,float):0:0 -> scaleTo
    2:2:com.badlogic.gdx.scenes.scene2d.actions.ScaleToAction scaleTo(float,float,float):0:0 -> scaleTo
    3:3:com.badlogic.gdx.scenes.scene2d.actions.ScaleToAction scaleTo(float,float,float,com.badlogic.gdx.math.Interpolation):0:0 -> scaleTo
      # {"id":"com.android.tools.r8.residualsignature","signature":"(FFFLi/d;)Lcom/badlogic/gdx/scenes/scene2d/actions/ScaleToAction;"}
    1:1:com.badlogic.gdx.scenes.scene2d.actions.SequenceAction sequence():0:0 -> sequence
    2:2:com.badlogic.gdx.scenes.scene2d.actions.SequenceAction sequence(com.badlogic.gdx.scenes.scene2d.Action):0:0 -> sequence
    3:3:com.badlogic.gdx.scenes.scene2d.actions.SequenceAction sequence(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action):0:0 -> sequence
    4:4:com.badlogic.gdx.scenes.scene2d.actions.SequenceAction sequence(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action):0:0 -> sequence
    5:5:com.badlogic.gdx.scenes.scene2d.actions.SequenceAction sequence(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action):0:0 -> sequence
    6:6:com.badlogic.gdx.scenes.scene2d.actions.SequenceAction sequence(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action):0:0 -> sequence
    7:7:com.badlogic.gdx.scenes.scene2d.actions.SequenceAction sequence(com.badlogic.gdx.scenes.scene2d.Action[]):0:0 -> sequence
    1:1:com.badlogic.gdx.scenes.scene2d.actions.SizeByAction sizeBy(float,float):0:0 -> sizeBy
    2:2:com.badlogic.gdx.scenes.scene2d.actions.SizeByAction sizeBy(float,float,float):0:0 -> sizeBy
    3:3:com.badlogic.gdx.scenes.scene2d.actions.SizeByAction sizeBy(float,float,float,com.badlogic.gdx.math.Interpolation):0:0 -> sizeBy
      # {"id":"com.android.tools.r8.residualsignature","signature":"(FFFLi/d;)Lcom/badlogic/gdx/scenes/scene2d/actions/SizeByAction;"}
    1:1:com.badlogic.gdx.scenes.scene2d.actions.SizeToAction sizeTo(float,float):0:0 -> sizeTo
    2:2:com.badlogic.gdx.scenes.scene2d.actions.SizeToAction sizeTo(float,float,float):0:0 -> sizeTo
    3:3:com.badlogic.gdx.scenes.scene2d.actions.SizeToAction sizeTo(float,float,float,com.badlogic.gdx.math.Interpolation):0:0 -> sizeTo
      # {"id":"com.android.tools.r8.residualsignature","signature":"(FFFLi/d;)Lcom/badlogic/gdx/scenes/scene2d/actions/SizeToAction;"}
com.badlogic.gdx.scenes.scene2d.actions.DelayAction -> com.badlogic.gdx.scenes.scene2d.actions.DelayAction:
    1:1:void <init>(float):0:0 -> <init>
com.badlogic.gdx.scenes.scene2d.actions.EventAction$1 -> com.badlogic.gdx.scenes.scene2d.actions.EventAction$a:
    com.badlogic.gdx.scenes.scene2d.actions.EventAction this$0 -> a
com.badlogic.gdx.scenes.scene2d.actions.FloatAction -> com.badlogic.gdx.scenes.scene2d.actions.FloatAction:
    1:1:void <init>():0:0 -> <init>
    2:2:void <init>(float,float):0:0 -> <init>
    3:3:void <init>(float,float,float):0:0 -> <init>
    4:4:void <init>(float,float,float,com.badlogic.gdx.math.Interpolation):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(FFFLi/d;)V"}
com.badlogic.gdx.scenes.scene2d.actions.IntAction -> com.badlogic.gdx.scenes.scene2d.actions.IntAction:
    1:1:void <init>():0:0 -> <init>
    2:2:void <init>(int,int):0:0 -> <init>
    3:3:void <init>(int,int,float):0:0 -> <init>
    4:4:void <init>(int,int,float,com.badlogic.gdx.math.Interpolation):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(IIFLi/d;)V"}
com.badlogic.gdx.scenes.scene2d.actions.MoveToAction -> com.badlogic.gdx.scenes.scene2d.actions.MoveToAction:
    1:1:void setPosition(float,float):0:0 -> setPosition
    2:2:void setPosition(float,float,int):0:0 -> setPosition
com.badlogic.gdx.scenes.scene2d.actions.ParallelAction -> com.badlogic.gdx.scenes.scene2d.actions.ParallelAction:
    1:1:void <init>():0:0 -> <init>
    2:2:void <init>(com.badlogic.gdx.scenes.scene2d.Action):0:0 -> <init>
    3:3:void <init>(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action):0:0 -> <init>
    4:4:void <init>(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action):0:0 -> <init>
    5:5:void <init>(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action):0:0 -> <init>
    6:6:void <init>(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action):0:0 -> <init>
    1:1:com.badlogic.gdx.utils.Array getActions():0:0 -> getActions
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/b;"}
com.badlogic.gdx.scenes.scene2d.actions.RotateToAction -> com.badlogic.gdx.scenes.scene2d.actions.RotateToAction:
    1:1:void <init>():0:0 -> <init>
    2:2:void <init>(boolean):0:0 -> <init>
com.badlogic.gdx.scenes.scene2d.actions.ScaleByAction -> com.badlogic.gdx.scenes.scene2d.actions.ScaleByAction:
    1:1:void setAmount(float):0:0 -> setAmount
    2:2:void setAmount(float,float):0:0 -> setAmount
com.badlogic.gdx.scenes.scene2d.actions.ScaleToAction -> com.badlogic.gdx.scenes.scene2d.actions.ScaleToAction:
    1:1:void setScale(float):0:0 -> setScale
    2:2:void setScale(float,float):0:0 -> setScale
com.badlogic.gdx.scenes.scene2d.actions.SequenceAction -> com.badlogic.gdx.scenes.scene2d.actions.SequenceAction:
    1:1:void <init>(com.badlogic.gdx.scenes.scene2d.Action):0:0 -> <init>
    2:2:void <init>(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action):0:0 -> <init>
    3:3:void <init>(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action):0:0 -> <init>
    4:4:void <init>(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action):0:0 -> <init>
    5:5:void <init>(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action):0:0 -> <init>
com.badlogic.gdx.scenes.scene2d.actions.TemporalAction -> com.badlogic.gdx.scenes.scene2d.actions.TemporalAction:
    1:1:void <init>(float):0:0 -> <init>
    2:2:void <init>(float,com.badlogic.gdx.math.Interpolation):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(FLi/d;)V"}
    1:1:com.badlogic.gdx.math.Interpolation getInterpolation():0:0 -> getInterpolation
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Li/d;"}
    1:1:void setInterpolation(com.badlogic.gdx.math.Interpolation):0:0 -> setInterpolation
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/d;)V"}
com.badlogic.gdx.scenes.scene2d.ui.Button -> com.badlogic.gdx.scenes.scene2d.ui.Button:
    1:1:void <init>():0:0 -> <init>
    2:2:void <init>(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle):0:0 -> <init>
    3:3:void <init>(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.ui.Skin):0:0 -> <init>
    4:4:void <init>(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String):0:0 -> <init>
    5:5:void <init>(com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle):0:0 -> <init>
    6:6:void <init>(com.badlogic.gdx.scenes.scene2d.ui.Skin):0:0 -> <init>
    7:7:void <init>(com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String):0:0 -> <init>
    8:8:void <init>(com.badlogic.gdx.scenes.scene2d.utils.Drawable):0:0 -> <init>
    9:9:void <init>(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable):0:0 -> <init>
    10:10:void <init>(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable):0:0 -> <init>
    1:1:void setChecked(boolean):0:0 -> setChecked
    2:2:void setChecked(boolean,boolean):0:0 -> setChecked
com.badlogic.gdx.scenes.scene2d.ui.Button$1 -> com.badlogic.gdx.scenes.scene2d.ui.Button$a:
    com.badlogic.gdx.scenes.scene2d.ui.Button this$0 -> a
com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle -> com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle:
    1:1:void <init>(com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle):0:0 -> <init>
    2:2:void <init>(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable):0:0 -> <init>
com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup -> com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup:
    1:1:void <init>():0:0 -> <init>
    2:2:void <init>(com.badlogic.gdx.scenes.scene2d.ui.Button[]):0:0 -> <init>
    1:1:void add(com.badlogic.gdx.scenes.scene2d.ui.Button):0:0 -> add
    2:2:void add(com.badlogic.gdx.scenes.scene2d.ui.Button[]):0:0 -> add
    1:1:com.badlogic.gdx.utils.Array getAllChecked():0:0 -> getAllChecked
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/b;"}
    1:1:com.badlogic.gdx.utils.Array getButtons():0:0 -> getButtons
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/b;"}
    1:1:void remove(com.badlogic.gdx.scenes.scene2d.ui.Button):0:0 -> remove
    2:2:void remove(com.badlogic.gdx.scenes.scene2d.ui.Button[]):0:0 -> remove
com.badlogic.gdx.scenes.scene2d.ui.Cell -> com.badlogic.gdx.scenes.scene2d.ui.Cell:
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Cell expand():0:0 -> expand
    2:2:com.badlogic.gdx.scenes.scene2d.ui.Cell expand(int,int):0:0 -> expand
    3:3:com.badlogic.gdx.scenes.scene2d.ui.Cell expand(boolean,boolean):0:0 -> expand
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Cell fill():0:0 -> fill
    2:2:com.badlogic.gdx.scenes.scene2d.ui.Cell fill(float,float):0:0 -> fill
    3:3:com.badlogic.gdx.scenes.scene2d.ui.Cell fill(boolean):0:0 -> fill
    4:4:com.badlogic.gdx.scenes.scene2d.ui.Cell fill(boolean,boolean):0:0 -> fill
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Cell height(float):0:0 -> height
    2:2:com.badlogic.gdx.scenes.scene2d.ui.Cell height(com.badlogic.gdx.scenes.scene2d.ui.Value):0:0 -> height
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Cell maxHeight(float):0:0 -> maxHeight
    2:2:com.badlogic.gdx.scenes.scene2d.ui.Cell maxHeight(com.badlogic.gdx.scenes.scene2d.ui.Value):0:0 -> maxHeight
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Cell maxSize(float):0:0 -> maxSize
    2:2:com.badlogic.gdx.scenes.scene2d.ui.Cell maxSize(float,float):0:0 -> maxSize
    3:3:com.badlogic.gdx.scenes.scene2d.ui.Cell maxSize(com.badlogic.gdx.scenes.scene2d.ui.Value):0:0 -> maxSize
    4:4:com.badlogic.gdx.scenes.scene2d.ui.Cell maxSize(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value):0:0 -> maxSize
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Cell maxWidth(float):0:0 -> maxWidth
    2:2:com.badlogic.gdx.scenes.scene2d.ui.Cell maxWidth(com.badlogic.gdx.scenes.scene2d.ui.Value):0:0 -> maxWidth
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Cell minHeight(float):0:0 -> minHeight
    2:2:com.badlogic.gdx.scenes.scene2d.ui.Cell minHeight(com.badlogic.gdx.scenes.scene2d.ui.Value):0:0 -> minHeight
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Cell minSize(float):0:0 -> minSize
    2:2:com.badlogic.gdx.scenes.scene2d.ui.Cell minSize(float,float):0:0 -> minSize
    3:3:com.badlogic.gdx.scenes.scene2d.ui.Cell minSize(com.badlogic.gdx.scenes.scene2d.ui.Value):0:0 -> minSize
    4:4:com.badlogic.gdx.scenes.scene2d.ui.Cell minSize(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value):0:0 -> minSize
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Cell minWidth(float):0:0 -> minWidth
    2:2:com.badlogic.gdx.scenes.scene2d.ui.Cell minWidth(com.badlogic.gdx.scenes.scene2d.ui.Value):0:0 -> minWidth
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Cell pad(float):0:0 -> pad
    2:2:com.badlogic.gdx.scenes.scene2d.ui.Cell pad(float,float,float,float):0:0 -> pad
    3:3:com.badlogic.gdx.scenes.scene2d.ui.Cell pad(com.badlogic.gdx.scenes.scene2d.ui.Value):0:0 -> pad
    4:4:com.badlogic.gdx.scenes.scene2d.ui.Cell pad(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value):0:0 -> pad
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Cell padBottom(float):0:0 -> padBottom
    2:2:com.badlogic.gdx.scenes.scene2d.ui.Cell padBottom(com.badlogic.gdx.scenes.scene2d.ui.Value):0:0 -> padBottom
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Cell padLeft(float):0:0 -> padLeft
    2:2:com.badlogic.gdx.scenes.scene2d.ui.Cell padLeft(com.badlogic.gdx.scenes.scene2d.ui.Value):0:0 -> padLeft
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Cell padRight(float):0:0 -> padRight
    2:2:com.badlogic.gdx.scenes.scene2d.ui.Cell padRight(com.badlogic.gdx.scenes.scene2d.ui.Value):0:0 -> padRight
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Cell padTop(float):0:0 -> padTop
    2:2:com.badlogic.gdx.scenes.scene2d.ui.Cell padTop(com.badlogic.gdx.scenes.scene2d.ui.Value):0:0 -> padTop
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Cell prefHeight(float):0:0 -> prefHeight
    2:2:com.badlogic.gdx.scenes.scene2d.ui.Cell prefHeight(com.badlogic.gdx.scenes.scene2d.ui.Value):0:0 -> prefHeight
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Cell prefSize(float):0:0 -> prefSize
    2:2:com.badlogic.gdx.scenes.scene2d.ui.Cell prefSize(float,float):0:0 -> prefSize
    3:3:com.badlogic.gdx.scenes.scene2d.ui.Cell prefSize(com.badlogic.gdx.scenes.scene2d.ui.Value):0:0 -> prefSize
    4:4:com.badlogic.gdx.scenes.scene2d.ui.Cell prefSize(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value):0:0 -> prefSize
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Cell prefWidth(float):0:0 -> prefWidth
    2:2:com.badlogic.gdx.scenes.scene2d.ui.Cell prefWidth(com.badlogic.gdx.scenes.scene2d.ui.Value):0:0 -> prefWidth
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Cell size(float):0:0 -> size
    2:2:com.badlogic.gdx.scenes.scene2d.ui.Cell size(float,float):0:0 -> size
    3:3:com.badlogic.gdx.scenes.scene2d.ui.Cell size(com.badlogic.gdx.scenes.scene2d.ui.Value):0:0 -> size
    4:4:com.badlogic.gdx.scenes.scene2d.ui.Cell size(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value):0:0 -> size
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Cell space(float):0:0 -> space
    2:2:com.badlogic.gdx.scenes.scene2d.ui.Cell space(float,float,float,float):0:0 -> space
    3:3:com.badlogic.gdx.scenes.scene2d.ui.Cell space(com.badlogic.gdx.scenes.scene2d.ui.Value):0:0 -> space
    4:4:com.badlogic.gdx.scenes.scene2d.ui.Cell space(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value):0:0 -> space
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Cell spaceBottom(float):0:0 -> spaceBottom
    2:2:com.badlogic.gdx.scenes.scene2d.ui.Cell spaceBottom(com.badlogic.gdx.scenes.scene2d.ui.Value):0:0 -> spaceBottom
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Cell spaceLeft(float):0:0 -> spaceLeft
    2:2:com.badlogic.gdx.scenes.scene2d.ui.Cell spaceLeft(com.badlogic.gdx.scenes.scene2d.ui.Value):0:0 -> spaceLeft
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Cell spaceRight(float):0:0 -> spaceRight
    2:2:com.badlogic.gdx.scenes.scene2d.ui.Cell spaceRight(com.badlogic.gdx.scenes.scene2d.ui.Value):0:0 -> spaceRight
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Cell spaceTop(float):0:0 -> spaceTop
    2:2:com.badlogic.gdx.scenes.scene2d.ui.Cell spaceTop(com.badlogic.gdx.scenes.scene2d.ui.Value):0:0 -> spaceTop
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Cell uniform():0:0 -> uniform
    2:2:com.badlogic.gdx.scenes.scene2d.ui.Cell uniform(boolean):0:0 -> uniform
    3:3:com.badlogic.gdx.scenes.scene2d.ui.Cell uniform(boolean,boolean):0:0 -> uniform
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Cell width(float):0:0 -> width
    2:2:com.badlogic.gdx.scenes.scene2d.ui.Cell width(com.badlogic.gdx.scenes.scene2d.ui.Value):0:0 -> width
com.badlogic.gdx.scenes.scene2d.ui.CheckBox -> com.badlogic.gdx.scenes.scene2d.ui.CheckBox:
    1:1:void <init>(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.CheckBox$CheckBoxStyle):0:0 -> <init>
    2:2:void <init>(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin):0:0 -> <init>
    3:3:void <init>(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String):0:0 -> <init>
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle getStyle():0:0 -> getStyle
    2:2:com.badlogic.gdx.scenes.scene2d.ui.CheckBox$CheckBoxStyle getStyle():0:0 -> getStyle
    3:3:com.badlogic.gdx.scenes.scene2d.ui.TextButton$TextButtonStyle getStyle():0:0 -> getStyle
com.badlogic.gdx.scenes.scene2d.ui.CheckBox$CheckBoxStyle -> com.badlogic.gdx.scenes.scene2d.ui.CheckBox$CheckBoxStyle:
    1:1:void <init>(com.badlogic.gdx.scenes.scene2d.ui.CheckBox$CheckBoxStyle):0:0 -> <init>
    2:2:void <init>(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.graphics.g2d.BitmapFont,com.badlogic.gdx.graphics.Color):0:0 -> <init>
com.badlogic.gdx.scenes.scene2d.ui.Container -> com.badlogic.gdx.scenes.scene2d.ui.Container:
    1:1:void <init>():0:0 -> <init>
    2:2:void <init>(com.badlogic.gdx.scenes.scene2d.Actor):0:0 -> <init>
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Container clip():0:0 -> clip
    2:2:com.badlogic.gdx.scenes.scene2d.ui.Container clip(boolean):0:0 -> clip
    1:1:void drawDebug(com.badlogic.gdx.graphics.glutils.ShapeRenderer):0:0 -> drawDebug
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lg/n;)V"}
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Container fill():0:0 -> fill
    2:2:com.badlogic.gdx.scenes.scene2d.ui.Container fill(float,float):0:0 -> fill
    3:3:com.badlogic.gdx.scenes.scene2d.ui.Container fill(boolean):0:0 -> fill
    4:4:com.badlogic.gdx.scenes.scene2d.ui.Container fill(boolean,boolean):0:0 -> fill
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Container height(float):0:0 -> height
    2:2:com.badlogic.gdx.scenes.scene2d.ui.Container height(com.badlogic.gdx.scenes.scene2d.ui.Value):0:0 -> height
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Container maxHeight(float):0:0 -> maxHeight
    2:2:com.badlogic.gdx.scenes.scene2d.ui.Container maxHeight(com.badlogic.gdx.scenes.scene2d.ui.Value):0:0 -> maxHeight
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Container maxSize(float):0:0 -> maxSize
    2:2:com.badlogic.gdx.scenes.scene2d.ui.Container maxSize(float,float):0:0 -> maxSize
    3:3:com.badlogic.gdx.scenes.scene2d.ui.Container maxSize(com.badlogic.gdx.scenes.scene2d.ui.Value):0:0 -> maxSize
    4:4:com.badlogic.gdx.scenes.scene2d.ui.Container maxSize(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value):0:0 -> maxSize
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Container maxWidth(float):0:0 -> maxWidth
    2:2:com.badlogic.gdx.scenes.scene2d.ui.Container maxWidth(com.badlogic.gdx.scenes.scene2d.ui.Value):0:0 -> maxWidth
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Container minHeight(float):0:0 -> minHeight
    2:2:com.badlogic.gdx.scenes.scene2d.ui.Container minHeight(com.badlogic.gdx.scenes.scene2d.ui.Value):0:0 -> minHeight
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Container minSize(float):0:0 -> minSize
    2:2:com.badlogic.gdx.scenes.scene2d.ui.Container minSize(float,float):0:0 -> minSize
    3:3:com.badlogic.gdx.scenes.scene2d.ui.Container minSize(com.badlogic.gdx.scenes.scene2d.ui.Value):0:0 -> minSize
    4:4:com.badlogic.gdx.scenes.scene2d.ui.Container minSize(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value):0:0 -> minSize
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Container minWidth(float):0:0 -> minWidth
    2:2:com.badlogic.gdx.scenes.scene2d.ui.Container minWidth(com.badlogic.gdx.scenes.scene2d.ui.Value):0:0 -> minWidth
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Container pad(float):0:0 -> pad
    2:2:com.badlogic.gdx.scenes.scene2d.ui.Container pad(float,float,float,float):0:0 -> pad
    3:3:com.badlogic.gdx.scenes.scene2d.ui.Container pad(com.badlogic.gdx.scenes.scene2d.ui.Value):0:0 -> pad
    4:4:com.badlogic.gdx.scenes.scene2d.ui.Container pad(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value):0:0 -> pad
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Container padBottom(float):0:0 -> padBottom
    2:2:com.badlogic.gdx.scenes.scene2d.ui.Container padBottom(com.badlogic.gdx.scenes.scene2d.ui.Value):0:0 -> padBottom
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Container padLeft(float):0:0 -> padLeft
    2:2:com.badlogic.gdx.scenes.scene2d.ui.Container padLeft(com.badlogic.gdx.scenes.scene2d.ui.Value):0:0 -> padLeft
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Container padRight(float):0:0 -> padRight
    2:2:com.badlogic.gdx.scenes.scene2d.ui.Container padRight(com.badlogic.gdx.scenes.scene2d.ui.Value):0:0 -> padRight
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Container padTop(float):0:0 -> padTop
    2:2:com.badlogic.gdx.scenes.scene2d.ui.Container padTop(com.badlogic.gdx.scenes.scene2d.ui.Value):0:0 -> padTop
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Container prefHeight(float):0:0 -> prefHeight
    2:2:com.badlogic.gdx.scenes.scene2d.ui.Container prefHeight(com.badlogic.gdx.scenes.scene2d.ui.Value):0:0 -> prefHeight
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Container prefSize(float):0:0 -> prefSize
    2:2:com.badlogic.gdx.scenes.scene2d.ui.Container prefSize(float,float):0:0 -> prefSize
    3:3:com.badlogic.gdx.scenes.scene2d.ui.Container prefSize(com.badlogic.gdx.scenes.scene2d.ui.Value):0:0 -> prefSize
    4:4:com.badlogic.gdx.scenes.scene2d.ui.Container prefSize(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value):0:0 -> prefSize
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Container prefWidth(float):0:0 -> prefWidth
    2:2:com.badlogic.gdx.scenes.scene2d.ui.Container prefWidth(com.badlogic.gdx.scenes.scene2d.ui.Value):0:0 -> prefWidth
    1:1:boolean removeActor(com.badlogic.gdx.scenes.scene2d.Actor):0:0 -> removeActor
    2:2:boolean removeActor(com.badlogic.gdx.scenes.scene2d.Actor,boolean):0:0 -> removeActor
    1:1:void setBackground(com.badlogic.gdx.scenes.scene2d.utils.Drawable):0:0 -> setBackground
    2:2:void setBackground(com.badlogic.gdx.scenes.scene2d.utils.Drawable,boolean):0:0 -> setBackground
    1:1:void setCullingArea(com.badlogic.gdx.math.Rectangle):0:0 -> setCullingArea
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/i;)V"}
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Container size(float):0:0 -> size
    2:2:com.badlogic.gdx.scenes.scene2d.ui.Container size(float,float):0:0 -> size
    3:3:com.badlogic.gdx.scenes.scene2d.ui.Container size(com.badlogic.gdx.scenes.scene2d.ui.Value):0:0 -> size
    4:4:com.badlogic.gdx.scenes.scene2d.ui.Container size(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value):0:0 -> size
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Container width(float):0:0 -> width
    2:2:com.badlogic.gdx.scenes.scene2d.ui.Container width(com.badlogic.gdx.scenes.scene2d.ui.Value):0:0 -> width
com.badlogic.gdx.scenes.scene2d.ui.Dialog -> com.badlogic.gdx.scenes.scene2d.ui.Dialog:
    1:1:void <init>(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin):0:0 -> <init>
    2:2:void <init>(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String):0:0 -> <init>
    3:3:void <init>(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Window$WindowStyle):0:0 -> <init>
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Dialog button(com.badlogic.gdx.scenes.scene2d.ui.Button):0:0 -> button
    2:2:com.badlogic.gdx.scenes.scene2d.ui.Dialog button(com.badlogic.gdx.scenes.scene2d.ui.Button,java.lang.Object):0:0 -> button
    3:3:com.badlogic.gdx.scenes.scene2d.ui.Dialog button(java.lang.String):0:0 -> button
    4:4:com.badlogic.gdx.scenes.scene2d.ui.Dialog button(java.lang.String,java.lang.Object):0:0 -> button
    5:5:com.badlogic.gdx.scenes.scene2d.ui.Dialog button(java.lang.String,java.lang.Object,com.badlogic.gdx.scenes.scene2d.ui.TextButton$TextButtonStyle):0:0 -> button
    1:1:void hide():0:0 -> hide
    2:2:void hide(com.badlogic.gdx.scenes.scene2d.Action):0:0 -> hide
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Dialog show(com.badlogic.gdx.scenes.scene2d.Stage):0:0 -> show
    2:2:com.badlogic.gdx.scenes.scene2d.ui.Dialog show(com.badlogic.gdx.scenes.scene2d.Stage,com.badlogic.gdx.scenes.scene2d.Action):0:0 -> show
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Dialog text(com.badlogic.gdx.scenes.scene2d.ui.Label):0:0 -> text
    2:2:com.badlogic.gdx.scenes.scene2d.ui.Dialog text(java.lang.String):0:0 -> text
    3:3:com.badlogic.gdx.scenes.scene2d.ui.Dialog text(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Label$LabelStyle):0:0 -> text
com.badlogic.gdx.scenes.scene2d.ui.Dialog$1 -> com.badlogic.gdx.scenes.scene2d.ui.Dialog$a:
    com.badlogic.gdx.scenes.scene2d.ui.Dialog this$0 -> a
com.badlogic.gdx.scenes.scene2d.ui.Dialog$2 -> com.badlogic.gdx.scenes.scene2d.ui.Dialog$b:
    com.badlogic.gdx.scenes.scene2d.ui.Dialog this$0 -> a
com.badlogic.gdx.scenes.scene2d.ui.Dialog$3 -> com.badlogic.gdx.scenes.scene2d.ui.Dialog$c:
    com.badlogic.gdx.scenes.scene2d.ui.Dialog this$0 -> a
    1:1:void focusChanged(com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent):0:0 -> a
com.badlogic.gdx.scenes.scene2d.ui.Dialog$4 -> com.badlogic.gdx.scenes.scene2d.ui.Dialog$d:
    int val$keycode -> a
    java.lang.Object val$object -> b
    com.badlogic.gdx.scenes.scene2d.ui.Dialog this$0 -> c
com.badlogic.gdx.scenes.scene2d.ui.Dialog$4$1 -> com.badlogic.gdx.scenes.scene2d.ui.Dialog$d$a:
    com.badlogic.gdx.scenes.scene2d.ui.Dialog$4 this$1 -> a
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup -> com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup:
    1:1:void drawDebugBounds(com.badlogic.gdx.graphics.glutils.ShapeRenderer):0:0 -> drawDebugBounds
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lg/n;)V"}
    1:1:com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup expand():0:0 -> expand
    2:2:com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup expand(boolean):0:0 -> expand
    1:1:com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup fill():0:0 -> fill
    2:2:com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup fill(float):0:0 -> fill
    1:1:com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup pad(float):0:0 -> pad
    2:2:com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup pad(float,float,float,float):0:0 -> pad
    1:1:com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup reverse():0:0 -> reverse
    2:2:com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup reverse(boolean):0:0 -> reverse
    1:1:com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup wrap():0:0 -> wrap
    2:2:com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup wrap(boolean):0:0 -> wrap
    1:1:com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup wrapReverse():0:0 -> wrapReverse
    2:2:com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup wrapReverse(boolean):0:0 -> wrapReverse
com.badlogic.gdx.scenes.scene2d.ui.Image -> com.badlogic.gdx.scenes.scene2d.ui.Image:
    1:1:void <init>():0:0 -> <init>
    2:2:void <init>(com.badlogic.gdx.graphics.g2d.NinePatch):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/d;)V"}
    3:3:void <init>(com.badlogic.gdx.graphics.g2d.TextureRegion):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/j;)V"}
    4:4:void <init>(com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String):0:0 -> <init>
    5:5:void <init>(com.badlogic.gdx.scenes.scene2d.utils.Drawable):0:0 -> <init>
    6:6:void <init>(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.utils.Scaling):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/scenes/scene2d/utils/Drawable;Ll/g0;)V"}
    7:7:void <init>(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.utils.Scaling,int):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/scenes/scene2d/utils/Drawable;Ll/g0;I)V"}
    8:8:void <init>(com.badlogic.gdx.graphics.Texture):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lf/l;)V"}
    1:1:void setDrawable(com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String):0:0 -> setDrawable
    2:2:void setDrawable(com.badlogic.gdx.scenes.scene2d.utils.Drawable):0:0 -> setDrawable
    1:1:void setScaling(com.badlogic.gdx.utils.Scaling):0:0 -> setScaling
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/g0;)V"}
com.badlogic.gdx.scenes.scene2d.ui.ImageButton -> com.badlogic.gdx.scenes.scene2d.ui.ImageButton:
    1:1:void <init>(com.badlogic.gdx.scenes.scene2d.ui.ImageButton$ImageButtonStyle):0:0 -> <init>
    2:2:void <init>(com.badlogic.gdx.scenes.scene2d.ui.Skin):0:0 -> <init>
    3:3:void <init>(com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String):0:0 -> <init>
    4:4:void <init>(com.badlogic.gdx.scenes.scene2d.utils.Drawable):0:0 -> <init>
    5:5:void <init>(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable):0:0 -> <init>
    6:6:void <init>(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable):0:0 -> <init>
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle getStyle():0:0 -> getStyle
    2:2:com.badlogic.gdx.scenes.scene2d.ui.ImageButton$ImageButtonStyle getStyle():0:0 -> getStyle
com.badlogic.gdx.scenes.scene2d.ui.ImageButton$ImageButtonStyle -> com.badlogic.gdx.scenes.scene2d.ui.ImageButton$ImageButtonStyle:
    1:1:void <init>(com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle):0:0 -> <init>
    2:2:void <init>(com.badlogic.gdx.scenes.scene2d.ui.ImageButton$ImageButtonStyle):0:0 -> <init>
    3:3:void <init>(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable):0:0 -> <init>
com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton -> com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton:
    1:1:void <init>(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton$ImageTextButtonStyle):0:0 -> <init>
    2:2:void <init>(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin):0:0 -> <init>
    3:3:void <init>(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String):0:0 -> <init>
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle getStyle():0:0 -> getStyle
    2:2:com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton$ImageTextButtonStyle getStyle():0:0 -> getStyle
com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton$ImageTextButtonStyle -> com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton$ImageTextButtonStyle:
    1:1:void <init>(com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton$ImageTextButtonStyle):0:0 -> <init>
    2:2:void <init>(com.badlogic.gdx.scenes.scene2d.ui.TextButton$TextButtonStyle):0:0 -> <init>
    3:3:void <init>(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.graphics.g2d.BitmapFont):0:0 -> <init>
com.badlogic.gdx.scenes.scene2d.ui.Label -> com.badlogic.gdx.scenes.scene2d.ui.Label:
    1:1:void <init>(java.lang.CharSequence,com.badlogic.gdx.scenes.scene2d.ui.Label$LabelStyle):0:0 -> <init>
    2:2:void <init>(java.lang.CharSequence,com.badlogic.gdx.scenes.scene2d.ui.Skin):0:0 -> <init>
    3:3:void <init>(java.lang.CharSequence,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String):0:0 -> <init>
    4:4:void <init>(java.lang.CharSequence,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String,com.badlogic.gdx.graphics.Color):0:0 -> <init>
    5:5:void <init>(java.lang.CharSequence,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String,java.lang.String):0:0 -> <init>
    1:1:com.badlogic.gdx.utils.StringBuilder getText():0:0 -> getText
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/n0;"}
    1:1:void setAlignment(int):0:0 -> setAlignment
    2:2:void setAlignment(int,int):0:0 -> setAlignment
    1:1:void setEllipsis(java.lang.String):0:0 -> setEllipsis
    2:2:void setEllipsis(boolean):0:0 -> setEllipsis
    1:1:void setFontScale(float):0:0 -> setFontScale
    2:2:void setFontScale(float,float):0:0 -> setFontScale
    1:1:void setText(java.lang.CharSequence):0:0 -> setText
    2:2:boolean setText(int):0:0 -> setText
com.badlogic.gdx.scenes.scene2d.ui.Label$LabelStyle -> com.badlogic.gdx.scenes.scene2d.ui.Label$LabelStyle:
    1:1:void <init>(com.badlogic.gdx.graphics.g2d.BitmapFont,com.badlogic.gdx.graphics.Color):0:0 -> <init>
    2:2:void <init>(com.badlogic.gdx.scenes.scene2d.ui.Label$LabelStyle):0:0 -> <init>
com.badlogic.gdx.scenes.scene2d.ui.List -> com.badlogic.gdx.scenes.scene2d.ui.List:
    1:1:void <init>(com.badlogic.gdx.scenes.scene2d.ui.List$ListStyle):0:0 -> <init>
    2:2:void <init>(com.badlogic.gdx.scenes.scene2d.ui.Skin):0:0 -> <init>
    3:3:void <init>(com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String):0:0 -> <init>
    1:1:com.badlogic.gdx.math.Rectangle getCullingArea():0:0 -> getCullingArea
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Li/i;"}
    1:1:com.badlogic.gdx.utils.Array getItems():0:0 -> getItems
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/b;"}
    1:1:void setCullingArea(com.badlogic.gdx.math.Rectangle):0:0 -> setCullingArea
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/i;)V"}
    1:1:void setItems(com.badlogic.gdx.utils.Array):0:0 -> setItems
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/b;)V"}
    2:2:void setItems(java.lang.Object[]):0:0 -> setItems
com.badlogic.gdx.scenes.scene2d.ui.List$1 -> com.badlogic.gdx.scenes.scene2d.ui.List$a:
    long typeTimeout -> a
    java.lang.String prefix -> b
    com.badlogic.gdx.scenes.scene2d.ui.List this$0 -> c
com.badlogic.gdx.scenes.scene2d.ui.List$2 -> com.badlogic.gdx.scenes.scene2d.ui.List$b:
    com.badlogic.gdx.scenes.scene2d.ui.List this$0 -> a
com.badlogic.gdx.scenes.scene2d.ui.List$ListStyle -> com.badlogic.gdx.scenes.scene2d.ui.List$ListStyle:
    1:1:void <init>():0:0 -> <init>
    2:2:void <init>(com.badlogic.gdx.graphics.g2d.BitmapFont,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.scenes.scene2d.utils.Drawable):0:0 -> <init>
    3:3:void <init>(com.badlogic.gdx.scenes.scene2d.ui.List$ListStyle):0:0 -> <init>
com.badlogic.gdx.scenes.scene2d.ui.ParticleEffectActor -> com.badlogic.gdx.scenes.scene2d.ui.ParticleEffectActor:
    1:1:void <init>(com.badlogic.gdx.graphics.g2d.ParticleEffect,boolean):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/e;Z)V"}
    2:2:void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.g2d.TextureAtlas):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le/a;Lcom/badlogic/gdx/graphics/g2d/i;)V"}
    3:3:void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le/a;Le/a;)V"}
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar -> com.badlogic.gdx.scenes.scene2d.ui.ProgressBar:
    1:1:void <init>(float,float,float,boolean,com.badlogic.gdx.scenes.scene2d.ui.ProgressBar$ProgressBarStyle):0:0 -> <init>
    2:2:void <init>(float,float,float,boolean,com.badlogic.gdx.scenes.scene2d.ui.Skin):0:0 -> <init>
    3:3:void <init>(float,float,float,boolean,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String):0:0 -> <init>
    1:1:void setAnimateInterpolation(com.badlogic.gdx.math.Interpolation):0:0 -> setAnimateInterpolation
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/d;)V"}
    1:1:void setVisualInterpolation(com.badlogic.gdx.math.Interpolation):0:0 -> setVisualInterpolation
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/d;)V"}
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar$ProgressBarStyle -> com.badlogic.gdx.scenes.scene2d.ui.ProgressBar$ProgressBarStyle:
    1:1:void <init>(com.badlogic.gdx.scenes.scene2d.ui.ProgressBar$ProgressBarStyle):0:0 -> <init>
    2:2:void <init>(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable):0:0 -> <init>
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane -> com.badlogic.gdx.scenes.scene2d.ui.ScrollPane:
    1:1:void <init>(com.badlogic.gdx.scenes.scene2d.Actor):0:0 -> <init>
    2:2:void <init>(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$ScrollPaneStyle):0:0 -> <init>
    3:3:void <init>(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.ui.Skin):0:0 -> <init>
    4:4:void <init>(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String):0:0 -> <init>
    1:1:void drawDebug(com.badlogic.gdx.graphics.glutils.ShapeRenderer):0:0 -> drawDebug
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lg/n;)V"}
    1:1:boolean removeActor(com.badlogic.gdx.scenes.scene2d.Actor):0:0 -> removeActor
    2:2:boolean removeActor(com.badlogic.gdx.scenes.scene2d.Actor,boolean):0:0 -> removeActor
    1:1:void scrollTo(float,float,float,float):0:0 -> scrollTo
    2:2:void scrollTo(float,float,float,float,boolean,boolean):0:0 -> scrollTo
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$1 -> com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$a:
    float handlePosition -> a
    com.badlogic.gdx.scenes.scene2d.ui.ScrollPane this$0 -> b
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$2 -> com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$b:
    com.badlogic.gdx.scenes.scene2d.ui.ScrollPane this$0 -> a
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$3 -> com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$c:
    com.badlogic.gdx.scenes.scene2d.ui.ScrollPane this$0 -> a
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$ScrollPaneStyle -> com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$ScrollPaneStyle:
    1:1:void <init>(com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$ScrollPaneStyle):0:0 -> <init>
    2:2:void <init>(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable):0:0 -> <init>
com.badlogic.gdx.scenes.scene2d.ui.SelectBox -> com.badlogic.gdx.scenes.scene2d.ui.SelectBox:
    1:1:void <init>(com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxStyle):0:0 -> <init>
    2:2:void <init>(com.badlogic.gdx.scenes.scene2d.ui.Skin):0:0 -> <init>
    3:3:void <init>(com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String):0:0 -> <init>
    1:1:com.badlogic.gdx.utils.Array getItems():0:0 -> getItems
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/b;"}
    1:1:void setItems(com.badlogic.gdx.utils.Array):0:0 -> setItems
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/b;)V"}
    2:2:void setItems(java.lang.Object[]):0:0 -> setItems
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$1 -> com.badlogic.gdx.scenes.scene2d.ui.SelectBox$a:
    com.badlogic.gdx.scenes.scene2d.ui.SelectBox this$0 -> a
    1:1:void <init>(com.badlogic.gdx.scenes.scene2d.ui.SelectBox,com.badlogic.gdx.utils.Array):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/scenes/scene2d/ui/SelectBox;Ll/b;)V"}
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$2 -> com.badlogic.gdx.scenes.scene2d.ui.SelectBox$b:
    com.badlogic.gdx.scenes.scene2d.ui.SelectBox this$0 -> a
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxScrollPane$1 -> com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxScrollPane$a:
    com.badlogic.gdx.scenes.scene2d.ui.SelectBox val$selectBox -> a
    com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxScrollPane this$0 -> b
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxScrollPane$2 -> com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxScrollPane$b:
    com.badlogic.gdx.scenes.scene2d.ui.SelectBox val$selectBox -> a
    com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxScrollPane this$0 -> b
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxScrollPane$3 -> com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxScrollPane$c:
    com.badlogic.gdx.scenes.scene2d.ui.SelectBox val$selectBox -> a
    com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxScrollPane this$0 -> b
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxScrollPane$4 -> com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxScrollPane$d:
    com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxScrollPane this$0 -> a
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxStyle -> com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxStyle:
    1:1:void <init>():0:0 -> <init>
    2:2:void <init>(com.badlogic.gdx.graphics.g2d.BitmapFont,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$ScrollPaneStyle,com.badlogic.gdx.scenes.scene2d.ui.List$ListStyle):0:0 -> <init>
    3:3:void <init>(com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxStyle):0:0 -> <init>
com.badlogic.gdx.scenes.scene2d.ui.Skin -> com.badlogic.gdx.scenes.scene2d.ui.Skin:
    1:1:void <init>():0:0 -> <init>
    2:2:void <init>(com.badlogic.gdx.graphics.g2d.TextureAtlas):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/i;)V"}
    3:3:void <init>(com.badlogic.gdx.files.FileHandle):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le/a;)V"}
    4:4:void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.g2d.TextureAtlas):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le/a;Lcom/badlogic/gdx/graphics/g2d/i;)V"}
    1:1:void add(java.lang.String,java.lang.Object):0:0 -> add
    2:2:void add(java.lang.String,java.lang.Object,java.lang.Class):0:0 -> add
    1:1:com.badlogic.gdx.utils.reflect.Method findMethod(java.lang.Class,java.lang.String):0:0 -> findMethod
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/Class;Ljava/lang/String;)Lm/e;"}
    1:1:java.lang.Object get(java.lang.Class):0:0 -> get
    2:2:java.lang.Object get(java.lang.String,java.lang.Class):0:0 -> get
    1:1:com.badlogic.gdx.utils.ObjectMap getAll(java.lang.Class):0:0 -> getAll
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/Class;)Ll/y;"}
    1:1:com.badlogic.gdx.utils.ObjectMap getJsonClassTags():0:0 -> getJsonClassTags
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/y;"}
    1:1:com.badlogic.gdx.utils.Json getJsonLoader(com.badlogic.gdx.files.FileHandle):0:0 -> getJsonLoader
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le/a;)Ll/p;"}
    1:1:com.badlogic.gdx.utils.Array getRegions(java.lang.String):0:0 -> getRegions
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;)Ll/b;"}
    1:1:void load(com.badlogic.gdx.files.FileHandle):0:0 -> load
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le/a;)V"}
    1:1:com.badlogic.gdx.scenes.scene2d.utils.Drawable newDrawable(com.badlogic.gdx.scenes.scene2d.utils.Drawable):0:0 -> newDrawable
    2:2:com.badlogic.gdx.scenes.scene2d.utils.Drawable newDrawable(com.badlogic.gdx.scenes.scene2d.utils.Drawable,float,float,float,float):0:0 -> newDrawable
    3:3:com.badlogic.gdx.scenes.scene2d.utils.Drawable newDrawable(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.graphics.Color):0:0 -> newDrawable
    4:4:com.badlogic.gdx.scenes.scene2d.utils.Drawable newDrawable(java.lang.String):0:0 -> newDrawable
    5:5:com.badlogic.gdx.scenes.scene2d.utils.Drawable newDrawable(java.lang.String,float,float,float,float):0:0 -> newDrawable
    6:6:com.badlogic.gdx.scenes.scene2d.utils.Drawable newDrawable(java.lang.String,com.badlogic.gdx.graphics.Color):0:0 -> newDrawable
com.badlogic.gdx.scenes.scene2d.ui.Skin$1 -> com.badlogic.gdx.scenes.scene2d.ui.Skin$a:
    com.badlogic.gdx.scenes.scene2d.ui.Skin this$0 -> q
    1:1:boolean ignoreUnknownField(java.lang.Class,java.lang.String):0:0 -> g
    1:1:void readFields(java.lang.Object,com.badlogic.gdx.utils.JsonValue):0:0 -> i
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/Object;Ll/r;)V"}
    1:1:java.lang.Object readValue(java.lang.Class,java.lang.Class,com.badlogic.gdx.utils.JsonValue):0:0 -> j
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/Class;Ljava/lang/Class;Ll/r;)Ljava/lang/Object;"}
com.badlogic.gdx.scenes.scene2d.ui.Skin$2 -> com.badlogic.gdx.scenes.scene2d.ui.Skin$b:
    com.badlogic.gdx.scenes.scene2d.ui.Skin val$skin -> a
    com.badlogic.gdx.scenes.scene2d.ui.Skin this$0 -> b
    1:1:java.lang.Object read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue,java.lang.Class):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/p;Ll/r;Ljava/lang/Class;)Ljava/lang/Object;"}
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Skin read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue,java.lang.Class):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/p;Ll/r;Ljava/lang/Class;)Lcom/badlogic/gdx/scenes/scene2d/ui/Skin;"}
    1:1:void readNamedObjects(com.badlogic.gdx.utils.Json,java.lang.Class,com.badlogic.gdx.utils.JsonValue):0:0 -> c
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/p;Ljava/lang/Class;Ll/r;)V"}
com.badlogic.gdx.scenes.scene2d.ui.Skin$3 -> com.badlogic.gdx.scenes.scene2d.ui.Skin$c:
    com.badlogic.gdx.files.FileHandle val$skinFile -> a
    com.badlogic.gdx.scenes.scene2d.ui.Skin val$skin -> b
    com.badlogic.gdx.scenes.scene2d.ui.Skin this$0 -> c
    1:1:void <init>(com.badlogic.gdx.scenes.scene2d.ui.Skin,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.scenes.scene2d.ui.Skin):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/scenes/scene2d/ui/Skin;Le/a;Lcom/badlogic/gdx/scenes/scene2d/ui/Skin;)V"}
    1:1:java.lang.Object read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue,java.lang.Class):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/p;Ll/r;Ljava/lang/Class;)Ljava/lang/Object;"}
    1:1:com.badlogic.gdx.graphics.g2d.BitmapFont read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue,java.lang.Class):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/p;Ll/r;Ljava/lang/Class;)Lcom/badlogic/gdx/graphics/g2d/BitmapFont;"}
com.badlogic.gdx.scenes.scene2d.ui.Skin$4 -> com.badlogic.gdx.scenes.scene2d.ui.Skin$d:
    com.badlogic.gdx.scenes.scene2d.ui.Skin this$0 -> a
    1:1:java.lang.Object read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue,java.lang.Class):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/p;Ll/r;Ljava/lang/Class;)Ljava/lang/Object;"}
    1:1:com.badlogic.gdx.graphics.Color read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue,java.lang.Class):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/p;Ll/r;Ljava/lang/Class;)Lcom/badlogic/gdx/graphics/Color;"}
com.badlogic.gdx.scenes.scene2d.ui.Skin$5 -> com.badlogic.gdx.scenes.scene2d.ui.Skin$e:
    com.badlogic.gdx.scenes.scene2d.ui.Skin this$0 -> a
    1:1:java.lang.Object read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue,java.lang.Class):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/p;Ll/r;Ljava/lang/Class;)Ljava/lang/Object;"}
com.badlogic.gdx.scenes.scene2d.ui.Slider -> com.badlogic.gdx.scenes.scene2d.ui.Slider:
    1:1:void <init>(float,float,float,boolean,com.badlogic.gdx.scenes.scene2d.ui.Skin):0:0 -> <init>
    2:2:void <init>(float,float,float,boolean,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String):0:0 -> <init>
    3:3:void <init>(float,float,float,boolean,com.badlogic.gdx.scenes.scene2d.ui.Slider$SliderStyle):0:0 -> <init>
    1:1:com.badlogic.gdx.scenes.scene2d.ui.ProgressBar$ProgressBarStyle getStyle():0:0 -> getStyle
    2:2:com.badlogic.gdx.scenes.scene2d.ui.Slider$SliderStyle getStyle():0:0 -> getStyle
    1:1:void setSnapToValues(float,float[]):0:0 -> setSnapToValues
    2:2:void setSnapToValues(float[],float):0:0 -> setSnapToValues
    1:1:void setVisualInterpolationInverse(com.badlogic.gdx.math.Interpolation):0:0 -> setVisualInterpolationInverse
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/d;)V"}
com.badlogic.gdx.scenes.scene2d.ui.Slider$1 -> com.badlogic.gdx.scenes.scene2d.ui.Slider$a:
    com.badlogic.gdx.scenes.scene2d.ui.Slider this$0 -> a
com.badlogic.gdx.scenes.scene2d.ui.Slider$SliderStyle -> com.badlogic.gdx.scenes.scene2d.ui.Slider$SliderStyle:
    1:1:void <init>(com.badlogic.gdx.scenes.scene2d.ui.Slider$SliderStyle):0:0 -> <init>
    2:2:void <init>(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable):0:0 -> <init>
com.badlogic.gdx.scenes.scene2d.ui.SplitPane -> com.badlogic.gdx.scenes.scene2d.ui.SplitPane:
    1:1:void <init>(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor,boolean,com.badlogic.gdx.scenes.scene2d.ui.Skin):0:0 -> <init>
    2:2:void <init>(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor,boolean,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String):0:0 -> <init>
    3:3:void <init>(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor,boolean,com.badlogic.gdx.scenes.scene2d.ui.SplitPane$SplitPaneStyle):0:0 -> <init>
    1:1:boolean removeActor(com.badlogic.gdx.scenes.scene2d.Actor):0:0 -> removeActor
    2:2:boolean removeActor(com.badlogic.gdx.scenes.scene2d.Actor,boolean):0:0 -> removeActor
com.badlogic.gdx.scenes.scene2d.ui.SplitPane$1 -> com.badlogic.gdx.scenes.scene2d.ui.SplitPane$a:
    int draggingPointer -> a
    com.badlogic.gdx.scenes.scene2d.ui.SplitPane this$0 -> b
com.badlogic.gdx.scenes.scene2d.ui.SplitPane$SplitPaneStyle -> com.badlogic.gdx.scenes.scene2d.ui.SplitPane$SplitPaneStyle:
    1:1:void <init>(com.badlogic.gdx.scenes.scene2d.ui.SplitPane$SplitPaneStyle):0:0 -> <init>
    2:2:void <init>(com.badlogic.gdx.scenes.scene2d.utils.Drawable):0:0 -> <init>
com.badlogic.gdx.scenes.scene2d.ui.Stack -> com.badlogic.gdx.scenes.scene2d.ui.Stack:
    1:1:void <init>():0:0 -> <init>
    2:2:void <init>(com.badlogic.gdx.scenes.scene2d.Actor[]):0:0 -> <init>
com.badlogic.gdx.scenes.scene2d.ui.Table -> com.badlogic.gdx.scenes.scene2d.ui.Table:
    1:1:void <init>():0:0 -> <init>
    2:2:void <init>(com.badlogic.gdx.scenes.scene2d.ui.Skin):0:0 -> <init>
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Cell add():0:0 -> add
    2:2:com.badlogic.gdx.scenes.scene2d.ui.Cell add(com.badlogic.gdx.scenes.scene2d.Actor):0:0 -> add
    3:3:com.badlogic.gdx.scenes.scene2d.ui.Cell add(java.lang.CharSequence):0:0 -> add
    4:4:com.badlogic.gdx.scenes.scene2d.ui.Cell add(java.lang.CharSequence,java.lang.String):0:0 -> add
    5:5:com.badlogic.gdx.scenes.scene2d.ui.Cell add(java.lang.CharSequence,java.lang.String,com.badlogic.gdx.graphics.Color):0:0 -> add
    6:6:com.badlogic.gdx.scenes.scene2d.ui.Cell add(java.lang.CharSequence,java.lang.String,java.lang.String):0:0 -> add
    7:7:com.badlogic.gdx.scenes.scene2d.ui.Table add(com.badlogic.gdx.scenes.scene2d.Actor[]):0:0 -> add
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Table background(com.badlogic.gdx.scenes.scene2d.utils.Drawable):0:0 -> background
    2:2:com.badlogic.gdx.scenes.scene2d.ui.Table background(java.lang.String):0:0 -> background
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Table clip():0:0 -> clip
    2:2:com.badlogic.gdx.scenes.scene2d.ui.Table clip(boolean):0:0 -> clip
    1:1:com.badlogic.gdx.scenes.scene2d.Actor debug():0:0 -> debug
    2:2:com.badlogic.gdx.scenes.scene2d.ui.Table debug():0:0 -> debug
    3:3:com.badlogic.gdx.scenes.scene2d.ui.Table debug(com.badlogic.gdx.scenes.scene2d.ui.Table$Debug):0:0 -> debug
    1:1:com.badlogic.gdx.scenes.scene2d.Group debugAll():0:0 -> debugAll
    2:2:com.badlogic.gdx.scenes.scene2d.ui.Table debugAll():0:0 -> debugAll
    1:1:void drawDebug(com.badlogic.gdx.graphics.glutils.ShapeRenderer):0:0 -> drawDebug
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lg/n;)V"}
    1:1:void drawDebugBounds(com.badlogic.gdx.graphics.glutils.ShapeRenderer):0:0 -> drawDebugBounds
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lg/n;)V"}
    1:1:void drawDebugRects(com.badlogic.gdx.graphics.glutils.ShapeRenderer):0:0 -> drawDebugRects
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lg/n;)V"}
    1:1:com.badlogic.gdx.utils.Array getCells():0:0 -> getCells
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/b;"}
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Table pad(float):0:0 -> pad
    2:2:com.badlogic.gdx.scenes.scene2d.ui.Table pad(float,float,float,float):0:0 -> pad
    3:3:com.badlogic.gdx.scenes.scene2d.ui.Table pad(com.badlogic.gdx.scenes.scene2d.ui.Value):0:0 -> pad
    4:4:com.badlogic.gdx.scenes.scene2d.ui.Table pad(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value):0:0 -> pad
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Table padBottom(float):0:0 -> padBottom
    2:2:com.badlogic.gdx.scenes.scene2d.ui.Table padBottom(com.badlogic.gdx.scenes.scene2d.ui.Value):0:0 -> padBottom
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Table padLeft(float):0:0 -> padLeft
    2:2:com.badlogic.gdx.scenes.scene2d.ui.Table padLeft(com.badlogic.gdx.scenes.scene2d.ui.Value):0:0 -> padLeft
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Table padRight(float):0:0 -> padRight
    2:2:com.badlogic.gdx.scenes.scene2d.ui.Table padRight(com.badlogic.gdx.scenes.scene2d.ui.Value):0:0 -> padRight
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Table padTop(float):0:0 -> padTop
    2:2:com.badlogic.gdx.scenes.scene2d.ui.Table padTop(com.badlogic.gdx.scenes.scene2d.ui.Value):0:0 -> padTop
    1:1:boolean removeActor(com.badlogic.gdx.scenes.scene2d.Actor):0:0 -> removeActor
    2:2:boolean removeActor(com.badlogic.gdx.scenes.scene2d.Actor,boolean):0:0 -> removeActor
    1:1:void setBackground(com.badlogic.gdx.scenes.scene2d.utils.Drawable):0:0 -> setBackground
    2:2:void setBackground(java.lang.String):0:0 -> setBackground
com.badlogic.gdx.scenes.scene2d.ui.Table$1 -> com.badlogic.gdx.scenes.scene2d.ui.Table$a:
    1:1:java.lang.Object newObject():0:0 -> d
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Cell newObject():0:0 -> g
com.badlogic.gdx.scenes.scene2d.ui.Table$2 -> com.badlogic.gdx.scenes.scene2d.ui.Table$b:
com.badlogic.gdx.scenes.scene2d.ui.Table$3 -> com.badlogic.gdx.scenes.scene2d.ui.Table$c:
com.badlogic.gdx.scenes.scene2d.ui.Table$4 -> com.badlogic.gdx.scenes.scene2d.ui.Table$d:
com.badlogic.gdx.scenes.scene2d.ui.Table$5 -> com.badlogic.gdx.scenes.scene2d.ui.Table$e:
com.badlogic.gdx.scenes.scene2d.ui.TextArea -> com.badlogic.gdx.scenes.scene2d.ui.TextArea:
    1:1:void <init>(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin):0:0 -> <init>
    2:2:void <init>(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String):0:0 -> <init>
    3:3:void <init>(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldStyle):0:0 -> <init>
com.badlogic.gdx.scenes.scene2d.ui.TextButton -> com.badlogic.gdx.scenes.scene2d.ui.TextButton:
    1:1:void <init>(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin):0:0 -> <init>
    2:2:void <init>(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String):0:0 -> <init>
    3:3:void <init>(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.TextButton$TextButtonStyle):0:0 -> <init>
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle getStyle():0:0 -> getStyle
    2:2:com.badlogic.gdx.scenes.scene2d.ui.TextButton$TextButtonStyle getStyle():0:0 -> getStyle
com.badlogic.gdx.scenes.scene2d.ui.TextButton$TextButtonStyle -> com.badlogic.gdx.scenes.scene2d.ui.TextButton$TextButtonStyle:
    1:1:void <init>(com.badlogic.gdx.scenes.scene2d.ui.TextButton$TextButtonStyle):0:0 -> <init>
    2:2:void <init>(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.graphics.g2d.BitmapFont):0:0 -> <init>
com.badlogic.gdx.scenes.scene2d.ui.TextField -> com.badlogic.gdx.scenes.scene2d.ui.TextField:
    1:1:void <init>(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin):0:0 -> <init>
    2:2:void <init>(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String):0:0 -> <init>
    3:3:void <init>(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldStyle):0:0 -> <init>
    1:1:void cut():0:0 -> cut
    2:2:void cut(boolean):0:0 -> cut
    1:1:com.badlogic.gdx.scenes.scene2d.ui.TextField findNextTextField(com.badlogic.gdx.utils.Array,com.badlogic.gdx.scenes.scene2d.ui.TextField,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,boolean):0:0 -> findNextTextField
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/b;Lcom/badlogic/gdx/scenes/scene2d/ui/TextField;Li/j;Li/j;Z)Lcom/badlogic/gdx/scenes/scene2d/ui/TextField;"}
    1:1:void setClipboard(com.badlogic.gdx.utils.Clipboard):0:0 -> setClipboard
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/d;)V"}
    1:1:int[] wordUnderCursor(float):0:0 -> wordUnderCursor
    2:2:int[] wordUnderCursor(int):0:0 -> wordUnderCursor
com.badlogic.gdx.scenes.scene2d.ui.TextField$1 -> com.badlogic.gdx.scenes.scene2d.ui.TextField$a:
    com.badlogic.gdx.scenes.scene2d.ui.TextField this$0 -> f
com.badlogic.gdx.scenes.scene2d.ui.TextField$KeyRepeatTask -> com.badlogic.gdx.scenes.scene2d.ui.TextField$b:
    int keycode -> f
    com.badlogic.gdx.scenes.scene2d.ui.TextField this$0 -> g
com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldStyle -> com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldStyle:
    1:1:void <init>(com.badlogic.gdx.graphics.g2d.BitmapFont,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable):0:0 -> <init>
    2:2:void <init>(com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldStyle):0:0 -> <init>
com.badlogic.gdx.scenes.scene2d.ui.TextTooltip -> com.badlogic.gdx.scenes.scene2d.ui.TextTooltip:
    1:1:void <init>(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin):0:0 -> <init>
    2:2:void <init>(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String):0:0 -> <init>
    3:3:void <init>(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.TextTooltip$TextTooltipStyle):0:0 -> <init>
    4:4:void <init>(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.TooltipManager,com.badlogic.gdx.scenes.scene2d.ui.Skin):0:0 -> <init>
    5:5:void <init>(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.TooltipManager,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String):0:0 -> <init>
    6:6:void <init>(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.TooltipManager,com.badlogic.gdx.scenes.scene2d.ui.TextTooltip$TextTooltipStyle):0:0 -> <init>
com.badlogic.gdx.scenes.scene2d.ui.TextTooltip$TextTooltipStyle -> com.badlogic.gdx.scenes.scene2d.ui.TextTooltip$TextTooltipStyle:
    1:1:void <init>(com.badlogic.gdx.scenes.scene2d.ui.Label$LabelStyle,com.badlogic.gdx.scenes.scene2d.utils.Drawable):0:0 -> <init>
    2:2:void <init>(com.badlogic.gdx.scenes.scene2d.ui.TextTooltip$TextTooltipStyle):0:0 -> <init>
com.badlogic.gdx.scenes.scene2d.ui.Tooltip -> com.badlogic.gdx.scenes.scene2d.ui.Tooltip:
    1:1:void <init>(com.badlogic.gdx.scenes.scene2d.Actor):0:0 -> <init>
    2:2:void <init>(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.ui.TooltipManager):0:0 -> <init>
com.badlogic.gdx.scenes.scene2d.ui.Tooltip$1 -> com.badlogic.gdx.scenes.scene2d.ui.Tooltip$a:
    com.badlogic.gdx.scenes.scene2d.ui.Tooltip this$0 -> a
com.badlogic.gdx.scenes.scene2d.ui.TooltipManager$1 -> com.badlogic.gdx.scenes.scene2d.ui.TooltipManager$a:
    com.badlogic.gdx.scenes.scene2d.ui.TooltipManager this$0 -> f
com.badlogic.gdx.scenes.scene2d.ui.TooltipManager$2 -> com.badlogic.gdx.scenes.scene2d.ui.TooltipManager$b:
    com.badlogic.gdx.scenes.scene2d.ui.TooltipManager this$0 -> f
com.badlogic.gdx.scenes.scene2d.ui.Touchpad -> com.badlogic.gdx.scenes.scene2d.ui.Touchpad:
    1:1:void <init>(float,com.badlogic.gdx.scenes.scene2d.ui.Skin):0:0 -> <init>
    2:2:void <init>(float,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String):0:0 -> <init>
    3:3:void <init>(float,com.badlogic.gdx.scenes.scene2d.ui.Touchpad$TouchpadStyle):0:0 -> <init>
com.badlogic.gdx.scenes.scene2d.ui.Touchpad$1 -> com.badlogic.gdx.scenes.scene2d.ui.Touchpad$a:
    com.badlogic.gdx.scenes.scene2d.ui.Touchpad this$0 -> a
com.badlogic.gdx.scenes.scene2d.ui.Touchpad$TouchpadStyle -> com.badlogic.gdx.scenes.scene2d.ui.Touchpad$TouchpadStyle:
    1:1:void <init>(com.badlogic.gdx.scenes.scene2d.ui.Touchpad$TouchpadStyle):0:0 -> <init>
    2:2:void <init>(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable):0:0 -> <init>
com.badlogic.gdx.scenes.scene2d.ui.Tree -> com.badlogic.gdx.scenes.scene2d.ui.Tree:
    1:1:void <init>(com.badlogic.gdx.scenes.scene2d.ui.Skin):0:0 -> <init>
    2:2:void <init>(com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String):0:0 -> <init>
    3:3:void <init>(com.badlogic.gdx.scenes.scene2d.ui.Tree$TreeStyle):0:0 -> <init>
    1:1:void collapseAll():0:0 -> collapseAll
    2:2:void collapseAll(com.badlogic.gdx.utils.Array):0:0 -> collapseAll
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/b;)V"}
    1:1:void computeSize():0:0 -> computeSize
    2:2:void computeSize(com.badlogic.gdx.utils.Array,float,float):0:0 -> computeSize
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/b;FF)V"}
    1:1:float drawIcons(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float,com.badlogic.gdx.scenes.scene2d.ui.Tree$Node,com.badlogic.gdx.utils.Array,float,float):0:0 -> drawIcons
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/a;FFFFLcom/badlogic/gdx/scenes/scene2d/ui/Tree$Node;Ll/b;FF)F"}
    1:1:void expandAll():0:0 -> expandAll
    2:2:void expandAll(com.badlogic.gdx.utils.Array):0:0 -> expandAll
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/b;)V"}
    1:1:void findExpandedValues(com.badlogic.gdx.utils.Array):0:0 -> findExpandedValues
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/b;)V"}
    2:2:boolean findExpandedValues(com.badlogic.gdx.utils.Array,com.badlogic.gdx.utils.Array):0:0 -> findExpandedValues
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/b;Ll/b;)Z"}
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Tree$Node findNode(java.lang.Object):0:0 -> findNode
    2:2:com.badlogic.gdx.scenes.scene2d.ui.Tree$Node findNode(com.badlogic.gdx.utils.Array,java.lang.Object):0:0 -> findNode
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/b;Ljava/lang/Object;)Lcom/badlogic/gdx/scenes/scene2d/ui/Tree$Node;"}
    1:1:float getNodeAt(com.badlogic.gdx.utils.Array,float,float):0:0 -> getNodeAt
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/b;FF)F"}
    2:2:com.badlogic.gdx.scenes.scene2d.ui.Tree$Node getNodeAt(float):0:0 -> getNodeAt
    1:1:com.badlogic.gdx.utils.Array getNodes():0:0 -> getNodes
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/b;"}
    1:1:com.badlogic.gdx.utils.Array getRootNodes():0:0 -> getRootNodes
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/b;"}
    1:1:float layout(com.badlogic.gdx.utils.Array,float,float,float):0:0 -> layout
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/b;FFF)F"}
    2:2:void layout():0:0 -> layout
    1:1:void restoreExpandedValues(com.badlogic.gdx.utils.Array):0:0 -> restoreExpandedValues
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/b;)V"}
    1:1:void selectNodes(com.badlogic.gdx.utils.Array,float,float):0:0 -> selectNodes
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/b;FF)V"}
    1:1:void setPadding(float):0:0 -> setPadding
    2:2:void setPadding(float,float):0:0 -> setPadding
com.badlogic.gdx.scenes.scene2d.ui.Tree$1 -> com.badlogic.gdx.scenes.scene2d.ui.Tree$a:
    com.badlogic.gdx.scenes.scene2d.ui.Tree this$0 -> a
com.badlogic.gdx.scenes.scene2d.ui.Tree$2 -> com.badlogic.gdx.scenes.scene2d.ui.Tree$b:
    com.badlogic.gdx.scenes.scene2d.ui.Tree this$0 -> a
com.badlogic.gdx.scenes.scene2d.ui.Tree$Node -> com.badlogic.gdx.scenes.scene2d.ui.Tree$Node:
    1:1:void <init>():0:0 -> <init>
    2:2:void <init>(com.badlogic.gdx.scenes.scene2d.Actor):0:0 -> <init>
    1:1:void addAll(com.badlogic.gdx.utils.Array):0:0 -> addAll
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/b;)V"}
    1:1:void findExpandedValues(com.badlogic.gdx.utils.Array):0:0 -> findExpandedValues
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/b;)V"}
    1:1:com.badlogic.gdx.utils.Array getChildren():0:0 -> getChildren
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/b;"}
    1:1:void remove():0:0 -> remove
    2:2:void remove(com.badlogic.gdx.scenes.scene2d.ui.Tree$Node):0:0 -> remove
    1:1:void restoreExpandedValues(com.badlogic.gdx.utils.Array):0:0 -> restoreExpandedValues
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/b;)V"}
com.badlogic.gdx.scenes.scene2d.ui.Tree$TreeStyle -> com.badlogic.gdx.scenes.scene2d.ui.Tree$TreeStyle:
    1:1:void <init>(com.badlogic.gdx.scenes.scene2d.ui.Tree$TreeStyle):0:0 -> <init>
    2:2:void <init>(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable):0:0 -> <init>
com.badlogic.gdx.scenes.scene2d.ui.Value -> com.badlogic.gdx.scenes.scene2d.ui.Value:
    1:1:float get():0:0 -> get
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Value percentHeight(float):0:0 -> percentHeight
    2:2:com.badlogic.gdx.scenes.scene2d.ui.Value percentHeight(float,com.badlogic.gdx.scenes.scene2d.Actor):0:0 -> percentHeight
    1:1:com.badlogic.gdx.scenes.scene2d.ui.Value percentWidth(float):0:0 -> percentWidth
    2:2:com.badlogic.gdx.scenes.scene2d.ui.Value percentWidth(float,com.badlogic.gdx.scenes.scene2d.Actor):0:0 -> percentWidth
com.badlogic.gdx.scenes.scene2d.ui.Value$1 -> com.badlogic.gdx.scenes.scene2d.ui.Value$b:
com.badlogic.gdx.scenes.scene2d.ui.Value$10 -> com.badlogic.gdx.scenes.scene2d.ui.Value$a:
    com.badlogic.gdx.scenes.scene2d.Actor val$actor -> a
    float val$percent -> b
com.badlogic.gdx.scenes.scene2d.ui.Value$2 -> com.badlogic.gdx.scenes.scene2d.ui.Value$c:
com.badlogic.gdx.scenes.scene2d.ui.Value$3 -> com.badlogic.gdx.scenes.scene2d.ui.Value$d:
com.badlogic.gdx.scenes.scene2d.ui.Value$4 -> com.badlogic.gdx.scenes.scene2d.ui.Value$e:
com.badlogic.gdx.scenes.scene2d.ui.Value$5 -> com.badlogic.gdx.scenes.scene2d.ui.Value$f:
com.badlogic.gdx.scenes.scene2d.ui.Value$6 -> com.badlogic.gdx.scenes.scene2d.ui.Value$g:
com.badlogic.gdx.scenes.scene2d.ui.Value$7 -> com.badlogic.gdx.scenes.scene2d.ui.Value$h:
    float val$percent -> a
com.badlogic.gdx.scenes.scene2d.ui.Value$8 -> com.badlogic.gdx.scenes.scene2d.ui.Value$i:
    float val$percent -> a
com.badlogic.gdx.scenes.scene2d.ui.Value$9 -> com.badlogic.gdx.scenes.scene2d.ui.Value$j:
    com.badlogic.gdx.scenes.scene2d.Actor val$actor -> a
    float val$percent -> b
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup -> com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup:
    1:1:void drawDebugBounds(com.badlogic.gdx.graphics.glutils.ShapeRenderer):0:0 -> drawDebugBounds
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lg/n;)V"}
    1:1:com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup expand():0:0 -> expand
    2:2:com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup expand(boolean):0:0 -> expand
    1:1:com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup fill():0:0 -> fill
    2:2:com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup fill(float):0:0 -> fill
    1:1:com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup pad(float):0:0 -> pad
    2:2:com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup pad(float,float,float,float):0:0 -> pad
    1:1:com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup reverse():0:0 -> reverse
    2:2:com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup reverse(boolean):0:0 -> reverse
    1:1:com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup wrap():0:0 -> wrap
    2:2:com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup wrap(boolean):0:0 -> wrap
com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup -> com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup:
    1:1:void <init>():0:0 -> <init>
    2:2:void <init>(com.badlogic.gdx.scenes.scene2d.Actor[]):0:0 -> <init>
    1:1:void setLayoutEnabled(com.badlogic.gdx.scenes.scene2d.Group,boolean):0:0 -> setLayoutEnabled
    2:2:void setLayoutEnabled(boolean):0:0 -> setLayoutEnabled
com.badlogic.gdx.scenes.scene2d.ui.Window -> com.badlogic.gdx.scenes.scene2d.ui.Window:
    1:1:void <init>(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin):0:0 -> <init>
    2:2:void <init>(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String):0:0 -> <init>
    3:3:void <init>(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Window$WindowStyle):0:0 -> <init>
com.badlogic.gdx.scenes.scene2d.ui.Window$1 -> com.badlogic.gdx.scenes.scene2d.ui.Window$a:
    com.badlogic.gdx.scenes.scene2d.ui.Window this$0 -> a
com.badlogic.gdx.scenes.scene2d.ui.Window$2 -> com.badlogic.gdx.scenes.scene2d.ui.Window$b:
    com.badlogic.gdx.scenes.scene2d.ui.Window this$0 -> a
com.badlogic.gdx.scenes.scene2d.ui.Window$3 -> com.badlogic.gdx.scenes.scene2d.ui.Window$c:
    float startX -> a
    float startY -> b
    float lastX -> c
    float lastY -> d
    com.badlogic.gdx.scenes.scene2d.ui.Window this$0 -> e
    1:1:void updateEdge(float,float):0:0 -> a
com.badlogic.gdx.scenes.scene2d.ui.Window$WindowStyle -> com.badlogic.gdx.scenes.scene2d.ui.Window$WindowStyle:
    1:1:void <init>():0:0 -> <init>
    2:2:void <init>(com.badlogic.gdx.graphics.g2d.BitmapFont,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.scenes.scene2d.utils.Drawable):0:0 -> <init>
    3:3:void <init>(com.badlogic.gdx.scenes.scene2d.ui.Window$WindowStyle):0:0 -> <init>
com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener -> com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener:
    1:1:void <init>():0:0 -> <init>
    2:2:void <init>(float,float,float,float):0:0 -> <init>
    1:1:com.badlogic.gdx.input.GestureDetector getGestureDetector():0:0 -> getGestureDetector
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lh/a;"}
    1:1:void pinch(com.badlogic.gdx.scenes.scene2d.InputEvent,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2):0:0 -> pinch
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/scenes/scene2d/InputEvent;Li/j;Li/j;Li/j;Li/j;)V"}
com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener$1 -> com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener$a:
    com.badlogic.gdx.math.Vector2 initialPointer1 -> a
    com.badlogic.gdx.math.Vector2 initialPointer2 -> b
    com.badlogic.gdx.math.Vector2 pointer1 -> c
    com.badlogic.gdx.math.Vector2 pointer2 -> d
    com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener this$0 -> e
    1:1:boolean fling(float,float,int):0:0 -> a
    1:1:boolean panStop(float,float,int,int):0:0 -> b
    1:1:boolean zoom(float,float):0:0 -> e
    1:1:boolean longPress(float,float):0:0 -> f
    1:1:boolean pan(float,float,float,float):0:0 -> g
    1:1:boolean pinch(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2):0:0 -> h
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/j;Li/j;Li/j;Li/j;)Z"}
    1:1:boolean tap(float,float,int,int):0:0 -> i
    1:1:void stageToLocalAmount(com.badlogic.gdx.math.Vector2):0:0 -> j
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/j;)V"}
com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener$2 -> com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener$b:
    int[] $SwitchMap$com$badlogic$gdx$scenes$scene2d$InputEvent$Type -> a
com.badlogic.gdx.scenes.scene2d.utils.ArraySelection -> com.badlogic.gdx.scenes.scene2d.utils.ArraySelection:
    1:1:void <init>(com.badlogic.gdx.utils.Array):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/b;)V"}
com.badlogic.gdx.scenes.scene2d.utils.BaseDrawable -> com.badlogic.gdx.scenes.scene2d.utils.BaseDrawable:
    1:1:void <init>(com.badlogic.gdx.scenes.scene2d.utils.Drawable):0:0 -> <init>
com.badlogic.gdx.scenes.scene2d.utils.ClickListener -> com.badlogic.gdx.scenes.scene2d.utils.ClickListener:
    1:1:void <init>():0:0 -> <init>
    2:2:void <init>(int):0:0 -> <init>
    1:1:boolean inTapSquare():0:0 -> inTapSquare
    2:2:boolean inTapSquare(float,float):0:0 -> inTapSquare
    1:1:boolean isOver():0:0 -> isOver
    2:2:boolean isOver(com.badlogic.gdx.scenes.scene2d.Actor,float,float):0:0 -> isOver
com.badlogic.gdx.scenes.scene2d.utils.Cullable -> com.badlogic.gdx.scenes.scene2d.utils.Cullable:
    void setCullingArea(com.badlogic.gdx.math.Rectangle) -> setCullingArea
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/i;)V"}
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$1 -> com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$a:
    com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Source val$source -> a
    com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop this$0 -> b
com.badlogic.gdx.scenes.scene2d.utils.DragScrollListener$1 -> com.badlogic.gdx.scenes.scene2d.utils.DragScrollListener$a:
    com.badlogic.gdx.scenes.scene2d.ui.ScrollPane val$scroll -> f
    com.badlogic.gdx.scenes.scene2d.utils.DragScrollListener this$0 -> g
com.badlogic.gdx.scenes.scene2d.utils.DragScrollListener$2 -> com.badlogic.gdx.scenes.scene2d.utils.DragScrollListener$b:
    com.badlogic.gdx.scenes.scene2d.ui.ScrollPane val$scroll -> f
    com.badlogic.gdx.scenes.scene2d.utils.DragScrollListener this$0 -> g
com.badlogic.gdx.scenes.scene2d.utils.FocusListener$1 -> com.badlogic.gdx.scenes.scene2d.utils.FocusListener$a:
    int[] $SwitchMap$com$badlogic$gdx$scenes$scene2d$utils$FocusListener$FocusEvent$Type -> a
com.badlogic.gdx.scenes.scene2d.utils.NinePatchDrawable -> com.badlogic.gdx.scenes.scene2d.utils.NinePatchDrawable:
    1:1:void <init>(com.badlogic.gdx.graphics.g2d.NinePatch):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/d;)V"}
    2:2:void <init>(com.badlogic.gdx.scenes.scene2d.utils.NinePatchDrawable):0:0 -> <init>
    1:1:void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float):0:0 -> draw
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/a;FFFF)V"}
    2:2:void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float,float,float,float,float,float):0:0 -> draw
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/a;FFFFFFFFF)V"}
com.badlogic.gdx.scenes.scene2d.utils.ScissorStack -> com.badlogic.gdx.scenes.scene2d.utils.ScissorStack:
    1:1:void calculateScissors(com.badlogic.gdx.graphics.Camera,float,float,float,float,com.badlogic.gdx.math.Matrix4,com.badlogic.gdx.math.Rectangle,com.badlogic.gdx.math.Rectangle):0:0 -> calculateScissors
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lf/a;FFFFLcom/badlogic/gdx/math/Matrix4;Li/i;Li/i;)V"}
    2:2:void calculateScissors(com.badlogic.gdx.graphics.Camera,com.badlogic.gdx.math.Matrix4,com.badlogic.gdx.math.Rectangle,com.badlogic.gdx.math.Rectangle):0:0 -> calculateScissors
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lf/a;Lcom/badlogic/gdx/math/Matrix4;Li/i;Li/i;)V"}
    1:1:void fix(com.badlogic.gdx.math.Rectangle):0:0 -> fix
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/i;)V"}
    1:1:com.badlogic.gdx.math.Rectangle getViewport():0:0 -> getViewport
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Li/i;"}
    1:1:com.badlogic.gdx.math.Rectangle peekScissors():0:0 -> peekScissors
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Li/i;"}
    1:1:com.badlogic.gdx.math.Rectangle popScissors():0:0 -> popScissors
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Li/i;"}
    1:1:boolean pushScissors(com.badlogic.gdx.math.Rectangle):0:0 -> pushScissors
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/i;)Z"}
com.badlogic.gdx.scenes.scene2d.utils.Selection -> com.badlogic.gdx.scenes.scene2d.utils.Selection:
    1:1:void addAll(com.badlogic.gdx.utils.Array):0:0 -> addAll
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/b;)V"}
    1:1:com.badlogic.gdx.utils.OrderedSet items():0:0 -> items
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/b0;"}
    1:1:void removeAll(com.badlogic.gdx.utils.Array):0:0 -> removeAll
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/b;)V"}
    1:1:void setAll(com.badlogic.gdx.utils.Array):0:0 -> setAll
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/b;)V"}
    1:1:com.badlogic.gdx.utils.Array toArray():0:0 -> toArray
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/b;"}
    2:2:com.badlogic.gdx.utils.Array toArray(com.badlogic.gdx.utils.Array):0:0 -> toArray
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/b;)Ll/b;"}
com.badlogic.gdx.scenes.scene2d.utils.SpriteDrawable -> com.badlogic.gdx.scenes.scene2d.utils.SpriteDrawable:
    1:1:void <init>(com.badlogic.gdx.graphics.g2d.Sprite):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/g;)V"}
    2:2:void <init>(com.badlogic.gdx.scenes.scene2d.utils.SpriteDrawable):0:0 -> <init>
    1:1:void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float):0:0 -> draw
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/a;FFFF)V"}
    2:2:void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float,float,float,float,float,float):0:0 -> draw
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/a;FFFFFFFFF)V"}
com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable -> com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable:
    1:1:void <init>(com.badlogic.gdx.graphics.g2d.TextureRegion):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/j;)V"}
    2:2:void <init>(com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable):0:0 -> <init>
    3:3:void <init>(com.badlogic.gdx.graphics.Texture):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lf/l;)V"}
    1:1:void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float):0:0 -> draw
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/a;FFFF)V"}
    2:2:void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float,float,float,float,float,float):0:0 -> draw
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/a;FFFFFFFFF)V"}
com.badlogic.gdx.scenes.scene2d.utils.TiledDrawable -> com.badlogic.gdx.scenes.scene2d.utils.TiledDrawable:
    1:1:void <init>():0:0 -> <init>
    2:2:void <init>(com.badlogic.gdx.graphics.g2d.TextureRegion):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/j;)V"}
    3:3:void <init>(com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable):0:0 -> <init>
    1:1:void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float):0:0 -> draw
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/a;FFFF)V"}
    2:2:void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float,float,float,float,float,float):0:0 -> draw
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/a;FFFFFFFFF)V"}
    3:3:void draw(com.badlogic.gdx.graphics.g2d.Batch,com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float,float,int):0:0 -> draw
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/a;Lcom/badlogic/gdx/graphics/g2d/j;FFFFFI)V"}
    1:1:com.badlogic.gdx.scenes.scene2d.utils.Drawable tint(com.badlogic.gdx.graphics.Color):0:0 -> tint
    2:2:com.badlogic.gdx.scenes.scene2d.utils.TiledDrawable tint(com.badlogic.gdx.graphics.Color):0:0 -> tint
com.badlogic.gdx.scenes.scene2d.utils.UIUtils -> com.badlogic.gdx.scenes.scene2d.utils.UIUtils:
    1:1:boolean alt():0:0 -> alt
    2:2:boolean alt(int):0:0 -> alt
    1:1:boolean ctrl():0:0 -> ctrl
    2:2:boolean ctrl(int):0:0 -> ctrl
    1:1:boolean left():0:0 -> left
    2:2:boolean left(int):0:0 -> left
    1:1:boolean middle():0:0 -> middle
    2:2:boolean middle(int):0:0 -> middle
    1:1:boolean right():0:0 -> right
    2:2:boolean right(int):0:0 -> right
    1:1:boolean shift():0:0 -> shift
    2:2:boolean shift(int):0:0 -> shift
com.badlogic.gdx.utils.Align -> l.a:
    1:1:boolean isBottom(int):0:0 -> a
    1:1:boolean isCenterHorizontal(int):0:0 -> b
    1:1:boolean isCenterVertical(int):0:0 -> c
    1:1:boolean isLeft(int):0:0 -> d
    1:1:boolean isRight(int):0:0 -> e
    1:1:boolean isTop(int):0:0 -> f
com.badlogic.gdx.utils.Array -> l.b:
    java.lang.Object[] items -> a
    int size -> b
    boolean ordered -> c
    com.badlogic.gdx.utils.Array$ArrayIterable iterable -> d
    1:1:void <init>():0:0 -> <init>
    2:2:void <init>(int):0:0 -> <init>
    3:3:void <init>(java.lang.Class):0:0 -> <init>
    4:4:void <init>(boolean,int):0:0 -> <init>
    5:5:void <init>(boolean,int,java.lang.Class):0:0 -> <init>
    6:6:void <init>(boolean,java.lang.Object[],int,int):0:0 -> <init>
    7:7:void <init>(java.lang.Object[]):0:0 -> <init>
    1:1:java.lang.Object[] toArray(java.lang.Class):0:0 -> A
    1:1:java.lang.String toString(java.lang.String):0:0 -> B
    1:1:void truncate(int):0:0 -> C
    1:1:com.badlogic.gdx.utils.Array with(java.lang.Object[]):0:0 -> D
      # {"id":"com.android.tools.r8.residualsignature","signature":"([Ljava/lang/Object;)Ll/b;"}
    1:1:void add(java.lang.Object):0:0 -> a
    1:1:void addAll(com.badlogic.gdx.utils.Array):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/b;)V"}
    1:1:void addAll(com.badlogic.gdx.utils.Array,int,int):0:0 -> c
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/b;II)V"}
    1:1:void addAll(java.lang.Object[]):0:0 -> d
    1:1:void addAll(java.lang.Object[],int,int):0:0 -> e
    1:1:boolean equals(java.lang.Object):0:0 -> equals
    1:1:void clear():0:0 -> f
    1:1:boolean contains(java.lang.Object,boolean):0:0 -> g
    1:1:java.lang.Object[] ensureCapacity(int):0:0 -> h
    1:1:int hashCode():0:0 -> hashCode
    1:1:java.lang.Object first():0:0 -> i
    1:1:java.util.Iterator iterator():0:0 -> iterator
    1:1:java.lang.Object get(int):0:0 -> j
    1:1:int indexOf(java.lang.Object,boolean):0:0 -> k
    1:1:void insert(int,java.lang.Object):0:0 -> l
    1:1:boolean isEmpty():0:0 -> m
    1:1:com.badlogic.gdx.utils.Array$ArrayIterator iterator():0:0 -> n
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/b$b;"}
    1:1:java.lang.Object peek():0:0 -> o
    1:1:java.lang.Object pop():0:0 -> p
    1:1:java.lang.Object random():0:0 -> q
    1:1:java.lang.Object removeIndex(int):0:0 -> r
    1:1:void removeRange(int,int):0:0 -> s
    1:1:boolean removeValue(java.lang.Object,boolean):0:0 -> t
    1:1:java.lang.String toString():0:0 -> toString
    1:1:java.lang.Object[] resize(int):0:0 -> u
    1:1:void reverse():0:0 -> v
    1:1:void set(int,java.lang.Object):0:0 -> w
    1:1:void sort():0:0 -> x
    1:1:void sort(java.util.Comparator):0:0 -> y
    1:1:void swap(int,int):0:0 -> z
com.badlogic.gdx.utils.Array$ArrayIterable -> l.b$a:
    com.badlogic.gdx.utils.Array array -> a
    boolean allowRemove -> b
    com.badlogic.gdx.utils.Array$ArrayIterator iterator1 -> c
    com.badlogic.gdx.utils.Array$ArrayIterator iterator2 -> d
    1:1:void <init>(com.badlogic.gdx.utils.Array):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/b;)V"}
    2:2:void <init>(com.badlogic.gdx.utils.Array,boolean):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/b;Z)V"}
    1:1:com.badlogic.gdx.utils.Array$ArrayIterator iterator():0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/b$b;"}
    1:1:java.util.Iterator iterator():0:0 -> iterator
com.badlogic.gdx.utils.Array$ArrayIterator -> l.b$b:
    com.badlogic.gdx.utils.Array array -> a
    boolean allowRemove -> b
    int index -> c
    boolean valid -> d
    1:1:void <init>(com.badlogic.gdx.utils.Array,boolean):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/b;Z)V"}
    1:1:com.badlogic.gdx.utils.Array$ArrayIterator iterator():0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/b$b;"}
    1:1:boolean hasNext():0:0 -> hasNext
    1:1:java.util.Iterator iterator():0:0 -> iterator
    1:1:java.lang.Object next():0:0 -> next
    1:1:void remove():0:0 -> remove
com.badlogic.gdx.utils.ArrayMap -> l.c:
    java.lang.Object[] keys -> a
    java.lang.Object[] values -> b
    int size -> c
    boolean ordered -> d
    com.badlogic.gdx.utils.ArrayMap$Entries entries1 -> e
    com.badlogic.gdx.utils.ArrayMap$Entries entries2 -> f
    1:1:void <init>():0:0 -> <init>
    2:2:void <init>(boolean,int):0:0 -> <init>
    1:1:com.badlogic.gdx.utils.ArrayMap$Entries entries():0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/c$a;"}
    1:1:java.lang.Object get(java.lang.Object):0:0 -> b
    1:1:java.lang.Object get(java.lang.Object,java.lang.Object):0:0 -> c
    1:1:int indexOfKey(java.lang.Object):0:0 -> d
    1:1:int put(java.lang.Object,java.lang.Object):0:0 -> e
    1:1:boolean equals(java.lang.Object):0:0 -> equals
    1:1:void removeIndex(int):0:0 -> f
    1:1:void resize(int):0:0 -> g
    1:1:int hashCode():0:0 -> hashCode
    1:1:java.util.Iterator iterator():0:0 -> iterator
    1:1:java.lang.String toString():0:0 -> toString
com.badlogic.gdx.utils.ArrayMap$Entries -> l.c$a:
    com.badlogic.gdx.utils.ArrayMap map -> a
    com.badlogic.gdx.utils.ObjectMap$Entry entry -> b
    int index -> c
    boolean valid -> d
    1:1:void <init>(com.badlogic.gdx.utils.ArrayMap):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/c;)V"}
    1:1:com.badlogic.gdx.utils.ObjectMap$Entry next():0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/y$b;"}
    1:1:boolean hasNext():0:0 -> hasNext
    1:1:java.util.Iterator iterator():0:0 -> iterator
    1:1:java.lang.Object next():0:0 -> next
    1:1:void remove():0:0 -> remove
com.badlogic.gdx.utils.BufferUtils -> com.badlogic.gdx.utils.BufferUtils:
    com.badlogic.gdx.utils.Array unsafeBuffers -> a
    int allocatedUnsafe -> b
    1:1:void copy(float[],java.nio.Buffer,int,int):0:0 -> a
    1:1:void disposeUnsafeByteBuffer(java.nio.ByteBuffer):0:0 -> b
    1:1:java.nio.ByteBuffer newByteBuffer(int):0:0 -> c
    1:1:java.nio.FloatBuffer newFloatBuffer(int):0:0 -> d
    1:1:java.nio.IntBuffer newIntBuffer(int):0:0 -> e
    1:1:java.nio.ByteBuffer newUnsafeByteBuffer(int):0:0 -> f
com.badlogic.gdx.utils.Clipboard -> l.d:
    void setContents(java.lang.String) -> a
    java.lang.String getContents() -> b
com.badlogic.gdx.utils.Collections -> l.e:
    boolean allocateIterators -> a
com.badlogic.gdx.utils.ComparableTimSort -> l.f:
    int minGallop -> b
    java.lang.Object[] tmp -> c
    int tmpCount -> d
    int stackSize -> e
    int[] runBase -> f
    int[] runLen -> g
    1:1:void <init>():0:0 -> <init>
    1:1:void binarySort(java.lang.Object[],int,int,int):0:0 -> a
    1:1:int countRunAndMakeAscending(java.lang.Object[],int,int):0:0 -> b
    1:1:void doSort(java.lang.Object[],int,int):0:0 -> c
    1:1:java.lang.Object[] ensureCapacity(int):0:0 -> d
    1:1:int gallopLeft(java.lang.Comparable,java.lang.Object[],int,int,int):0:0 -> e
    1:1:int gallopRight(java.lang.Comparable,java.lang.Object[],int,int,int):0:0 -> f
    1:1:void mergeAt(int):0:0 -> g
    1:1:void mergeCollapse():0:0 -> h
    1:1:void mergeForceCollapse():0:0 -> i
    1:1:void mergeHi(int,int,int,int):0:0 -> j
    1:1:void mergeLo(int,int,int,int):0:0 -> k
    1:1:int minRunLength(int):0:0 -> l
    1:1:void pushRun(int,int):0:0 -> m
    1:1:void rangeCheck(int,int,int):0:0 -> n
    1:1:void reverseRange(java.lang.Object[],int,int):0:0 -> o
com.badlogic.gdx.utils.DelayedRemovalArray -> l.g:
    int iterating -> e
    com.badlogic.gdx.utils.IntArray remove -> f
    int clear -> g
    1:1:void <init>(int):0:0 -> <init>
    1:1:void truncate(int):0:0 -> C
    1:1:void begin():0:0 -> E
    1:1:void end():0:0 -> F
    1:1:void remove(int):0:0 -> G
    1:1:void clear():0:0 -> f
    1:1:void insert(int,java.lang.Object):0:0 -> l
    1:1:java.lang.Object pop():0:0 -> p
    1:1:java.lang.Object removeIndex(int):0:0 -> r
    1:1:void removeRange(int,int):0:0 -> s
    1:1:boolean removeValue(java.lang.Object,boolean):0:0 -> t
    1:1:void reverse():0:0 -> v
    1:1:void set(int,java.lang.Object):0:0 -> w
    1:1:void sort():0:0 -> x
    1:1:void sort(java.util.Comparator):0:0 -> y
com.badlogic.gdx.utils.Disposable -> l.h:
    void dispose() -> dispose
com.badlogic.gdx.utils.FloatArray -> l.i:
    float[] items -> a
    int size -> b
    boolean ordered -> c
    1:1:void <init>():0:0 -> <init>
    2:2:void <init>(boolean,int):0:0 -> <init>
    1:1:void add(float):0:0 -> a
    1:1:void addAll(com.badlogic.gdx.utils.FloatArray):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/i;)V"}
    1:1:void addAll(com.badlogic.gdx.utils.FloatArray,int,int):0:0 -> c
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/i;II)V"}
    1:1:void addAll(float[],int,int):0:0 -> d
    1:1:void clear():0:0 -> e
    1:1:boolean equals(java.lang.Object):0:0 -> equals
    1:1:float[] ensureCapacity(int):0:0 -> f
    1:1:float first():0:0 -> g
    1:1:float get(int):0:0 -> h
    1:1:int hashCode():0:0 -> hashCode
    1:1:boolean notEmpty():0:0 -> i
    1:1:void removeRange(int,int):0:0 -> j
    1:1:float[] resize(int):0:0 -> k
    1:1:void truncate(int):0:0 -> l
    1:1:java.lang.String toString():0:0 -> toString
com.badlogic.gdx.utils.GdxNativesLoader -> l.j:
    boolean disableNativesLoading -> a
    boolean nativesLoaded -> b
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void load():0:0 -> a
com.badlogic.gdx.utils.GdxRuntimeException -> l.k:
    1:1:void <init>(java.lang.String):0:0 -> <init>
    2:2:void <init>(java.lang.String,java.lang.Throwable):0:0 -> <init>
com.badlogic.gdx.utils.IntArray -> l.l:
    int[] items -> a
    int size -> b
    boolean ordered -> c
    1:1:void <init>():0:0 -> <init>
    2:2:void <init>(int):0:0 -> <init>
    3:3:void <init>(boolean,int):0:0 -> <init>
    1:1:void add(int):0:0 -> a
    1:1:void add(int,int):0:0 -> b
    1:1:void clear():0:0 -> c
    1:1:int[] ensureCapacity(int):0:0 -> d
    1:1:int get(int):0:0 -> e
    1:1:boolean equals(java.lang.Object):0:0 -> equals
    1:1:void insert(int,int):0:0 -> f
    1:1:int peek():0:0 -> g
    1:1:int pop():0:0 -> h
    1:1:int hashCode():0:0 -> hashCode
    1:1:int[] resize(int):0:0 -> i
    1:1:void set(int,int):0:0 -> j
    1:1:java.lang.String toString():0:0 -> toString
com.badlogic.gdx.utils.IntIntMap -> l.m:
    int size -> a
    int[] keyTable -> b
    int[] valueTable -> c
    int zeroValue -> d
    boolean hasZeroValue -> e
    float loadFactor -> f
    int threshold -> g
    int shift -> h
    int mask -> i
    com.badlogic.gdx.utils.IntIntMap$Entries entries1 -> j
    com.badlogic.gdx.utils.IntIntMap$Entries entries2 -> k
    1:1:void <init>():0:0 -> <init>
    2:2:void <init>(int,float):0:0 -> <init>
    1:1:boolean containsKey(int):0:0 -> a
    1:1:com.badlogic.gdx.utils.IntIntMap$Entries entries():0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/m$a;"}
    1:1:int get(int,int):0:0 -> c
    1:1:int locateKey(int):0:0 -> d
    1:1:int place(int):0:0 -> e
    1:1:boolean equals(java.lang.Object):0:0 -> equals
    1:1:void put(int,int):0:0 -> f
    1:1:void putResize(int,int):0:0 -> g
    1:1:int remove(int,int):0:0 -> h
    1:1:int hashCode():0:0 -> hashCode
    1:1:void resize(int):0:0 -> i
    1:1:java.util.Iterator iterator():0:0 -> iterator
    1:1:java.lang.String toString():0:0 -> toString
com.badlogic.gdx.utils.IntIntMap$Entries -> l.m$a:
    com.badlogic.gdx.utils.IntIntMap$Entry entry -> f
    1:1:void <init>(com.badlogic.gdx.utils.IntIntMap):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/m;)V"}
    1:1:void reset():0:0 -> b
    1:1:com.badlogic.gdx.utils.IntIntMap$Entry next():0:0 -> c
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/m$b;"}
    1:1:boolean hasNext():0:0 -> hasNext
    1:1:java.util.Iterator iterator():0:0 -> iterator
    1:1:java.lang.Object next():0:0 -> next
    1:1:void remove():0:0 -> remove
com.badlogic.gdx.utils.IntIntMap$Entry -> l.m$b:
    int key -> a
    int value -> b
    void <init>() -> <init>
    1:1:java.lang.String toString():0:0 -> toString
com.badlogic.gdx.utils.IntIntMap$MapIterator -> l.m$c:
    boolean hasNext -> a
    com.badlogic.gdx.utils.IntIntMap map -> b
    int nextIndex -> c
    int currentIndex -> d
    boolean valid -> e
    1:1:void <init>(com.badlogic.gdx.utils.IntIntMap):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/m;)V"}
    1:1:void findNextIndex():0:0 -> a
    1:1:void reset():0:0 -> b
    1:1:void remove():0:0 -> remove
com.badlogic.gdx.utils.IntMap -> l.n:
    int size -> a
    int[] keyTable -> b
    java.lang.Object[] valueTable -> c
    java.lang.Object zeroValue -> d
    boolean hasZeroValue -> e
    float loadFactor -> f
    int threshold -> g
    int shift -> h
    int mask -> i
    com.badlogic.gdx.utils.IntMap$Entries entries1 -> j
    com.badlogic.gdx.utils.IntMap$Entries entries2 -> k
    1:1:void <init>():0:0 -> <init>
    2:2:void <init>(int,float):0:0 -> <init>
    1:1:void ensureCapacity(int):0:0 -> a
    1:1:com.badlogic.gdx.utils.IntMap$Entries entries():0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/n$a;"}
    1:1:java.lang.Object get(int):0:0 -> c
    1:1:java.lang.Object get(int,java.lang.Object):0:0 -> d
    1:1:int locateKey(int):0:0 -> e
    1:1:boolean equals(java.lang.Object):0:0 -> equals
    1:1:int place(int):0:0 -> f
    1:1:java.lang.Object put(int,java.lang.Object):0:0 -> g
    1:1:void putAll(com.badlogic.gdx.utils.IntMap):0:0 -> h
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/n;)V"}
    1:1:int hashCode():0:0 -> hashCode
    1:1:void putResize(int,java.lang.Object):0:0 -> i
    1:1:java.util.Iterator iterator():0:0 -> iterator
    1:1:java.lang.Object remove(int):0:0 -> j
    1:1:void resize(int):0:0 -> k
    1:1:java.lang.String toString():0:0 -> toString
com.badlogic.gdx.utils.IntMap$Entries -> l.n$a:
    com.badlogic.gdx.utils.IntMap$Entry entry -> f
    1:1:void <init>(com.badlogic.gdx.utils.IntMap):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/n;)V"}
    1:1:void reset():0:0 -> b
    1:1:com.badlogic.gdx.utils.IntMap$Entry next():0:0 -> c
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/n$b;"}
    1:1:boolean hasNext():0:0 -> hasNext
    1:1:java.util.Iterator iterator():0:0 -> iterator
    1:1:java.lang.Object next():0:0 -> next
    1:1:void remove():0:0 -> remove
com.badlogic.gdx.utils.IntMap$Entry -> l.n$b:
    int key -> a
    java.lang.Object value -> b
    void <init>() -> <init>
    1:1:java.lang.String toString():0:0 -> toString
com.badlogic.gdx.utils.IntMap$MapIterator -> l.n$c:
    boolean hasNext -> a
    com.badlogic.gdx.utils.IntMap map -> b
    int nextIndex -> c
    int currentIndex -> d
    boolean valid -> e
    1:1:void <init>(com.badlogic.gdx.utils.IntMap):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/n;)V"}
    1:1:void findNextIndex():0:0 -> a
    1:1:void reset():0:0 -> b
    1:1:void remove():0:0 -> remove
com.badlogic.gdx.utils.IntSet -> l.o:
    int size -> a
    int[] keyTable -> b
    boolean hasZeroValue -> c
    float loadFactor -> d
    int threshold -> e
    int shift -> f
    int mask -> g
    1:1:void <init>():0:0 -> <init>
    2:2:void <init>(int,float):0:0 -> <init>
    1:1:boolean add(int):0:0 -> a
    1:1:void addResize(int):0:0 -> b
    1:1:boolean contains(int):0:0 -> c
    1:1:int locateKey(int):0:0 -> d
    1:1:int place(int):0:0 -> e
    1:1:boolean equals(java.lang.Object):0:0 -> equals
    1:1:boolean remove(int):0:0 -> f
    1:1:void resize(int):0:0 -> g
    1:1:int hashCode():0:0 -> hashCode
    1:1:java.lang.String toString():0:0 -> toString
com.badlogic.gdx.utils.Json -> l.p:
    java.lang.String typeName -> a
    boolean usePrototypes -> b
    com.badlogic.gdx.utils.JsonWriter$OutputType outputType -> c
    boolean ignoreUnknownFields -> d
    boolean ignoreDeprecated -> e
    boolean readDeprecated -> f
    boolean enumNames -> g
    boolean sortFields -> h
    com.badlogic.gdx.utils.Json$Serializer defaultSerializer -> i
    com.badlogic.gdx.utils.ObjectMap typeToFields -> j
    com.badlogic.gdx.utils.ObjectMap tagToClass -> k
    com.badlogic.gdx.utils.ObjectMap classToTag -> l
    com.badlogic.gdx.utils.ObjectMap classToSerializer -> m
    com.badlogic.gdx.utils.ObjectMap classToDefaultValues -> n
    java.lang.Object[] equals1 -> o
    java.lang.Object[] equals2 -> p
    1:1:void <init>():0:0 -> <init>
    1:1:void addClassTag(java.lang.String,java.lang.Class):0:0 -> a
    1:1:java.lang.String convertToString(java.lang.Enum):0:0 -> b
    1:1:void copyFields(java.lang.Object,java.lang.Object):0:0 -> c
    1:1:java.lang.Object fromJson(java.lang.Class,com.badlogic.gdx.files.FileHandle):0:0 -> d
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/Class;Le/a;)Ljava/lang/Object;"}
    1:1:java.lang.Class getClass(java.lang.String):0:0 -> e
    1:1:com.badlogic.gdx.utils.OrderedMap getFields(java.lang.Class):0:0 -> f
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/Class;)Ll/a0;"}
    boolean ignoreUnknownField(java.lang.Class,java.lang.String) -> g
    1:1:java.lang.Object newInstance(java.lang.Class):0:0 -> h
    1:1:void readFields(java.lang.Object,com.badlogic.gdx.utils.JsonValue):0:0 -> i
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/Object;Ll/r;)V"}
    1:1:java.lang.Object readValue(java.lang.Class,java.lang.Class,com.badlogic.gdx.utils.JsonValue):0:0 -> j
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/Class;Ljava/lang/Class;Ll/r;)Ljava/lang/Object;"}
    1:1:java.lang.Object readValue(java.lang.Class,com.badlogic.gdx.utils.JsonValue):0:0 -> k
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/Class;Ll/r;)Ljava/lang/Object;"}
    1:1:java.lang.Object readValue(java.lang.String,java.lang.Class,java.lang.Object,com.badlogic.gdx.utils.JsonValue):0:0 -> l
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;Ljava/lang/Class;Ljava/lang/Object;Ll/r;)Ljava/lang/Object;"}
    1:1:java.lang.Object readValue(java.lang.String,java.lang.Class,com.badlogic.gdx.utils.JsonValue):0:0 -> m
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;Ljava/lang/Class;Ll/r;)Ljava/lang/Object;"}
    1:1:void setSerializer(java.lang.Class,com.badlogic.gdx.utils.Json$Serializer):0:0 -> n
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/Class;Ll/p$d;)V"}
    1:1:void setTypeName(java.lang.String):0:0 -> o
    1:1:void setUsePrototypes(boolean):0:0 -> p
    1:1:void sortFields(java.lang.Class,com.badlogic.gdx.utils.Array):0:0 -> q
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/Class;Ll/b;)V"}
com.badlogic.gdx.utils.Json$FieldMetadata -> l.p$a:
    com.badlogic.gdx.utils.reflect.Field field -> a
    java.lang.Class elementType -> b
    boolean deprecated -> c
    1:1:void <init>(com.badlogic.gdx.utils.reflect.Field):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lm/d;)V"}
com.badlogic.gdx.utils.Json$ReadOnlySerializer -> l.p$b:
    void <init>() -> <init>
com.badlogic.gdx.utils.Json$Serializable -> l.p$c:
    void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue) -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/p;Ll/r;)V"}
com.badlogic.gdx.utils.Json$Serializer -> l.p$d:
    java.lang.Object read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue,java.lang.Class) -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/p;Ll/r;Ljava/lang/Class;)Ljava/lang/Object;"}
com.badlogic.gdx.utils.JsonReader -> l.q:
    com.badlogic.gdx.utils.Array elements -> a
    com.badlogic.gdx.utils.Array lastChild -> b
    com.badlogic.gdx.utils.JsonValue root -> c
    com.badlogic.gdx.utils.JsonValue current -> d
    boolean stop -> e
    byte[] _json_actions -> f
    short[] _json_key_offsets -> g
    char[] _json_trans_keys -> h
    byte[] _json_single_lengths -> i
    byte[] _json_range_lengths -> j
    short[] _json_index_offsets -> k
    byte[] _json_indicies -> l
    byte[] _json_trans_targs -> m
    byte[] _json_trans_actions -> n
    byte[] _json_eof_actions -> o
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>():0:0 -> <init>
    1:1:void addChild(java.lang.String,com.badlogic.gdx.utils.JsonValue):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;Ll/r;)V"}
    1:1:void bool(java.lang.String,boolean):0:0 -> b
    1:1:byte[] init__json_actions_0():0:0 -> c
    1:1:byte[] init__json_eof_actions_0():0:0 -> d
    1:1:short[] init__json_index_offsets_0():0:0 -> e
    1:1:byte[] init__json_indicies_0():0:0 -> f
    1:1:short[] init__json_key_offsets_0():0:0 -> g
    1:1:byte[] init__json_range_lengths_0():0:0 -> h
    1:1:byte[] init__json_single_lengths_0():0:0 -> i
    1:1:byte[] init__json_trans_actions_0():0:0 -> j
    1:1:char[] init__json_trans_keys_0():0:0 -> k
    1:1:byte[] init__json_trans_targs_0():0:0 -> l
    1:1:void number(java.lang.String,double,java.lang.String):0:0 -> m
    1:1:void number(java.lang.String,long,java.lang.String):0:0 -> n
    1:1:com.badlogic.gdx.utils.JsonValue parse(com.badlogic.gdx.files.FileHandle):0:0 -> o
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Le/a;)Ll/r;"}
    1:1:com.badlogic.gdx.utils.JsonValue parse(java.io.Reader):0:0 -> p
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/io/Reader;)Ll/r;"}
    1:1:com.badlogic.gdx.utils.JsonValue parse(char[],int,int):0:0 -> q
      # {"id":"com.android.tools.r8.residualsignature","signature":"([CII)Ll/r;"}
    1:1:void pop():0:0 -> r
    1:1:void startArray(java.lang.String):0:0 -> s
    1:1:void startObject(java.lang.String):0:0 -> t
    1:1:void string(java.lang.String,java.lang.String):0:0 -> u
    1:1:java.lang.String unescape(java.lang.String):0:0 -> v
com.badlogic.gdx.utils.JsonValue -> l.r:
    com.badlogic.gdx.utils.JsonValue$ValueType type -> a
    java.lang.String stringValue -> b
    double doubleValue -> c
    long longValue -> d
    java.lang.String name -> e
    com.badlogic.gdx.utils.JsonValue child -> f
    com.badlogic.gdx.utils.JsonValue parent -> g
    com.badlogic.gdx.utils.JsonValue next -> h
    com.badlogic.gdx.utils.JsonValue prev -> i
    int size -> j
    1:1:void <init>(double,java.lang.String):0:0 -> <init>
    2:2:void <init>(long,java.lang.String):0:0 -> <init>
    3:3:void <init>(java.lang.String):0:0 -> <init>
    4:4:void <init>(com.badlogic.gdx.utils.JsonValue$ValueType):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/r$d;)V"}
    5:5:void <init>(boolean):0:0 -> <init>
    1:1:java.lang.String prettyPrint(com.badlogic.gdx.utils.JsonValue$PrettyPrintSettings):0:0 -> A
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/r$c;)Ljava/lang/String;"}
    1:1:java.lang.String prettyPrint(com.badlogic.gdx.utils.JsonWriter$OutputType,int):0:0 -> B
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/t;I)Ljava/lang/String;"}
    1:1:void prettyPrint(com.badlogic.gdx.utils.JsonValue,com.badlogic.gdx.utils.StringBuilder,int,com.badlogic.gdx.utils.JsonValue$PrettyPrintSettings):0:0 -> C
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/r;Ll/n0;ILl/r$c;)V"}
    1:1:void set(double,java.lang.String):0:0 -> D
    1:1:void set(long,java.lang.String):0:0 -> E
    1:1:void set(java.lang.String):0:0 -> F
    1:1:void set(boolean):0:0 -> G
    1:1:void setName(java.lang.String):0:0 -> H
    1:1:java.lang.String trace():0:0 -> I
    1:1:boolean asBoolean():0:0 -> a
    1:1:byte asByte():0:0 -> b
    1:1:double asDouble():0:0 -> c
    1:1:float asFloat():0:0 -> d
    1:1:int asInt():0:0 -> e
    1:1:long asLong():0:0 -> f
    1:1:short asShort():0:0 -> g
    1:1:java.lang.String asString():0:0 -> h
    1:1:com.badlogic.gdx.utils.JsonValue get(java.lang.String):0:0 -> i
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;)Ll/r;"}
    1:1:java.util.Iterator iterator():0:0 -> iterator
    1:1:com.badlogic.gdx.utils.JsonValue getChild(java.lang.String):0:0 -> j
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;)Ll/r;"}
    1:1:java.lang.String getString(java.lang.String,java.lang.String):0:0 -> k
    1:1:boolean has(java.lang.String):0:0 -> l
    1:1:void indent(int,com.badlogic.gdx.utils.StringBuilder):0:0 -> m
      # {"id":"com.android.tools.r8.residualsignature","signature":"(ILl/n0;)V"}
    1:1:boolean isArray():0:0 -> n
    1:1:boolean isBoolean():0:0 -> o
    1:1:boolean isDouble():0:0 -> p
    1:1:boolean isFlat(com.badlogic.gdx.utils.JsonValue):0:0 -> q
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/r;)Z"}
    1:1:boolean isLong():0:0 -> r
    1:1:boolean isNull():0:0 -> s
    1:1:boolean isNumber():0:0 -> t
    1:1:java.lang.String toString():0:0 -> toString
    1:1:boolean isNumeric(com.badlogic.gdx.utils.JsonValue):0:0 -> u
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/r;)Z"}
    1:1:boolean isObject():0:0 -> v
    1:1:boolean isString():0:0 -> w
    1:1:boolean isValue():0:0 -> x
    1:1:com.badlogic.gdx.utils.JsonValue$JsonIterator iterator():0:0 -> y
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/r$b;"}
    1:1:java.lang.String name():0:0 -> z
com.badlogic.gdx.utils.JsonValue$1 -> l.r$a:
    int[] $SwitchMap$com$badlogic$gdx$utils$JsonValue$ValueType -> a
    1:1:void <clinit>():0:0 -> <clinit>
com.badlogic.gdx.utils.JsonValue$JsonIterator -> l.r$b:
    com.badlogic.gdx.utils.JsonValue entry -> a
    com.badlogic.gdx.utils.JsonValue current -> b
    com.badlogic.gdx.utils.JsonValue this$0 -> c
    1:1:void <init>(com.badlogic.gdx.utils.JsonValue):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/r;)V"}
    1:1:com.badlogic.gdx.utils.JsonValue next():0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/r;"}
    1:1:boolean hasNext():0:0 -> hasNext
    1:1:java.util.Iterator iterator():0:0 -> iterator
    1:1:java.lang.Object next():0:0 -> next
    1:1:void remove():0:0 -> remove
com.badlogic.gdx.utils.JsonValue$PrettyPrintSettings -> l.r$c:
    com.badlogic.gdx.utils.JsonWriter$OutputType outputType -> a
    int singleLineColumns -> b
    boolean wrapNumericArrays -> c
    void <init>() -> <init>
com.badlogic.gdx.utils.JsonValue$ValueType -> l.r$d:
    com.badlogic.gdx.utils.JsonValue$ValueType object -> a
    com.badlogic.gdx.utils.JsonValue$ValueType array -> b
    com.badlogic.gdx.utils.JsonValue$ValueType stringValue -> c
    com.badlogic.gdx.utils.JsonValue$ValueType doubleValue -> d
    com.badlogic.gdx.utils.JsonValue$ValueType longValue -> e
    com.badlogic.gdx.utils.JsonValue$ValueType booleanValue -> f
    com.badlogic.gdx.utils.JsonValue$ValueType nullValue -> g
    com.badlogic.gdx.utils.JsonValue$ValueType[] $VALUES -> h
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>(java.lang.String,int):0:0 -> <init>
    1:1:com.badlogic.gdx.utils.JsonValue$ValueType valueOf(java.lang.String):0:0 -> valueOf
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;)Ll/r$d;"}
    1:1:com.badlogic.gdx.utils.JsonValue$ValueType[] values():0:0 -> values
      # {"id":"com.android.tools.r8.residualsignature","signature":"()[Ll/r$d;"}
com.badlogic.gdx.utils.JsonWriter$1 -> l.s:
    int[] $SwitchMap$com$badlogic$gdx$utils$JsonWriter$OutputType -> a
    1:1:void <clinit>():0:0 -> <clinit>
com.badlogic.gdx.utils.JsonWriter$OutputType -> l.t:
    com.badlogic.gdx.utils.JsonWriter$OutputType json -> a
    com.badlogic.gdx.utils.JsonWriter$OutputType javascript -> b
    com.badlogic.gdx.utils.JsonWriter$OutputType minimal -> c
    java.util.regex.Pattern javascriptPattern -> d
    java.util.regex.Pattern minimalNamePattern -> e
    java.util.regex.Pattern minimalValuePattern -> f
    com.badlogic.gdx.utils.JsonWriter$OutputType[] $VALUES -> g
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>(java.lang.String,int):0:0 -> <init>
    1:1:java.lang.String quoteName(java.lang.String):0:0 -> a
    1:1:java.lang.String quoteValue(java.lang.Object):0:0 -> b
    1:1:com.badlogic.gdx.utils.JsonWriter$OutputType valueOf(java.lang.String):0:0 -> valueOf
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;)Ll/t;"}
    1:1:com.badlogic.gdx.utils.JsonWriter$OutputType[] values():0:0 -> values
      # {"id":"com.android.tools.r8.residualsignature","signature":"()[Ll/t;"}
com.badlogic.gdx.utils.LongMap -> l.u:
    int size -> a
    long[] keyTable -> b
    java.lang.Object[] valueTable -> c
    java.lang.Object zeroValue -> d
    boolean hasZeroValue -> e
    float loadFactor -> f
    int threshold -> g
    int shift -> h
    int mask -> i
    com.badlogic.gdx.utils.LongMap$Entries entries1 -> j
    com.badlogic.gdx.utils.LongMap$Entries entries2 -> k
    1:1:void <init>():0:0 -> <init>
    2:2:void <init>(int,float):0:0 -> <init>
    1:1:com.badlogic.gdx.utils.LongMap$Entries entries():0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/u$a;"}
    1:1:java.lang.Object get(long):0:0 -> b
    1:1:java.lang.Object get(long,java.lang.Object):0:0 -> c
    1:1:int locateKey(long):0:0 -> d
    1:1:int place(long):0:0 -> e
    1:1:boolean equals(java.lang.Object):0:0 -> equals
    1:1:java.lang.Object put(long,java.lang.Object):0:0 -> f
    1:1:void putResize(long,java.lang.Object):0:0 -> g
    1:1:void resize(int):0:0 -> h
    1:1:int hashCode():0:0 -> hashCode
    1:1:java.util.Iterator iterator():0:0 -> iterator
    1:1:java.lang.String toString():0:0 -> toString
com.badlogic.gdx.utils.LongMap$Entries -> l.u$a:
    com.badlogic.gdx.utils.LongMap$Entry entry -> f
    1:1:void <init>(com.badlogic.gdx.utils.LongMap):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/u;)V"}
    1:1:void reset():0:0 -> b
    1:1:com.badlogic.gdx.utils.LongMap$Entry next():0:0 -> c
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/u$b;"}
    1:1:boolean hasNext():0:0 -> hasNext
    1:1:java.util.Iterator iterator():0:0 -> iterator
    1:1:java.lang.Object next():0:0 -> next
    1:1:void remove():0:0 -> remove
com.badlogic.gdx.utils.LongMap$Entry -> l.u$b:
    long key -> a
    java.lang.Object value -> b
    void <init>() -> <init>
    1:1:java.lang.String toString():0:0 -> toString
com.badlogic.gdx.utils.LongMap$MapIterator -> l.u$c:
    boolean hasNext -> a
    com.badlogic.gdx.utils.LongMap map -> b
    int nextIndex -> c
    int currentIndex -> d
    boolean valid -> e
    1:1:void <init>(com.badlogic.gdx.utils.LongMap):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/u;)V"}
    1:1:void findNextIndex():0:0 -> a
    1:1:void reset():0:0 -> b
    1:1:void remove():0:0 -> remove
com.badlogic.gdx.utils.NumberUtils -> l.v:
    1:1:int floatToIntBits(float):0:0 -> a
    1:1:int floatToIntColor(float):0:0 -> b
    1:1:int floatToRawIntBits(float):0:0 -> c
    1:1:float intToFloatColor(int):0:0 -> d
com.badlogic.gdx.utils.ObjectFloatMap -> l.w:
    int size -> a
    java.lang.Object[] keyTable -> b
    float[] valueTable -> c
    float loadFactor -> d
    int threshold -> e
    int shift -> f
    int mask -> g
    com.badlogic.gdx.utils.ObjectFloatMap$Entries entries1 -> h
    com.badlogic.gdx.utils.ObjectFloatMap$Entries entries2 -> i
    1:1:void <init>():0:0 -> <init>
    2:2:void <init>(int,float):0:0 -> <init>
    1:1:boolean containsKey(java.lang.Object):0:0 -> a
    1:1:com.badlogic.gdx.utils.ObjectFloatMap$Entries entries():0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/w$a;"}
    1:1:float get(java.lang.Object,float):0:0 -> c
    1:1:com.badlogic.gdx.utils.ObjectFloatMap$Entries iterator():0:0 -> d
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/w$a;"}
    1:1:int locateKey(java.lang.Object):0:0 -> e
    1:1:boolean equals(java.lang.Object):0:0 -> equals
    1:1:int place(java.lang.Object):0:0 -> f
    1:1:void put(java.lang.Object,float):0:0 -> g
    1:1:void putResize(java.lang.Object,float):0:0 -> h
    1:1:int hashCode():0:0 -> hashCode
    1:1:void resize(int):0:0 -> i
    1:1:java.util.Iterator iterator():0:0 -> iterator
    1:1:java.lang.String toString(java.lang.String,boolean):0:0 -> j
    1:1:java.lang.String toString():0:0 -> toString
com.badlogic.gdx.utils.ObjectFloatMap$Entries -> l.w$a:
    com.badlogic.gdx.utils.ObjectFloatMap$Entry entry -> f
    1:1:void <init>(com.badlogic.gdx.utils.ObjectFloatMap):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/w;)V"}
    1:1:void reset():0:0 -> b
    1:1:com.badlogic.gdx.utils.ObjectFloatMap$Entries iterator():0:0 -> c
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/w$a;"}
    1:1:com.badlogic.gdx.utils.ObjectFloatMap$Entry next():0:0 -> d
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/w$b;"}
    1:1:boolean hasNext():0:0 -> hasNext
    1:1:java.util.Iterator iterator():0:0 -> iterator
    1:1:java.lang.Object next():0:0 -> next
    1:1:void remove():0:0 -> remove
com.badlogic.gdx.utils.ObjectFloatMap$Entry -> l.w$b:
    java.lang.Object key -> a
    float value -> b
    void <init>() -> <init>
    1:1:java.lang.String toString():0:0 -> toString
com.badlogic.gdx.utils.ObjectFloatMap$MapIterator -> l.w$c:
    boolean hasNext -> a
    com.badlogic.gdx.utils.ObjectFloatMap map -> b
    int nextIndex -> c
    int currentIndex -> d
    boolean valid -> e
    1:1:void <init>(com.badlogic.gdx.utils.ObjectFloatMap):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/w;)V"}
    1:1:void findNextIndex():0:0 -> a
    1:1:void reset():0:0 -> b
    1:1:void remove():0:0 -> remove
com.badlogic.gdx.utils.ObjectIntMap -> l.x:
    int size -> a
    java.lang.Object[] keyTable -> b
    int[] valueTable -> c
    float loadFactor -> d
    int threshold -> e
    int shift -> f
    int mask -> g
    com.badlogic.gdx.utils.ObjectIntMap$Entries entries1 -> h
    com.badlogic.gdx.utils.ObjectIntMap$Entries entries2 -> i
    1:1:void <init>():0:0 -> <init>
    2:2:void <init>(int,float):0:0 -> <init>
    1:1:boolean containsKey(java.lang.Object):0:0 -> a
    1:1:com.badlogic.gdx.utils.ObjectIntMap$Entries entries():0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/x$a;"}
    1:1:int get(java.lang.Object,int):0:0 -> c
    1:1:com.badlogic.gdx.utils.ObjectIntMap$Entries iterator():0:0 -> d
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/x$a;"}
    1:1:int locateKey(java.lang.Object):0:0 -> e
    1:1:boolean equals(java.lang.Object):0:0 -> equals
    1:1:int place(java.lang.Object):0:0 -> f
    1:1:void put(java.lang.Object,int):0:0 -> g
    1:1:void putResize(java.lang.Object,int):0:0 -> h
    1:1:int hashCode():0:0 -> hashCode
    1:1:void resize(int):0:0 -> i
    1:1:java.util.Iterator iterator():0:0 -> iterator
    1:1:java.lang.String toString(java.lang.String,boolean):0:0 -> j
    1:1:java.lang.String toString():0:0 -> toString
com.badlogic.gdx.utils.ObjectIntMap$Entries -> l.x$a:
    com.badlogic.gdx.utils.ObjectIntMap$Entry entry -> f
    1:1:void <init>(com.badlogic.gdx.utils.ObjectIntMap):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/x;)V"}
    1:1:void reset():0:0 -> b
    1:1:com.badlogic.gdx.utils.ObjectIntMap$Entries iterator():0:0 -> c
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/x$a;"}
    1:1:com.badlogic.gdx.utils.ObjectIntMap$Entry next():0:0 -> d
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/x$b;"}
    1:1:boolean hasNext():0:0 -> hasNext
    1:1:java.util.Iterator iterator():0:0 -> iterator
    1:1:java.lang.Object next():0:0 -> next
    1:1:void remove():0:0 -> remove
com.badlogic.gdx.utils.ObjectIntMap$Entry -> l.x$b:
    java.lang.Object key -> a
    int value -> b
    void <init>() -> <init>
    1:1:java.lang.String toString():0:0 -> toString
com.badlogic.gdx.utils.ObjectIntMap$MapIterator -> l.x$c:
    boolean hasNext -> a
    com.badlogic.gdx.utils.ObjectIntMap map -> b
    int nextIndex -> c
    int currentIndex -> d
    boolean valid -> e
    1:1:void <init>(com.badlogic.gdx.utils.ObjectIntMap):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/x;)V"}
    1:1:void findNextIndex():0:0 -> a
    1:1:void reset():0:0 -> b
    1:1:void remove():0:0 -> remove
com.badlogic.gdx.utils.ObjectMap -> l.y:
    int size -> a
    java.lang.Object[] keyTable -> b
    java.lang.Object[] valueTable -> c
    float loadFactor -> d
    int threshold -> e
    int shift -> f
    int mask -> g
    com.badlogic.gdx.utils.ObjectMap$Entries entries1 -> h
    com.badlogic.gdx.utils.ObjectMap$Entries entries2 -> i
    com.badlogic.gdx.utils.ObjectMap$Values values1 -> j
    com.badlogic.gdx.utils.ObjectMap$Values values2 -> k
    com.badlogic.gdx.utils.ObjectMap$Keys keys1 -> l
    com.badlogic.gdx.utils.ObjectMap$Keys keys2 -> m
    java.lang.Object dummy -> n
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>():0:0 -> <init>
    2:2:void <init>(int):0:0 -> <init>
    3:3:void <init>(int,float):0:0 -> <init>
    1:1:void clear():0:0 -> a
    1:1:void clear(int):0:0 -> b
    1:1:boolean containsKey(java.lang.Object):0:0 -> c
    1:1:com.badlogic.gdx.utils.ObjectMap$Entries entries():0:0 -> d
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/y$a;"}
    1:1:java.lang.Object findKey(java.lang.Object,boolean):0:0 -> e
    1:1:boolean equals(java.lang.Object):0:0 -> equals
    1:1:java.lang.Object get(java.lang.Object):0:0 -> f
    1:1:java.lang.Object get(java.lang.Object,java.lang.Object):0:0 -> g
    1:1:com.badlogic.gdx.utils.ObjectMap$Entries iterator():0:0 -> h
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/y$a;"}
    1:1:int hashCode():0:0 -> hashCode
    1:1:com.badlogic.gdx.utils.ObjectMap$Keys keys():0:0 -> i
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/y$c;"}
    1:1:java.util.Iterator iterator():0:0 -> iterator
    1:1:int locateKey(java.lang.Object):0:0 -> j
    1:1:int place(java.lang.Object):0:0 -> k
    1:1:java.lang.Object put(java.lang.Object,java.lang.Object):0:0 -> l
    1:1:void putResize(java.lang.Object,java.lang.Object):0:0 -> m
    1:1:java.lang.Object remove(java.lang.Object):0:0 -> n
    1:1:void resize(int):0:0 -> o
    1:1:java.lang.String toString(java.lang.String,boolean):0:0 -> p
    1:1:com.badlogic.gdx.utils.ObjectMap$Values values():0:0 -> q
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/y$e;"}
    1:1:java.lang.String toString():0:0 -> toString
com.badlogic.gdx.utils.ObjectMap$Entries -> l.y$a:
    com.badlogic.gdx.utils.ObjectMap$Entry entry -> f
    1:1:void <init>(com.badlogic.gdx.utils.ObjectMap):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/y;)V"}
    1:1:void reset():0:0 -> b
    1:1:com.badlogic.gdx.utils.ObjectMap$Entries iterator():0:0 -> c
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/y$a;"}
    1:1:com.badlogic.gdx.utils.ObjectMap$Entry next():0:0 -> d
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/y$b;"}
    1:1:boolean hasNext():0:0 -> hasNext
    1:1:java.util.Iterator iterator():0:0 -> iterator
    1:1:java.lang.Object next():0:0 -> next
    1:1:void remove():0:0 -> remove
com.badlogic.gdx.utils.ObjectMap$Entry -> l.y$b:
    java.lang.Object key -> a
    java.lang.Object value -> b
    void <init>() -> <init>
    1:1:java.lang.String toString():0:0 -> toString
com.badlogic.gdx.utils.ObjectMap$Keys -> l.y$c:
    1:1:void <init>(com.badlogic.gdx.utils.ObjectMap):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/y;)V"}
    1:1:void reset():0:0 -> b
    1:1:com.badlogic.gdx.utils.ObjectMap$Keys iterator():0:0 -> c
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/y$c;"}
    1:1:boolean hasNext():0:0 -> hasNext
    1:1:java.util.Iterator iterator():0:0 -> iterator
    1:1:java.lang.Object next():0:0 -> next
    1:1:void remove():0:0 -> remove
com.badlogic.gdx.utils.ObjectMap$MapIterator -> l.y$d:
    boolean hasNext -> a
    com.badlogic.gdx.utils.ObjectMap map -> b
    int nextIndex -> c
    int currentIndex -> d
    boolean valid -> e
    1:1:void <init>(com.badlogic.gdx.utils.ObjectMap):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/y;)V"}
    1:1:void findNextIndex():0:0 -> a
    1:1:void reset():0:0 -> b
    1:1:void remove():0:0 -> remove
com.badlogic.gdx.utils.ObjectMap$Values -> l.y$e:
    1:1:void <init>(com.badlogic.gdx.utils.ObjectMap):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/y;)V"}
    1:1:void reset():0:0 -> b
    1:1:com.badlogic.gdx.utils.ObjectMap$Values iterator():0:0 -> c
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/y$e;"}
    1:1:boolean hasNext():0:0 -> hasNext
    1:1:java.util.Iterator iterator():0:0 -> iterator
    1:1:java.lang.Object next():0:0 -> next
    1:1:void remove():0:0 -> remove
com.badlogic.gdx.utils.ObjectSet -> l.z:
    int size -> a
    java.lang.Object[] keyTable -> b
    float loadFactor -> c
    int threshold -> d
    int shift -> e
    int mask -> f
    com.badlogic.gdx.utils.ObjectSet$ObjectSetIterator iterator1 -> g
    com.badlogic.gdx.utils.ObjectSet$ObjectSetIterator iterator2 -> h
    1:1:void <init>():0:0 -> <init>
    2:2:void <init>(int):0:0 -> <init>
    3:3:void <init>(int,float):0:0 -> <init>
    1:1:boolean add(java.lang.Object):0:0 -> a
    1:1:void addResize(java.lang.Object):0:0 -> b
    1:1:void clear():0:0 -> c
    1:1:void clear(int):0:0 -> d
    1:1:boolean contains(java.lang.Object):0:0 -> e
    1:1:boolean equals(java.lang.Object):0:0 -> equals
    1:1:void ensureCapacity(int):0:0 -> f
    1:1:java.lang.Object first():0:0 -> g
    1:1:com.badlogic.gdx.utils.ObjectSet$ObjectSetIterator iterator():0:0 -> h
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/z$a;"}
    1:1:int hashCode():0:0 -> hashCode
    1:1:int locateKey(java.lang.Object):0:0 -> i
    1:1:java.util.Iterator iterator():0:0 -> iterator
    1:1:int place(java.lang.Object):0:0 -> j
    1:1:boolean remove(java.lang.Object):0:0 -> k
    1:1:void resize(int):0:0 -> l
    1:1:int tableSize(int,float):0:0 -> m
    1:1:java.lang.String toString(java.lang.String):0:0 -> n
    1:1:java.lang.String toString():0:0 -> toString
com.badlogic.gdx.utils.ObjectSet$ObjectSetIterator -> l.z$a:
    boolean hasNext -> a
    com.badlogic.gdx.utils.ObjectSet set -> b
    int nextIndex -> c
    int currentIndex -> d
    boolean valid -> e
    1:1:void <init>(com.badlogic.gdx.utils.ObjectSet):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/z;)V"}
    1:1:void findNextIndex():0:0 -> a
    1:1:com.badlogic.gdx.utils.ObjectSet$ObjectSetIterator iterator():0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/z$a;"}
    1:1:void reset():0:0 -> c
    1:1:boolean hasNext():0:0 -> hasNext
    1:1:java.util.Iterator iterator():0:0 -> iterator
    1:1:java.lang.Object next():0:0 -> next
    1:1:void remove():0:0 -> remove
com.badlogic.gdx.utils.OrderedMap -> l.a0:
    com.badlogic.gdx.utils.Array keys -> o
    1:1:void <init>():0:0 -> <init>
    2:2:void <init>(int):0:0 -> <init>
    1:1:void clear():0:0 -> a
    1:1:void clear(int):0:0 -> b
    1:1:com.badlogic.gdx.utils.ObjectMap$Entries entries():0:0 -> d
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/y$a;"}
    1:1:com.badlogic.gdx.utils.ObjectMap$Entries iterator():0:0 -> h
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/y$a;"}
    1:1:com.badlogic.gdx.utils.ObjectMap$Keys keys():0:0 -> i
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/y$c;"}
    1:1:java.util.Iterator iterator():0:0 -> iterator
    1:1:java.lang.Object put(java.lang.Object,java.lang.Object):0:0 -> l
    1:1:java.lang.Object remove(java.lang.Object):0:0 -> n
    1:1:java.lang.String toString(java.lang.String,boolean):0:0 -> p
    1:1:com.badlogic.gdx.utils.ObjectMap$Values values():0:0 -> q
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/y$e;"}
    1:1:java.lang.Object removeIndex(int):0:0 -> r
com.badlogic.gdx.utils.OrderedMap$OrderedMapEntries -> l.a0$a:
    com.badlogic.gdx.utils.Array keys -> g
    1:1:void <init>(com.badlogic.gdx.utils.OrderedMap):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/a0;)V"}
    1:1:void reset():0:0 -> b
    1:1:com.badlogic.gdx.utils.ObjectMap$Entry next():0:0 -> d
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/y$b;"}
    1:1:java.lang.Object next():0:0 -> next
    1:1:void remove():0:0 -> remove
com.badlogic.gdx.utils.OrderedMap$OrderedMapKeys -> l.a0$b:
    com.badlogic.gdx.utils.Array keys -> f
    1:1:void <init>(com.badlogic.gdx.utils.OrderedMap):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/a0;)V"}
    1:1:void reset():0:0 -> b
    1:1:java.lang.Object next():0:0 -> next
    1:1:void remove():0:0 -> remove
com.badlogic.gdx.utils.OrderedMap$OrderedMapValues -> l.a0$c:
    com.badlogic.gdx.utils.Array keys -> f
    1:1:void <init>(com.badlogic.gdx.utils.OrderedMap):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/a0;)V"}
    1:1:void reset():0:0 -> b
    1:1:java.lang.Object next():0:0 -> next
    1:1:void remove():0:0 -> remove
com.badlogic.gdx.utils.OrderedSet -> l.b0:
    com.badlogic.gdx.utils.Array items -> i
    com.badlogic.gdx.utils.OrderedSet$OrderedSetIterator iterator1 -> j
    com.badlogic.gdx.utils.OrderedSet$OrderedSetIterator iterator2 -> k
    1:1:void <init>():0:0 -> <init>
    1:1:boolean add(java.lang.Object):0:0 -> a
    1:1:void clear():0:0 -> c
    1:1:void clear(int):0:0 -> d
    1:1:com.badlogic.gdx.utils.ObjectSet$ObjectSetIterator iterator():0:0 -> h
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/z$a;"}
    1:1:java.util.Iterator iterator():0:0 -> iterator
    1:1:boolean remove(java.lang.Object):0:0 -> k
    1:1:java.lang.String toString(java.lang.String):0:0 -> n
    1:1:void addAll(com.badlogic.gdx.utils.OrderedSet):0:0 -> o
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/b0;)V"}
    1:1:com.badlogic.gdx.utils.OrderedSet$OrderedSetIterator iterator():0:0 -> p
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/b0$a;"}
    1:1:com.badlogic.gdx.utils.Array orderedItems():0:0 -> q
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/b;"}
    1:1:java.lang.Object removeIndex(int):0:0 -> r
    1:1:java.lang.String toString():0:0 -> toString
com.badlogic.gdx.utils.OrderedSet$OrderedSetIterator -> l.b0$a:
    com.badlogic.gdx.utils.Array items -> f
    1:1:void <init>(com.badlogic.gdx.utils.OrderedSet):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/b0;)V"}
    1:1:void reset():0:0 -> c
    1:1:com.badlogic.gdx.utils.Array toArray():0:0 -> d
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/b;"}
    1:1:com.badlogic.gdx.utils.Array toArray(com.badlogic.gdx.utils.Array):0:0 -> e
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/b;)Ll/b;"}
    1:1:java.lang.Object next():0:0 -> next
    1:1:void remove():0:0 -> remove
com.badlogic.gdx.utils.Pool -> l.c0:
    int max -> a
    int peak -> b
    com.badlogic.gdx.utils.Array freeObjects -> c
    1:1:void <init>():0:0 -> <init>
    2:2:void <init>(int,int):0:0 -> <init>
    1:1:void discard(java.lang.Object):0:0 -> a
    1:1:void free(java.lang.Object):0:0 -> b
    1:1:void freeAll(com.badlogic.gdx.utils.Array):0:0 -> c
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/b;)V"}
    java.lang.Object newObject() -> d
    1:1:java.lang.Object obtain():0:0 -> e
    1:1:void reset(java.lang.Object):0:0 -> f
com.badlogic.gdx.utils.Pool$Poolable -> l.c0$a:
    void reset() -> reset
com.badlogic.gdx.utils.Pools -> l.d0:
    com.badlogic.gdx.utils.ObjectMap typePools -> a
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void free(java.lang.Object):0:0 -> a
    1:1:void freeAll(com.badlogic.gdx.utils.Array,boolean):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/b;Z)V"}
    1:1:com.badlogic.gdx.utils.Pool get(java.lang.Class):0:0 -> c
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/Class;)Ll/c0;"}
    1:1:com.badlogic.gdx.utils.Pool get(java.lang.Class,int):0:0 -> d
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/Class;I)Ll/c0;"}
    1:1:java.lang.Object obtain(java.lang.Class):0:0 -> e
com.badlogic.gdx.utils.Queue -> l.e0:
    java.lang.Object[] values -> a
    int head -> b
    int tail -> c
    int size -> d
    com.badlogic.gdx.utils.Queue$QueueIterable iterable -> e
    1:1:void <init>():0:0 -> <init>
    2:2:void <init>(int):0:0 -> <init>
    1:1:void addLast(java.lang.Object):0:0 -> a
    1:1:java.lang.Object get(int):0:0 -> b
    1:1:java.lang.Object removeIndex(int):0:0 -> c
    1:1:void resize(int):0:0 -> d
    1:1:boolean equals(java.lang.Object):0:0 -> equals
    1:1:int hashCode():0:0 -> hashCode
    1:1:java.util.Iterator iterator():0:0 -> iterator
    1:1:java.lang.String toString():0:0 -> toString
com.badlogic.gdx.utils.Queue$QueueIterable -> l.e0$a:
    com.badlogic.gdx.utils.Queue queue -> a
    boolean allowRemove -> b
    com.badlogic.gdx.utils.Queue$QueueIterator iterator1 -> c
    com.badlogic.gdx.utils.Queue$QueueIterator iterator2 -> d
    1:1:void <init>(com.badlogic.gdx.utils.Queue):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/e0;)V"}
    2:2:void <init>(com.badlogic.gdx.utils.Queue,boolean):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/e0;Z)V"}
    1:1:java.util.Iterator iterator():0:0 -> iterator
com.badlogic.gdx.utils.Queue$QueueIterator -> l.e0$b:
    com.badlogic.gdx.utils.Queue queue -> a
    boolean allowRemove -> b
    int index -> c
    boolean valid -> d
    1:1:void <init>(com.badlogic.gdx.utils.Queue,boolean):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/e0;Z)V"}
    1:1:boolean hasNext():0:0 -> hasNext
    1:1:java.util.Iterator iterator():0:0 -> iterator
    1:1:java.lang.Object next():0:0 -> next
    1:1:void remove():0:0 -> remove
com.badlogic.gdx.utils.ReflectionPool -> l.f0:
    com.badlogic.gdx.utils.reflect.Constructor constructor -> d
    1:1:void <init>(java.lang.Class,int,int):0:0 -> <init>
    1:1:java.lang.Object newObject():0:0 -> d
    1:1:com.badlogic.gdx.utils.reflect.Constructor findConstructor(java.lang.Class):0:0 -> g
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/Class;)Lm/c;"}
com.badlogic.gdx.utils.Scaling -> l.g0:
    com.badlogic.gdx.math.Vector2 temp -> a
    com.badlogic.gdx.utils.Scaling fit -> b
    com.badlogic.gdx.utils.Scaling contain -> c
    com.badlogic.gdx.utils.Scaling fill -> d
    com.badlogic.gdx.utils.Scaling fillX -> e
    com.badlogic.gdx.utils.Scaling fillY -> f
    com.badlogic.gdx.utils.Scaling stretch -> g
    com.badlogic.gdx.utils.Scaling stretchX -> h
    com.badlogic.gdx.utils.Scaling stretchY -> i
    com.badlogic.gdx.utils.Scaling none -> j
    1:1:void <clinit>():0:0 -> <clinit>
    void <init>() -> <init>
    com.badlogic.gdx.math.Vector2 apply(float,float,float,float) -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(FFFF)Li/j;"}
com.badlogic.gdx.utils.Scaling$1 -> l.g0$a:
    void <init>() -> <init>
    1:1:com.badlogic.gdx.math.Vector2 apply(float,float,float,float):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(FFFF)Li/j;"}
com.badlogic.gdx.utils.Scaling$2 -> l.g0$b:
    void <init>() -> <init>
    1:1:com.badlogic.gdx.math.Vector2 apply(float,float,float,float):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(FFFF)Li/j;"}
com.badlogic.gdx.utils.Scaling$3 -> l.g0$c:
    void <init>() -> <init>
    1:1:com.badlogic.gdx.math.Vector2 apply(float,float,float,float):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(FFFF)Li/j;"}
com.badlogic.gdx.utils.Scaling$4 -> l.g0$d:
    void <init>() -> <init>
    1:1:com.badlogic.gdx.math.Vector2 apply(float,float,float,float):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(FFFF)Li/j;"}
com.badlogic.gdx.utils.Scaling$5 -> l.g0$e:
    void <init>() -> <init>
    1:1:com.badlogic.gdx.math.Vector2 apply(float,float,float,float):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(FFFF)Li/j;"}
com.badlogic.gdx.utils.Scaling$6 -> l.g0$f:
    void <init>() -> <init>
    1:1:com.badlogic.gdx.math.Vector2 apply(float,float,float,float):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(FFFF)Li/j;"}
com.badlogic.gdx.utils.Scaling$7 -> l.g0$g:
    void <init>() -> <init>
    1:1:com.badlogic.gdx.math.Vector2 apply(float,float,float,float):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(FFFF)Li/j;"}
com.badlogic.gdx.utils.Scaling$8 -> l.g0$h:
    void <init>() -> <init>
    1:1:com.badlogic.gdx.math.Vector2 apply(float,float,float,float):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(FFFF)Li/j;"}
com.badlogic.gdx.utils.Scaling$9 -> l.g0$i:
    void <init>() -> <init>
    1:1:com.badlogic.gdx.math.Vector2 apply(float,float,float,float):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(FFFF)Li/j;"}
com.badlogic.gdx.utils.SerializationException -> l.h0:
    com.badlogic.gdx.utils.StringBuilder trace -> a
    1:1:void <init>(java.lang.String):0:0 -> <init>
    2:2:void <init>(java.lang.String,java.lang.Throwable):0:0 -> <init>
    3:3:void <init>(java.lang.Throwable):0:0 -> <init>
    1:1:void addTrace(java.lang.String):0:0 -> a
    1:1:java.lang.String getMessage():0:0 -> getMessage
com.badlogic.gdx.utils.SharedLibraryLoadRuntimeException -> l.i0:
    1:1:void <init>(java.lang.String):0:0 -> <init>
    2:2:void <init>(java.lang.String,java.lang.Throwable):0:0 -> <init>
    3:3:void <init>(java.lang.Throwable):0:0 -> <init>
com.badlogic.gdx.utils.SharedLibraryLoader -> l.j0:
    java.lang.String nativesJar -> a
    boolean isWindows -> b
    boolean isLinux -> c
    boolean isMac -> d
    boolean isIos -> e
    boolean isAndroid -> f
    boolean isARM -> g
    boolean is64Bit -> h
    java.util.HashSet loadedLibraries -> i
    java.util.Random random -> j
    1:1:void <clinit>():0:0 -> <clinit>
    void <init>() -> <init>
    1:1:void closeQuietly(java.io.Closeable):0:0 -> a
    1:1:java.lang.String crc(java.io.InputStream):0:0 -> b
    1:1:java.io.File extractFile(java.lang.String,java.lang.String,java.io.File):0:0 -> c
    1:1:boolean isLoaded(java.lang.String):0:0 -> d
    1:1:void load(java.lang.String):0:0 -> e
    1:1:java.lang.Throwable loadFile(java.lang.String,java.lang.String,java.io.File):0:0 -> f
    1:1:void loadFile(java.lang.String):0:0 -> g
    1:1:java.lang.String mapLibraryName(java.lang.String):0:0 -> h
    1:1:java.io.InputStream readFile(java.lang.String):0:0 -> i
    1:1:void setLoaded(java.lang.String):0:0 -> j
com.badlogic.gdx.utils.SnapshotArray -> l.k0:
    java.lang.Object[] snapshot -> e
    java.lang.Object[] recycled -> f
    int snapshots -> g
    1:1:void <init>(java.lang.Class):0:0 -> <init>
    2:2:void <init>(boolean,int,java.lang.Class):0:0 -> <init>
    1:1:void truncate(int):0:0 -> C
    1:1:java.lang.Object[] begin():0:0 -> E
    1:1:void end():0:0 -> F
    1:1:void modified():0:0 -> G
    1:1:void clear():0:0 -> f
    1:1:void insert(int,java.lang.Object):0:0 -> l
    1:1:java.lang.Object pop():0:0 -> p
    1:1:java.lang.Object removeIndex(int):0:0 -> r
    1:1:void removeRange(int,int):0:0 -> s
    1:1:boolean removeValue(java.lang.Object,boolean):0:0 -> t
    1:1:void reverse():0:0 -> v
    1:1:void set(int,java.lang.Object):0:0 -> w
    1:1:void sort():0:0 -> x
    1:1:void sort(java.util.Comparator):0:0 -> y
    1:1:void swap(int,int):0:0 -> z
com.badlogic.gdx.utils.Sort -> l.l0:
    com.badlogic.gdx.utils.TimSort timSort -> a
    com.badlogic.gdx.utils.ComparableTimSort comparableTimSort -> b
    com.badlogic.gdx.utils.Sort instance -> c
    void <init>() -> <init>
    1:1:com.badlogic.gdx.utils.Sort instance():0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/l0;"}
    1:1:void sort(java.lang.Object[],int,int):0:0 -> b
    1:1:void sort(java.lang.Object[],java.util.Comparator,int,int):0:0 -> c
com.badlogic.gdx.utils.StreamUtils -> l.m0:
    byte[] EMPTY_BYTES -> a
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void closeQuietly(java.io.Closeable):0:0 -> a
    1:1:void copyStream(java.io.InputStream,java.io.OutputStream):0:0 -> b
    1:1:void copyStream(java.io.InputStream,java.io.OutputStream,byte[]):0:0 -> c
    1:1:byte[] copyStreamToByteArray(java.io.InputStream,int):0:0 -> d
com.badlogic.gdx.utils.StreamUtils$OptimizedByteArrayOutputStream -> l.m0$a:
    1:1:void <init>(int):0:0 -> <init>
    1:1:byte[] toByteArray():0:0 -> toByteArray
com.badlogic.gdx.utils.StringBuilder -> l.n0:
    char[] chars -> a
    int length -> b
    char[] digits -> c
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>():0:0 -> <init>
    2:2:void <init>(int):0:0 -> <init>
    3:3:void <init>(java.lang.String):0:0 -> <init>
    1:1:void insert0(int,java.lang.String):0:0 -> A
    1:1:void move(int,int):0:0 -> B
    1:1:int numChars(int,int):0:0 -> C
    1:1:int numChars(long,int):0:0 -> D
    1:1:com.badlogic.gdx.utils.StringBuilder replace(char,java.lang.String):0:0 -> E
      # {"id":"com.android.tools.r8.residualsignature","signature":"(CLjava/lang/String;)Ll/n0;"}
    1:1:void replace0(int,int,java.lang.String):0:0 -> F
    1:1:void setLength(int):0:0 -> G
    1:1:java.lang.String substring(int,int):0:0 -> H
    1:1:com.badlogic.gdx.utils.StringBuilder append(char):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(C)Ll/n0;"}
    1:1:java.lang.Appendable append(char):0:0 -> append
    2:2:java.lang.Appendable append(java.lang.CharSequence):0:0 -> append
    3:3:java.lang.Appendable append(java.lang.CharSequence,int,int):0:0 -> append
    1:1:com.badlogic.gdx.utils.StringBuilder append(double):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(D)Ll/n0;"}
    1:1:com.badlogic.gdx.utils.StringBuilder append(float):0:0 -> c
      # {"id":"com.android.tools.r8.residualsignature","signature":"(F)Ll/n0;"}
    1:1:char charAt(int):0:0 -> charAt
    1:1:com.badlogic.gdx.utils.StringBuilder append(int):0:0 -> d
      # {"id":"com.android.tools.r8.residualsignature","signature":"(I)Ll/n0;"}
    1:1:com.badlogic.gdx.utils.StringBuilder append(int,int):0:0 -> e
      # {"id":"com.android.tools.r8.residualsignature","signature":"(II)Ll/n0;"}
    1:1:boolean equals(java.lang.Object):0:0 -> equals
    1:1:com.badlogic.gdx.utils.StringBuilder append(int,int,char):0:0 -> f
      # {"id":"com.android.tools.r8.residualsignature","signature":"(IIC)Ll/n0;"}
    1:1:com.badlogic.gdx.utils.StringBuilder append(long):0:0 -> g
      # {"id":"com.android.tools.r8.residualsignature","signature":"(J)Ll/n0;"}
    1:1:com.badlogic.gdx.utils.StringBuilder append(long,int):0:0 -> h
      # {"id":"com.android.tools.r8.residualsignature","signature":"(JI)Ll/n0;"}
    1:1:int hashCode():0:0 -> hashCode
    1:1:com.badlogic.gdx.utils.StringBuilder append(long,int,char):0:0 -> i
      # {"id":"com.android.tools.r8.residualsignature","signature":"(JIC)Ll/n0;"}
    1:1:com.badlogic.gdx.utils.StringBuilder append(java.lang.CharSequence):0:0 -> j
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/CharSequence;)Ll/n0;"}
    1:1:com.badlogic.gdx.utils.StringBuilder append(java.lang.CharSequence,int,int):0:0 -> k
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/CharSequence;II)Ll/n0;"}
    1:1:com.badlogic.gdx.utils.StringBuilder append(java.lang.Object):0:0 -> l
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/Object;)Ll/n0;"}
    1:1:int length():0:0 -> length
    1:1:com.badlogic.gdx.utils.StringBuilder append(java.lang.String):0:0 -> m
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;)Ll/n0;"}
    1:1:com.badlogic.gdx.utils.StringBuilder append(com.badlogic.gdx.utils.StringBuilder):0:0 -> n
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/n0;)Ll/n0;"}
    1:1:com.badlogic.gdx.utils.StringBuilder append(boolean):0:0 -> o
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Z)Ll/n0;"}
    1:1:com.badlogic.gdx.utils.StringBuilder append(char[]):0:0 -> p
      # {"id":"com.android.tools.r8.residualsignature","signature":"([C)Ll/n0;"}
    1:1:void append0(char):0:0 -> q
    1:1:void append0(java.lang.CharSequence,int,int):0:0 -> r
    1:1:void append0(java.lang.String):0:0 -> s
    1:1:java.lang.CharSequence subSequence(int,int):0:0 -> subSequence
    1:1:void append0(char[]):0:0 -> t
    1:1:java.lang.String toString():0:0 -> toString
    1:1:void append0(char[],int,int):0:0 -> u
    1:1:void appendNull():0:0 -> v
    1:1:void clear():0:0 -> w
    1:1:void enlargeBuffer(int):0:0 -> x
    1:1:int indexOf(java.lang.String):0:0 -> y
    1:1:int indexOf(java.lang.String,int):0:0 -> z
com.badlogic.gdx.utils.TimSort -> l.o0:
    java.util.Comparator c -> b
    int minGallop -> c
    java.lang.Object[] tmp -> d
    int tmpCount -> e
    int stackSize -> f
    int[] runBase -> g
    int[] runLen -> h
    1:1:void <init>():0:0 -> <init>
    1:1:void binarySort(java.lang.Object[],int,int,int,java.util.Comparator):0:0 -> a
    1:1:int countRunAndMakeAscending(java.lang.Object[],int,int,java.util.Comparator):0:0 -> b
    1:1:void doSort(java.lang.Object[],java.util.Comparator,int,int):0:0 -> c
    1:1:java.lang.Object[] ensureCapacity(int):0:0 -> d
    1:1:int gallopLeft(java.lang.Object,java.lang.Object[],int,int,int,java.util.Comparator):0:0 -> e
    1:1:int gallopRight(java.lang.Object,java.lang.Object[],int,int,int,java.util.Comparator):0:0 -> f
    1:1:void mergeAt(int):0:0 -> g
    1:1:void mergeCollapse():0:0 -> h
    1:1:void mergeForceCollapse():0:0 -> i
    1:1:void mergeHi(int,int,int,int):0:0 -> j
    1:1:void mergeLo(int,int,int,int):0:0 -> k
    1:1:int minRunLength(int):0:0 -> l
    1:1:void pushRun(int,int):0:0 -> m
    1:1:void rangeCheck(int,int,int):0:0 -> n
    1:1:void reverseRange(java.lang.Object[],int,int):0:0 -> o
com.badlogic.gdx.utils.TimeUtils -> l.p0:
    1:1:long millis():0:0 -> a
    1:1:long nanoTime():0:0 -> b
com.badlogic.gdx.utils.Timer -> l.q0:
    com.badlogic.gdx.utils.Array tasks -> a
    java.lang.Object threadLock -> b
    com.badlogic.gdx.utils.Timer$TimerThread thread -> c
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void <init>():0:0 -> <init>
    1:1:void delay(long):0:0 -> a
    1:1:com.badlogic.gdx.utils.Timer instance():0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/q0;"}
    1:1:com.badlogic.gdx.utils.Timer$Task schedule(com.badlogic.gdx.utils.Timer$Task,float):0:0 -> c
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/q0$a;F)Ll/q0$a;"}
    1:1:com.badlogic.gdx.utils.Timer$Task schedule(com.badlogic.gdx.utils.Timer$Task,float,float):0:0 -> d
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/q0$a;FF)Ll/q0$a;"}
    1:1:com.badlogic.gdx.utils.Timer$Task scheduleTask(com.badlogic.gdx.utils.Timer$Task,float):0:0 -> e
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/q0$a;F)Ll/q0$a;"}
    1:1:com.badlogic.gdx.utils.Timer$Task scheduleTask(com.badlogic.gdx.utils.Timer$Task,float,float):0:0 -> f
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/q0$a;FF)Ll/q0$a;"}
    1:1:com.badlogic.gdx.utils.Timer$Task scheduleTask(com.badlogic.gdx.utils.Timer$Task,float,float,int):0:0 -> g
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/q0$a;FFI)Ll/q0$a;"}
    1:1:void start():0:0 -> h
    1:1:com.badlogic.gdx.utils.Timer$TimerThread thread():0:0 -> i
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Ll/q0$b;"}
    1:1:long update(long,long):0:0 -> j
com.badlogic.gdx.utils.Timer$Task -> l.q0$a:
    com.badlogic.gdx.Application app -> a
    long executeTimeMillis -> b
    long intervalMillis -> c
    int repeatCount -> d
    com.badlogic.gdx.utils.Timer timer -> e
    1:1:void <init>():0:0 -> <init>
    1:1:void cancel():0:0 -> a
    1:1:boolean isScheduled():0:0 -> b
    void run() -> run
com.badlogic.gdx.utils.Timer$TimerThread -> l.q0$b:
    com.badlogic.gdx.Files files -> a
    com.badlogic.gdx.Application app -> b
    com.badlogic.gdx.utils.Array instances -> c
    com.badlogic.gdx.utils.Timer instance -> d
    long pauseTimeMillis -> e
    1:1:void <init>():0:0 -> <init>
    1:1:void resume():0:0 -> a
    1:1:void pause():0:0 -> b
    1:1:void dispose():0:0 -> dispose
    1:1:void run():0:0 -> run
com.badlogic.gdx.utils.reflect.ArrayReflection -> m.a:
    1:1:java.lang.Object newInstance(java.lang.Class,int):0:0 -> a
    1:1:void set(java.lang.Object,int,java.lang.Object):0:0 -> b
com.badlogic.gdx.utils.reflect.ClassReflection -> m.b:
    1:1:java.lang.Class forName(java.lang.String):0:0 -> a
    1:1:com.badlogic.gdx.utils.reflect.Constructor getConstructor(java.lang.Class,java.lang.Class[]):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/Class;[Ljava/lang/Class;)Lm/c;"}
    1:1:com.badlogic.gdx.utils.reflect.Constructor getDeclaredConstructor(java.lang.Class,java.lang.Class[]):0:0 -> c
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/Class;[Ljava/lang/Class;)Lm/c;"}
    1:1:com.badlogic.gdx.utils.reflect.Field[] getDeclaredFields(java.lang.Class):0:0 -> d
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/Class;)[Lm/d;"}
    1:1:com.badlogic.gdx.utils.reflect.Method[] getMethods(java.lang.Class):0:0 -> e
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/Class;)[Lm/e;"}
    1:1:java.lang.String getSimpleName(java.lang.Class):0:0 -> f
    1:1:boolean isAssignableFrom(java.lang.Class,java.lang.Class):0:0 -> g
    1:1:boolean isInstance(java.lang.Class,java.lang.Object):0:0 -> h
    1:1:boolean isMemberClass(java.lang.Class):0:0 -> i
    1:1:boolean isStaticClass(java.lang.Class):0:0 -> j
    1:1:java.lang.Object newInstance(java.lang.Class):0:0 -> k
com.badlogic.gdx.utils.reflect.Constructor -> m.c:
    java.lang.reflect.Constructor constructor -> a
    1:1:void <init>(java.lang.reflect.Constructor):0:0 -> <init>
    1:1:java.lang.Class getDeclaringClass():0:0 -> a
    1:1:java.lang.Object newInstance(java.lang.Object[]):0:0 -> b
    1:1:void setAccessible(boolean):0:0 -> c
com.badlogic.gdx.utils.reflect.Field -> m.d:
    java.lang.reflect.Field field -> a
    1:1:void <init>(java.lang.reflect.Field):0:0 -> <init>
    1:1:java.lang.Object get(java.lang.Object):0:0 -> a
    1:1:java.lang.Class getDeclaringClass():0:0 -> b
    1:1:java.lang.Class getElementType(int):0:0 -> c
    1:1:java.lang.String getName():0:0 -> d
    1:1:java.lang.Class getType():0:0 -> e
    1:1:boolean isAccessible():0:0 -> f
    1:1:boolean isAnnotationPresent(java.lang.Class):0:0 -> g
    1:1:boolean isStatic():0:0 -> h
    1:1:boolean isSynthetic():0:0 -> i
    1:1:boolean isTransient():0:0 -> j
    1:1:void set(java.lang.Object,java.lang.Object):0:0 -> k
    1:1:void setAccessible(boolean):0:0 -> l
com.badlogic.gdx.utils.reflect.Method -> m.e:
    java.lang.reflect.Method method -> a
    1:1:void <init>(java.lang.reflect.Method):0:0 -> <init>
    1:1:java.lang.String getName():0:0 -> a
    1:1:java.lang.Object invoke(java.lang.Object,java.lang.Object[]):0:0 -> b
com.badlogic.gdx.utils.reflect.ReflectionException -> m.f:
    1:1:void <init>(java.lang.String,java.lang.Throwable):0:0 -> <init>
com.badlogic.gdx.utils.viewport.ScalingViewport -> n.a:
    com.badlogic.gdx.utils.Scaling scaling -> i
    1:1:void <init>(com.badlogic.gdx.utils.Scaling,float,float,com.badlogic.gdx.graphics.Camera):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/g0;FFLf/a;)V"}
    1:1:void update(int,int,boolean):0:0 -> p
com.badlogic.gdx.utils.viewport.Viewport -> n.b:
    com.badlogic.gdx.graphics.Camera camera -> a
    float worldWidth -> b
    float worldHeight -> c
    int screenX -> d
    int screenY -> e
    int screenWidth -> f
    int screenHeight -> g
    com.badlogic.gdx.math.Vector3 tmp -> h
    1:1:void <init>():0:0 -> <init>
    1:1:void apply(boolean):0:0 -> a
    1:1:void calculateScissors(com.badlogic.gdx.math.Matrix4,com.badlogic.gdx.math.Rectangle,com.badlogic.gdx.math.Rectangle):0:0 -> b
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/math/Matrix4;Li/i;Li/i;)V"}
    1:1:com.badlogic.gdx.graphics.Camera getCamera():0:0 -> c
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lf/a;"}
    1:1:int getScreenHeight():0:0 -> d
    1:1:int getScreenWidth():0:0 -> e
    1:1:int getScreenX():0:0 -> f
    1:1:int getScreenY():0:0 -> g
    1:1:float getWorldHeight():0:0 -> h
    1:1:float getWorldWidth():0:0 -> i
    1:1:com.badlogic.gdx.math.Vector2 project(com.badlogic.gdx.math.Vector2):0:0 -> j
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/j;)Li/j;"}
    1:1:void setCamera(com.badlogic.gdx.graphics.Camera):0:0 -> k
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lf/a;)V"}
    1:1:void setScreenBounds(int,int,int,int):0:0 -> l
    1:1:void setWorldSize(float,float):0:0 -> m
    1:1:com.badlogic.gdx.math.Vector2 toScreenCoordinates(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Matrix4):0:0 -> n
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/j;Lcom/badlogic/gdx/math/Matrix4;)Li/j;"}
    1:1:com.badlogic.gdx.math.Vector2 unproject(com.badlogic.gdx.math.Vector2):0:0 -> o
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/j;)Li/j;"}
    void update(int,int,boolean) -> p
net.nminh.match3game.Match3Game -> o.a:
    com.badlogic.gdx.graphics.g2d.SpriteBatch batch -> b
    void <init>() -> <init>
    1:1:void dispose():0:0 -> dispose
    1:1:void create():0:0 -> f
    1:1:void render():0:0 -> g
net.nminh.match3game.actors.Background -> p.a:
    com.badlogic.gdx.scenes.scene2d.ui.Image image -> a
    1:1:void <init>(com.badlogic.gdx.graphics.g2d.TextureRegion):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/j;)V"}
    1:1:void dispose():0:0 -> dispose
    1:1:void init(com.badlogic.gdx.graphics.g2d.TextureRegion):0:0 -> e
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/j;)V"}
net.nminh.match3game.actors.Board -> p.b:
    com.badlogic.gdx.utils.Array entities -> a
    net.nminh.match3game.utils.Tile[][] tiles -> b
    com.badlogic.gdx.math.Vector2 position -> c
    int matches -> d
    com.badlogic.gdx.scenes.scene2d.utils.ClickListener clickListener -> e
    1:1:void <init>(com.badlogic.gdx.utils.Array):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/b;)V"}
    1:1:void dispose():0:0 -> dispose
    1:1:void initialize():0:0 -> initialize
net.nminh.match3game.actors.Board$1 -> p.b$a:
    net.nminh.match3game.utils.Tile firstClick -> a
    int count -> b
    com.badlogic.gdx.scenes.scene2d.Action afterClick -> c
    net.nminh.match3game.actors.Board this$0 -> d
    1:1:void <init>(net.nminh.match3game.actors.Board):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lp/b;)V"}
    1:1:void clicked(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float):0:0 -> clicked
net.nminh.match3game.actors.Board$1$1 -> p.b$a$a:
    net.nminh.match3game.actors.Board$1 this$1 -> a
    1:1:void <init>(net.nminh.match3game.actors.Board$1):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lp/b$a;)V"}
    1:1:boolean act(float):0:0 -> act
net.nminh.match3game.actors.FramesPerSecond -> p.c:
    com.badlogic.gdx.graphics.g2d.BitmapFont font -> a
    com.badlogic.gdx.math.Rectangle bounds -> b
    float frameCounter -> c
    float elapsedTime -> d
    int fps -> e
    1:1:void <init>(com.badlogic.gdx.math.Rectangle):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Li/i;)V"}
    1:1:void dispose():0:0 -> dispose
    1:1:void draw(com.badlogic.gdx.graphics.g2d.Batch,float):0:0 -> draw
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/a;F)V"}
    1:1:int getFps():0:0 -> e
net.nminh.match3game.actors.Grid -> p.d:
    net.nminh.match3game.utils.Tile[][] tiles -> a
    1:1:void <init>(com.badlogic.gdx.utils.Array):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ll/b;)V"}
net.nminh.match3game.screens.GameScreen -> q.a:
    net.nminh.match3game.Match3Game game -> c
    net.nminh.match3game.actors.Background bg -> d
    net.nminh.match3game.actors.Board board -> e
    net.nminh.match3game.actors.Grid grid -> f
    net.nminh.match3game.actors.FramesPerSecond fps -> g
    1:1:void <init>(net.nminh.match3game.Match3Game):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lo/a;)V"}
    1:1:void setUpBG():0:0 -> E
    1:1:void setUpBoard():0:0 -> F
    1:1:void setUpFPS():0:0 -> G
    1:1:void setUpGrid():0:0 -> H
    1:1:void dispose():0:0 -> dispose
    1:1:void resize(int,int):0:0 -> e
    1:1:void render(float):0:0 -> g
    1:1:void show():0:0 -> t
net.nminh.match3game.screens.HomeScreen -> q.b:
    net.nminh.match3game.Match3Game game -> c
    net.nminh.match3game.actors.FramesPerSecond fps -> d
    com.badlogic.gdx.scenes.scene2d.ui.Image[] images -> e
    com.badlogic.gdx.graphics.g2d.TextureRegion HomeScreen_BG -> f
    com.badlogic.gdx.graphics.g2d.TextureRegion HomeScreen_Playbtn -> g
    com.badlogic.gdx.graphics.g2d.TextureRegion HomeScreen_Ratebtn -> h
    com.badlogic.gdx.graphics.g2d.TextureRegion HomeScreen_Settingbtn -> i
    com.badlogic.gdx.graphics.g2d.TextureRegion HomeScreen_Charlayout -> j
    com.badlogic.gdx.graphics.g2d.TextureRegion Logo_BG -> k
    com.badlogic.gdx.graphics.g2d.TextureRegion Logo_Cake -> l
    com.badlogic.gdx.graphics.g2d.TextureRegion Logo_Match3 -> m
    com.badlogic.gdx.graphics.g2d.TextureRegion Logo_Sweet -> n
    com.badlogic.gdx.graphics.g2d.TextureRegion Logo_Purple_Donut -> o
    com.badlogic.gdx.graphics.g2d.TextureRegion Logo_Green_Donut -> p
    1:1:void <init>(net.nminh.match3game.Match3Game):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lo/a;)V"}
    1:1:void init():0:0 -> E
    1:1:void setUpImages():0:0 -> F
    1:1:void setupFPS():0:0 -> G
    1:1:void dispose():0:0 -> dispose
    1:1:void render(float):0:0 -> g
    1:1:void show():0:0 -> t
net.nminh.match3game.screens.HomeScreen$1 -> q.b$a:
    net.nminh.match3game.screens.HomeScreen this$0 -> a
    1:1:void <init>(net.nminh.match3game.screens.HomeScreen):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lq/b;)V"}
    1:1:void clicked(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float):0:0 -> clicked
net.nminh.match3game.screens.HomeScreen$2 -> q.b$b:
    net.nminh.match3game.screens.HomeScreen this$0 -> a
    1:1:void <init>(net.nminh.match3game.screens.HomeScreen):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lq/b;)V"}
    1:1:void clicked(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float):0:0 -> clicked
net.nminh.match3game.screens.HomeScreen$3 -> q.b$c:
    net.nminh.match3game.screens.HomeScreen this$0 -> a
    1:1:void <init>(net.nminh.match3game.screens.HomeScreen):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lq/b;)V"}
    1:1:void clicked(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float):0:0 -> clicked
net.nminh.match3game.screens.ParentScreen -> q.c:
    net.nminh.match3game.Match3Game game -> a
    com.badlogic.gdx.graphics.OrthographicCamera cam -> b
    1:1:void <init>(net.nminh.match3game.Match3Game):0:0 -> <init>
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lo/a;)V"}
    1:1:void resume():0:0 -> a
    1:1:void pause():0:0 -> b
    1:1:void dispose():0:0 -> dispose
    1:1:void resize(int,int):0:0 -> e
    1:1:void render(float):0:0 -> g
    1:1:void hide():0:0 -> p
    1:1:void show():0:0 -> t
net.nminh.match3game.utils.Assets -> r.a:
    java.util.HashMap texturesMap -> a
    java.util.HashMap spineMap -> b
    com.badlogic.gdx.graphics.g2d.TextureAtlas atlas -> c
    com.badlogic.gdx.graphics.g2d.TextureAtlas SettingPOPUP -> d
    1:1:void <clinit>():0:0 -> <clinit>
    1:1:void Load():0:0 -> a
    1:1:void dispose():0:0 -> b
    1:1:com.badlogic.gdx.graphics.g2d.TextureRegion getRegion(java.lang.String):0:0 -> c
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;)Lcom/badlogic/gdx/graphics/g2d/j;"}
    1:1:com.badlogic.gdx.graphics.g2d.TextureAtlas getTexture():0:0 -> d
      # {"id":"com.android.tools.r8.residualsignature","signature":"()Lcom/badlogic/gdx/graphics/g2d/i;"}
net.nminh.match3game.utils.Consts -> r.b:
    com.badlogic.gdx.math.Vector2 POSITION -> a
    1:1:void <clinit>():0:0 -> <clinit>
net.nminh.match3game.utils.Tile -> r.c:
    int row -> a
    int col -> b
    int type -> c
    1:1:void <init>():0:0 -> <init>
    2:2:void <init>(int,int):0:0 -> <init>
    1:1:void init(com.badlogic.gdx.graphics.g2d.TextureRegion,int):0:0 -> e
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Lcom/badlogic/gdx/graphics/g2d/j;I)V"}
    1:1:void setRowCol(int,int):0:0 -> g
net.nminh.match3game.utils.Utils -> r.d:
    1:1:com.badlogic.gdx.files.FileHandle getInternalPath(java.lang.String):0:0 -> a
      # {"id":"com.android.tools.r8.residualsignature","signature":"(Ljava/lang/String;)Le/a;"}
