box2dLight.BlendFunc
box2dLight.ChainLight
box2dLight.ConeLight
box2dLight.DirectionalLight
box2dLight.Light$1
box2dLight.Light
box2dLight.LightMap
box2dLight.PointLight
box2dLight.PositionalLight
box2dLight.RayHandler
box2dLight.Spinor
com.badlogic.gdx.AbstractGraphics:
    public float getBackBufferScale()
    public float getDensity()
    public float getRawDeltaTime()
com.badlogic.gdx.AbstractInput:
    public boolean isCatchMenuKey()
    public boolean isKeyJustPressed(int)
    public void setCatchBackKey(boolean)
    public void setCatchMenuKey(boolean)
com.badlogic.gdx.Application:
    public static final int LOG_DEBUG
    public static final int LOG_ERROR
    public static final int LOG_INFO
    public static final int LOG_NONE
    public abstract void debug(java.lang.String,java.lang.String)
    public abstract void debug(java.lang.String,java.lang.String,java.lang.Throwable)
    public abstract com.badlogic.gdx.ApplicationLogger getApplicationLogger()
    public abstract com.badlogic.gdx.Audio getAudio()
    public abstract com.badlogic.gdx.Files getFiles()
    public abstract com.badlogic.gdx.Input getInput()
    public abstract long getJavaHeap()
    public abstract int getLogLevel()
    public abstract long getNativeHeap()
    public abstract com.badlogic.gdx.Net getNet()
    public abstract com.badlogic.gdx.Preferences getPreferences(java.lang.String)
    public abstract void setApplicationLogger(com.badlogic.gdx.ApplicationLogger)
    public abstract void setLogLevel(int)
com.badlogic.gdx.ApplicationAdapter
com.badlogic.gdx.ApplicationLogger:
    public abstract void debug(java.lang.String,java.lang.String)
    public abstract void debug(java.lang.String,java.lang.String,java.lang.Throwable)
com.badlogic.gdx.Audio:
    public abstract java.lang.String[] getAvailableOutputDevices()
    public abstract com.badlogic.gdx.audio.AudioDevice newAudioDevice(int,boolean)
    public abstract com.badlogic.gdx.audio.AudioRecorder newAudioRecorder(int,boolean)
    public abstract com.badlogic.gdx.audio.Music newMusic(com.badlogic.gdx.files.FileHandle)
    public abstract com.badlogic.gdx.audio.Sound newSound(com.badlogic.gdx.files.FileHandle)
    public abstract boolean switchOutputDevice(java.lang.String)
com.badlogic.gdx.Files:
    public abstract com.badlogic.gdx.files.FileHandle absolute(java.lang.String)
    public abstract com.badlogic.gdx.files.FileHandle external(java.lang.String)
    public abstract boolean isExternalStorageAvailable()
    public abstract boolean isLocalStorageAvailable()
    public abstract com.badlogic.gdx.files.FileHandle local(java.lang.String)
com.badlogic.gdx.Game:
    public com.badlogic.gdx.Screen getScreen()
com.badlogic.gdx.Gdx:
    public static com.badlogic.gdx.graphics.GL31 gl31
    public static com.badlogic.gdx.graphics.GL32 gl32
    public void <init>()
com.badlogic.gdx.Graphics$GraphicsType
com.badlogic.gdx.Graphics$Monitor
com.badlogic.gdx.Graphics:
    public abstract float getBackBufferScale()
    public abstract com.badlogic.gdx.Graphics$BufferFormat getBufferFormat()
    public abstract float getDensity()
    public abstract com.badlogic.gdx.Graphics$DisplayMode getDisplayMode(com.badlogic.gdx.Graphics$Monitor)
    public abstract com.badlogic.gdx.Graphics$DisplayMode[] getDisplayModes()
    public abstract com.badlogic.gdx.Graphics$DisplayMode[] getDisplayModes(com.badlogic.gdx.Graphics$Monitor)
    public abstract long getFrameId()
    public abstract int getFramesPerSecond()
    public abstract com.badlogic.gdx.graphics.GL20 getGL20()
    public abstract com.badlogic.gdx.graphics.GL30 getGL30()
    public abstract com.badlogic.gdx.graphics.GL31 getGL31()
    public abstract com.badlogic.gdx.graphics.GL32 getGL32()
    public abstract com.badlogic.gdx.graphics.glutils.GLVersion getGLVersion()
    public abstract com.badlogic.gdx.Graphics$Monitor getMonitor()
    public abstract com.badlogic.gdx.Graphics$Monitor[] getMonitors()
    public abstract float getPpcX()
    public abstract float getPpcY()
    public abstract float getPpiX()
    public abstract float getPpiY()
    public abstract com.badlogic.gdx.Graphics$Monitor getPrimaryMonitor()
    public abstract float getRawDeltaTime()
    public abstract int getSafeInsetBottom()
    public abstract int getSafeInsetLeft()
    public abstract int getSafeInsetRight()
    public abstract int getSafeInsetTop()
    public abstract com.badlogic.gdx.Graphics$GraphicsType getType()
    public abstract boolean isContinuousRendering()
    public abstract boolean isFullscreen()
    public abstract boolean isGL31Available()
    public abstract boolean isGL32Available()
    public abstract com.badlogic.gdx.graphics.Cursor newCursor(com.badlogic.gdx.graphics.Pixmap,int,int)
    public abstract void setContinuousRendering(boolean)
    public abstract void setCursor(com.badlogic.gdx.graphics.Cursor)
    public abstract void setForegroundFPS(int)
    public abstract boolean setFullscreenMode(com.badlogic.gdx.Graphics$DisplayMode)
    public abstract void setGL20(com.badlogic.gdx.graphics.GL20)
    public abstract void setGL30(com.badlogic.gdx.graphics.GL30)
    public abstract void setGL31(com.badlogic.gdx.graphics.GL31)
    public abstract void setGL32(com.badlogic.gdx.graphics.GL32)
    public abstract void setResizable(boolean)
    public abstract void setSystemCursor(com.badlogic.gdx.graphics.Cursor$SystemCursor)
    public abstract void setTitle(java.lang.String)
    public abstract void setUndecorated(boolean)
    public abstract void setVSync(boolean)
    public abstract boolean setWindowedMode(int,int)
    public abstract boolean supportsDisplayModeChange()
com.badlogic.gdx.Input$Buttons
com.badlogic.gdx.Input$Keys
com.badlogic.gdx.Input$Peripheral
com.badlogic.gdx.Input$TextInputListener
com.badlogic.gdx.Input$VibrationType
com.badlogic.gdx.Input:
    public abstract float getAccelerometerX()
    public abstract float getAccelerometerY()
    public abstract float getAccelerometerZ()
    public abstract float getAzimuth()
    public abstract int getDeltaX()
    public abstract int getDeltaX(int)
    public abstract int getDeltaY()
    public abstract int getDeltaY(int)
    public abstract float getGyroscopeX()
    public abstract float getGyroscopeY()
    public abstract float getGyroscopeZ()
    public abstract com.badlogic.gdx.InputProcessor getInputProcessor()
    public abstract int getMaxPointers()
    public abstract com.badlogic.gdx.Input$Orientation getNativeOrientation()
    public abstract float getPitch()
    public abstract float getPressure()
    public abstract float getPressure(int)
    public abstract float getRoll()
    public abstract int getRotation()
    public abstract void getRotationMatrix(float[])
    public abstract void getTextInput(com.badlogic.gdx.Input$TextInputListener,java.lang.String,java.lang.String,java.lang.String)
    public abstract void getTextInput(com.badlogic.gdx.Input$TextInputListener,java.lang.String,java.lang.String,java.lang.String,com.badlogic.gdx.Input$OnscreenKeyboardType)
    public abstract int getX(int)
    public abstract int getY(int)
    public abstract boolean isButtonJustPressed(int)
    public abstract boolean isCatchKey(int)
    public abstract boolean isCatchMenuKey()
    public abstract boolean isCursorCatched()
    public abstract boolean isKeyJustPressed(int)
    public abstract boolean isPeripheralAvailable(com.badlogic.gdx.Input$Peripheral)
    public abstract boolean justTouched()
    public abstract void setCatchBackKey(boolean)
    public abstract void setCatchKey(int,boolean)
    public abstract void setCatchMenuKey(boolean)
    public abstract void setCursorCatched(boolean)
    public abstract void setCursorPosition(int,int)
    public abstract void setOnscreenKeyboardVisible(boolean,com.badlogic.gdx.Input$OnscreenKeyboardType)
    public abstract void vibrate(int)
    public abstract void vibrate(int,int,boolean)
    public abstract void vibrate(int,boolean)
    public abstract void vibrate(com.badlogic.gdx.Input$VibrationType)
com.badlogic.gdx.InputEventQueue
com.badlogic.gdx.InputMultiplexer
com.badlogic.gdx.Net$HttpMethods
com.badlogic.gdx.Net$HttpRequest
com.badlogic.gdx.Net$HttpResponse
com.badlogic.gdx.Net$HttpResponseListener
com.badlogic.gdx.Net$Protocol
com.badlogic.gdx.Net:
    public abstract void cancelHttpRequest(com.badlogic.gdx.Net$HttpRequest)
    public abstract com.badlogic.gdx.net.Socket newClientSocket(com.badlogic.gdx.Net$Protocol,java.lang.String,int,com.badlogic.gdx.net.SocketHints)
    public abstract com.badlogic.gdx.net.ServerSocket newServerSocket(com.badlogic.gdx.Net$Protocol,int,com.badlogic.gdx.net.ServerSocketHints)
    public abstract com.badlogic.gdx.net.ServerSocket newServerSocket(com.badlogic.gdx.Net$Protocol,java.lang.String,int,com.badlogic.gdx.net.ServerSocketHints)
    public abstract void sendHttpRequest(com.badlogic.gdx.Net$HttpRequest,com.badlogic.gdx.Net$HttpResponseListener)
com.badlogic.gdx.Preferences
com.badlogic.gdx.Screen:
    public abstract void dispose()
com.badlogic.gdx.ScreenAdapter
com.badlogic.gdx.Version
com.badlogic.gdx.assets.AssetDescriptor
com.badlogic.gdx.assets.AssetErrorListener
com.badlogic.gdx.assets.AssetLoaderParameters$LoadedCallback:
    public abstract void finishedLoading(com.badlogic.gdx.assets.AssetManager,java.lang.String,java.lang.Class)
com.badlogic.gdx.assets.AssetLoadingTask
com.badlogic.gdx.assets.AssetManager$RefCountedContainer
com.badlogic.gdx.assets.AssetManager:
    final com.badlogic.gdx.utils.ObjectMap assetDependencies
    final com.badlogic.gdx.utils.ObjectMap assetTypes
    final com.badlogic.gdx.utils.ObjectMap assets
    final com.badlogic.gdx.utils.async.AsyncExecutor executor
    final com.badlogic.gdx.utils.ObjectSet injected
    com.badlogic.gdx.assets.AssetErrorListener listener
    final com.badlogic.gdx.utils.Array loadQueue
    int loaded
    final com.badlogic.gdx.utils.ObjectMap loaders
    com.badlogic.gdx.utils.Logger log
    int peakTasks
    final com.badlogic.gdx.assets.loaders.FileHandleResolver resolver
    final com.badlogic.gdx.utils.Array tasks
    int toLoad
    public void <init>()
    public void <init>(com.badlogic.gdx.assets.loaders.FileHandleResolver)
    public void <init>(com.badlogic.gdx.assets.loaders.FileHandleResolver,boolean)
    protected void addAsset(java.lang.String,java.lang.Class,java.lang.Object)
    private void addTask(com.badlogic.gdx.assets.AssetDescriptor)
    public void clear()
    public synchronized boolean contains(java.lang.String)
    public synchronized boolean contains(java.lang.String,java.lang.Class)
    public synchronized boolean containsAsset(java.lang.Object)
    public void dispose()
    public java.lang.Object finishLoadingAsset(com.badlogic.gdx.assets.AssetDescriptor)
    public java.lang.Object finishLoadingAsset(java.lang.String)
    public synchronized java.lang.Object get(com.badlogic.gdx.assets.AssetDescriptor)
    public synchronized java.lang.Object get(java.lang.String)
    public synchronized java.lang.Object get(java.lang.String,java.lang.Class)
    public synchronized java.lang.Object get(java.lang.String,java.lang.Class,boolean)
    public synchronized java.lang.Object get(java.lang.String,boolean)
    public synchronized com.badlogic.gdx.utils.Array getAll(java.lang.Class,com.badlogic.gdx.utils.Array)
    public synchronized com.badlogic.gdx.utils.Array getAssetNames()
    public synchronized java.lang.Class getAssetType(java.lang.String)
    public synchronized com.badlogic.gdx.utils.Array getDependencies(java.lang.String)
    public synchronized java.lang.String getDiagnostics()
    public com.badlogic.gdx.assets.loaders.FileHandleResolver getFileHandleResolver()
    public synchronized int getLoadedAssets()
    public com.badlogic.gdx.assets.loaders.AssetLoader getLoader(java.lang.Class)
    public com.badlogic.gdx.assets.loaders.AssetLoader getLoader(java.lang.Class,java.lang.String)
    public com.badlogic.gdx.utils.Logger getLogger()
    public synchronized float getProgress()
    public synchronized int getQueuedAssets()
    private void handleTaskError(java.lang.Throwable)
    private void incrementRefCountedDependencies(java.lang.String)
    synchronized void injectDependencies(java.lang.String,com.badlogic.gdx.utils.Array)
    private synchronized void injectDependency(java.lang.String,com.badlogic.gdx.assets.AssetDescriptor)
    public synchronized boolean isFinished()
    public synchronized boolean isLoaded(com.badlogic.gdx.assets.AssetDescriptor)
    public synchronized boolean isLoaded(java.lang.String)
    public synchronized boolean isLoaded(java.lang.String,java.lang.Class)
    public synchronized void load(com.badlogic.gdx.assets.AssetDescriptor)
    public synchronized void load(java.lang.String,java.lang.Class)
    private void nextTask()
    public synchronized void setErrorListener(com.badlogic.gdx.assets.AssetErrorListener)
    public synchronized void setLoader(java.lang.Class,com.badlogic.gdx.assets.loaders.AssetLoader)
    public synchronized void setLoader(java.lang.Class,java.lang.String,com.badlogic.gdx.assets.loaders.AssetLoader)
    public void setLogger(com.badlogic.gdx.utils.Logger)
    protected void taskFailed(com.badlogic.gdx.assets.AssetDescriptor,java.lang.RuntimeException)
    public synchronized boolean update()
    public boolean update(int)
    private boolean updateTask()
com.badlogic.gdx.assets.loaders.AssetLoader
com.badlogic.gdx.assets.loaders.AsynchronousAssetLoader
com.badlogic.gdx.assets.loaders.BitmapFontLoader$BitmapFontParameter
com.badlogic.gdx.assets.loaders.BitmapFontLoader
com.badlogic.gdx.assets.loaders.CubemapLoader$CubemapLoaderInfo
com.badlogic.gdx.assets.loaders.CubemapLoader
com.badlogic.gdx.assets.loaders.FileHandleResolver
com.badlogic.gdx.assets.loaders.I18NBundleLoader$I18NBundleParameter
com.badlogic.gdx.assets.loaders.I18NBundleLoader
com.badlogic.gdx.assets.loaders.ModelLoader$ModelParameters
com.badlogic.gdx.assets.loaders.ModelLoader
com.badlogic.gdx.assets.loaders.MusicLoader$MusicParameter
com.badlogic.gdx.assets.loaders.MusicLoader
com.badlogic.gdx.assets.loaders.ParticleEffectLoader$ParticleEffectParameter
com.badlogic.gdx.assets.loaders.ParticleEffectLoader
com.badlogic.gdx.assets.loaders.PixmapLoader$PixmapParameter
com.badlogic.gdx.assets.loaders.PixmapLoader
com.badlogic.gdx.assets.loaders.ShaderProgramLoader$ShaderProgramParameter
com.badlogic.gdx.assets.loaders.ShaderProgramLoader
com.badlogic.gdx.assets.loaders.SkinLoader$SkinParameter
com.badlogic.gdx.assets.loaders.SkinLoader
com.badlogic.gdx.assets.loaders.SoundLoader$SoundParameter
com.badlogic.gdx.assets.loaders.SoundLoader
com.badlogic.gdx.assets.loaders.SynchronousAssetLoader
com.badlogic.gdx.assets.loaders.TextureAtlasLoader$TextureAtlasParameter
com.badlogic.gdx.assets.loaders.TextureAtlasLoader
com.badlogic.gdx.assets.loaders.TextureLoader$TextureLoaderInfo
com.badlogic.gdx.assets.loaders.TextureLoader
com.badlogic.gdx.assets.loaders.resolvers.AbsoluteFileHandleResolver
com.badlogic.gdx.assets.loaders.resolvers.ClasspathFileHandleResolver
com.badlogic.gdx.assets.loaders.resolvers.ExternalFileHandleResolver
com.badlogic.gdx.assets.loaders.resolvers.InternalFileHandleResolver
com.badlogic.gdx.assets.loaders.resolvers.LocalFileHandleResolver
com.badlogic.gdx.assets.loaders.resolvers.PrefixFileHandleResolver
com.badlogic.gdx.assets.loaders.resolvers.ResolutionFileResolver$Resolution
com.badlogic.gdx.assets.loaders.resolvers.ResolutionFileResolver
com.badlogic.gdx.audio.AudioDevice
com.badlogic.gdx.audio.AudioRecorder
com.badlogic.gdx.audio.Music:
    public abstract void dispose()
    public abstract float getPosition()
    public abstract float getVolume()
    public abstract boolean isLooping()
    public abstract boolean isPlaying()
    public abstract void pause()
    public abstract void play()
    public abstract void setLooping(boolean)
    public abstract void setOnCompletionListener(com.badlogic.gdx.audio.Music$OnCompletionListener)
    public abstract void setPan(float,float)
    public abstract void setPosition(float)
    public abstract void setVolume(float)
    public abstract void stop()
com.badlogic.gdx.audio.Sound
com.badlogic.gdx.backends.android.APKExpansionSupport
com.badlogic.gdx.backends.android.AndroidApplication:
    public void addAndroidEventListener(com.badlogic.gdx.backends.android.AndroidEventListener)
    public void debug(java.lang.String,java.lang.String)
    public void debug(java.lang.String,java.lang.String,java.lang.Throwable)
    public synthetic bridge com.badlogic.gdx.Input getInput()
    public long getJavaHeap()
    public int getLogLevel()
    public long getNativeHeap()
    public com.badlogic.gdx.Preferences getPreferences(java.lang.String)
    public void initialize(com.badlogic.gdx.ApplicationListener)
    public android.view.View initializeForView(com.badlogic.gdx.ApplicationListener)
    public android.view.View initializeForView(com.badlogic.gdx.ApplicationListener,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration)
    public void removeAndroidEventListener(com.badlogic.gdx.backends.android.AndroidEventListener)
    public void setLogLevel(int)
com.badlogic.gdx.backends.android.AndroidApplicationBase:
    public static final int MINIMUM_SDK
    public abstract com.badlogic.gdx.backends.android.AndroidAudio createAudio(android.content.Context,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration)
    public abstract com.badlogic.gdx.backends.android.AndroidInput createInput(com.badlogic.gdx.Application,android.content.Context,java.lang.Object,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration)
    public abstract void runOnUiThread(java.lang.Runnable)
com.badlogic.gdx.backends.android.AndroidApplicationLogger:
    public void debug(java.lang.String,java.lang.String)
    public void debug(java.lang.String,java.lang.String,java.lang.Throwable)
com.badlogic.gdx.backends.android.AndroidAudioDevice
com.badlogic.gdx.backends.android.AndroidAudioRecorder
com.badlogic.gdx.backends.android.AndroidClipboard:
    public boolean hasContents()
com.badlogic.gdx.backends.android.AndroidCursor$1
com.badlogic.gdx.backends.android.AndroidCursor
com.badlogic.gdx.backends.android.AndroidDaydream$1
com.badlogic.gdx.backends.android.AndroidDaydream$2
com.badlogic.gdx.backends.android.AndroidDaydream
com.badlogic.gdx.backends.android.AndroidFileHandle:
    public android.content.res.AssetFileDescriptor getAssetFileDescriptor()
    public long lastModified()
    public com.badlogic.gdx.files.FileHandle[] list()
    public com.badlogic.gdx.files.FileHandle[] list(java.io.FileFilter)
    public com.badlogic.gdx.files.FileHandle[] list(java.io.FilenameFilter)
    public com.badlogic.gdx.files.FileHandle[] list(java.lang.String)
    public java.nio.ByteBuffer map(java.nio.channels.FileChannel$MapMode)
com.badlogic.gdx.backends.android.AndroidFiles:
    public abstract boolean setAPKExpansion(int,int)
com.badlogic.gdx.backends.android.AndroidFragmentApplication$1
com.badlogic.gdx.backends.android.AndroidFragmentApplication$2
com.badlogic.gdx.backends.android.AndroidFragmentApplication$Callbacks
com.badlogic.gdx.backends.android.AndroidFragmentApplication
com.badlogic.gdx.backends.android.AndroidGL20:
    public void glActiveTexture(int)
    public void glBindAttribLocation(int,int,java.lang.String)
    public void glBlendColor(float,float,float,float)
    public void glBlendEquation(int)
    public void glBlendEquationSeparate(int,int)
    public void glBlendFunc(int,int)
    public void glClearDepthf(float)
    public void glClearStencil(int)
    public void glColorMask(boolean,boolean,boolean,boolean)
    public void glCompressedTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)
    public void glCopyTexImage2D(int,int,int,int,int,int,int,int)
    public void glCopyTexSubImage2D(int,int,int,int,int,int,int,int)
    public void glCullFace(int)
    public void glDeleteBuffers(int,java.nio.IntBuffer)
    public void glDeleteFramebuffers(int,java.nio.IntBuffer)
    public void glDeleteRenderbuffers(int,java.nio.IntBuffer)
    public void glDeleteTextures(int,java.nio.IntBuffer)
    public void glDepthFunc(int)
    public void glDepthRangef(float,float)
    public void glDetachShader(int,int)
    public void glFinish()
    public void glFlush()
    public void glFrontFace(int)
    public void glGenBuffers(int,java.nio.IntBuffer)
    public void glGenFramebuffers(int,java.nio.IntBuffer)
    public void glGenRenderbuffers(int,java.nio.IntBuffer)
    public void glGenTextures(int,java.nio.IntBuffer)
    public void glGetAttachedShaders(int,int,java.nio.Buffer,java.nio.IntBuffer)
    public void glGetBooleanv(int,java.nio.Buffer)
    public void glGetBufferParameteriv(int,int,java.nio.IntBuffer)
    public int glGetError()
    public void glGetFramebufferAttachmentParameteriv(int,int,int,java.nio.IntBuffer)
    public void glGetRenderbufferParameteriv(int,int,java.nio.IntBuffer)
    public void glGetShaderPrecisionFormat(int,int,java.nio.IntBuffer,java.nio.IntBuffer)
    public void glGetTexParameterfv(int,int,java.nio.FloatBuffer)
    public void glGetTexParameteriv(int,int,java.nio.IntBuffer)
    public void glGetUniformfv(int,int,java.nio.FloatBuffer)
    public void glGetUniformiv(int,int,java.nio.IntBuffer)
    public void glGetVertexAttribPointerv(int,int,java.nio.Buffer)
    public void glGetVertexAttribfv(int,int,java.nio.FloatBuffer)
    public void glGetVertexAttribiv(int,int,java.nio.IntBuffer)
    public void glHint(int,int)
    public boolean glIsBuffer(int)
    public boolean glIsEnabled(int)
    public boolean glIsFramebuffer(int)
    public boolean glIsProgram(int)
    public boolean glIsRenderbuffer(int)
    public boolean glIsShader(int)
    public boolean glIsTexture(int)
    public void glLineWidth(float)
    public void glPolygonOffset(float,float)
    public void glReadPixels(int,int,int,int,int,int,java.nio.Buffer)
    public void glReleaseShaderCompiler()
    public void glSampleCoverage(float,boolean)
    public void glShaderBinary(int,java.nio.IntBuffer,int,java.nio.Buffer,int)
    public void glStencilFunc(int,int,int)
    public void glStencilFuncSeparate(int,int,int,int)
    public void glStencilMask(int)
    public void glStencilMaskSeparate(int,int)
    public void glStencilOp(int,int,int)
    public void glStencilOpSeparate(int,int,int,int)
    public void glTexParameterfv(int,int,java.nio.FloatBuffer)
    public void glTexParameteriv(int,int,java.nio.IntBuffer)
    public void glTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)
    public void glUniform1f(int,float)
    public void glUniform1fv(int,int,java.nio.FloatBuffer)
    public void glUniform1fv(int,int,float[],int)
    public void glUniform1iv(int,int,java.nio.IntBuffer)
    public void glUniform1iv(int,int,int[],int)
    public void glUniform2f(int,float,float)
    public void glUniform2fv(int,int,java.nio.FloatBuffer)
    public void glUniform2fv(int,int,float[],int)
    public void glUniform2i(int,int,int)
    public void glUniform2iv(int,int,java.nio.IntBuffer)
    public void glUniform2iv(int,int,int[],int)
    public void glUniform3f(int,float,float,float)
    public void glUniform3fv(int,int,java.nio.FloatBuffer)
    public void glUniform3fv(int,int,float[],int)
    public void glUniform3i(int,int,int,int)
    public void glUniform3iv(int,int,java.nio.IntBuffer)
    public void glUniform3iv(int,int,int[],int)
    public void glUniform4f(int,float,float,float,float)
    public void glUniform4fv(int,int,java.nio.FloatBuffer)
    public void glUniform4fv(int,int,float[],int)
    public void glUniform4i(int,int,int,int,int)
    public void glUniform4iv(int,int,java.nio.IntBuffer)
    public void glUniform4iv(int,int,int[],int)
    public void glUniformMatrix2fv(int,int,boolean,java.nio.FloatBuffer)
    public void glUniformMatrix2fv(int,int,boolean,float[],int)
    public void glUniformMatrix3fv(int,int,boolean,java.nio.FloatBuffer)
    public void glUniformMatrix3fv(int,int,boolean,float[],int)
    public void glUniformMatrix4fv(int,int,boolean,java.nio.FloatBuffer)
    public void glValidateProgram(int)
    public void glVertexAttrib1f(int,float)
    public void glVertexAttrib1fv(int,java.nio.FloatBuffer)
    public void glVertexAttrib2f(int,float,float)
    public void glVertexAttrib2fv(int,java.nio.FloatBuffer)
    public void glVertexAttrib3f(int,float,float,float)
    public void glVertexAttrib3fv(int,java.nio.FloatBuffer)
    public void glVertexAttrib4f(int,float,float,float,float)
    public void glVertexAttrib4fv(int,java.nio.FloatBuffer)
com.badlogic.gdx.backends.android.AndroidGL30:
    public void glBeginQuery(int,int)
    public void glBeginTransformFeedback(int)
    public void glBindBufferBase(int,int,int)
    public void glBindBufferRange(int,int,int,int,int)
    public void glBindSampler(int,int)
    public void glBindTransformFeedback(int,int)
    public void glBlitFramebuffer(int,int,int,int,int,int,int,int,int,int)
    public void glClearBufferfi(int,int,float,int)
    public void glClearBufferfv(int,int,java.nio.FloatBuffer)
    public void glClearBufferiv(int,int,java.nio.IntBuffer)
    public void glClearBufferuiv(int,int,java.nio.IntBuffer)
    public void glCopyBufferSubData(int,int,int,int,int)
    public void glCopyTexSubImage3D(int,int,int,int,int,int,int,int,int)
    public void glDeleteQueries(int,java.nio.IntBuffer)
    public void glDeleteQueries(int,int[],int)
    public void glDeleteSamplers(int,java.nio.IntBuffer)
    public void glDeleteSamplers(int,int[],int)
    public void glDeleteTransformFeedbacks(int,java.nio.IntBuffer)
    public void glDeleteTransformFeedbacks(int,int[],int)
    public void glDeleteVertexArrays(int,int[],int)
    public void glDrawRangeElements(int,int,int,int,int,int)
    public void glDrawRangeElements(int,int,int,int,int,java.nio.Buffer)
    public void glEndQuery(int)
    public void glEndTransformFeedback()
    public void glFlushMappedBufferRange(int,int,int)
    public void glFramebufferTextureLayer(int,int,int,int,int)
    public void glGenQueries(int,java.nio.IntBuffer)
    public void glGenQueries(int,int[],int)
    public void glGenSamplers(int,java.nio.IntBuffer)
    public void glGenSamplers(int,int[],int)
    public void glGenTransformFeedbacks(int,java.nio.IntBuffer)
    public void glGenTransformFeedbacks(int,int[],int)
    public void glGenVertexArrays(int,int[],int)
    public java.lang.String glGetActiveUniformBlockName(int,int)
    public void glGetActiveUniformBlockName(int,int,java.nio.Buffer,java.nio.Buffer)
    public void glGetActiveUniformBlockiv(int,int,int,java.nio.IntBuffer)
    public void glGetActiveUniformsiv(int,int,java.nio.IntBuffer,int,java.nio.IntBuffer)
    public void glGetBufferParameteri64v(int,int,java.nio.LongBuffer)
    public java.nio.Buffer glGetBufferPointerv(int,int)
    public int glGetFragDataLocation(int,java.lang.String)
    public void glGetInteger64v(int,java.nio.LongBuffer)
    public void glGetQueryObjectuiv(int,int,java.nio.IntBuffer)
    public void glGetQueryiv(int,int,java.nio.IntBuffer)
    public void glGetSamplerParameterfv(int,int,java.nio.FloatBuffer)
    public void glGetSamplerParameteriv(int,int,java.nio.IntBuffer)
    public java.lang.String glGetStringi(int,int)
    public int glGetUniformBlockIndex(int,java.lang.String)
    public void glGetUniformIndices(int,java.lang.String[],java.nio.IntBuffer)
    public void glGetUniformuiv(int,int,java.nio.IntBuffer)
    public void glGetVertexAttribIiv(int,int,java.nio.IntBuffer)
    public void glGetVertexAttribIuiv(int,int,java.nio.IntBuffer)
    public void glInvalidateFramebuffer(int,int,java.nio.IntBuffer)
    public void glInvalidateSubFramebuffer(int,int,java.nio.IntBuffer,int,int,int,int)
    public boolean glIsQuery(int)
    public boolean glIsSampler(int)
    public boolean glIsTransformFeedback(int)
    public boolean glIsVertexArray(int)
    public java.nio.Buffer glMapBufferRange(int,int,int,int)
    public void glPauseTransformFeedback()
    public void glProgramParameteri(int,int,int)
    public void glReadBuffer(int)
    public void glRenderbufferStorageMultisample(int,int,int,int,int)
    public void glResumeTransformFeedback()
    public void glSamplerParameterf(int,int,float)
    public void glSamplerParameterfv(int,int,java.nio.FloatBuffer)
    public void glSamplerParameteri(int,int,int)
    public void glSamplerParameteriv(int,int,java.nio.IntBuffer)
    public void glTexImage2D(int,int,int,int,int,int,int,int,int)
    public void glTexImage3D(int,int,int,int,int,int,int,int,int,int)
    public void glTexSubImage2D(int,int,int,int,int,int,int,int,int)
    public void glTexSubImage3D(int,int,int,int,int,int,int,int,int,int,int)
    public void glTexSubImage3D(int,int,int,int,int,int,int,int,int,int,java.nio.Buffer)
    public void glTransformFeedbackVaryings(int,java.lang.String[],int)
    public void glUniform1uiv(int,int,java.nio.IntBuffer)
    public void glUniform3uiv(int,int,java.nio.IntBuffer)
    public void glUniform4uiv(int,int,java.nio.IntBuffer)
    public void glUniformBlockBinding(int,int,int)
    public void glUniformMatrix2x3fv(int,int,boolean,java.nio.FloatBuffer)
    public void glUniformMatrix2x4fv(int,int,boolean,java.nio.FloatBuffer)
    public void glUniformMatrix3x2fv(int,int,boolean,java.nio.FloatBuffer)
    public void glUniformMatrix3x4fv(int,int,boolean,java.nio.FloatBuffer)
    public void glUniformMatrix4x2fv(int,int,boolean,java.nio.FloatBuffer)
    public void glUniformMatrix4x3fv(int,int,boolean,java.nio.FloatBuffer)
    public boolean glUnmapBuffer(int)
    public void glVertexAttribDivisor(int,int)
    public void glVertexAttribI4i(int,int,int,int,int)
    public void glVertexAttribI4ui(int,int,int,int,int)
    public void glVertexAttribIPointer(int,int,int,int,int)
com.badlogic.gdx.backends.android.AndroidGraphics$AndroidMonitor
com.badlogic.gdx.backends.android.AndroidGraphics:
    private static final java.lang.String LOG_TAG
    public com.badlogic.gdx.Graphics$BufferFormat getBufferFormat()
    public float getDensity()
    public com.badlogic.gdx.Graphics$DisplayMode getDisplayMode(com.badlogic.gdx.Graphics$Monitor)
    public com.badlogic.gdx.Graphics$DisplayMode[] getDisplayModes()
    public com.badlogic.gdx.Graphics$DisplayMode[] getDisplayModes(com.badlogic.gdx.Graphics$Monitor)
    public long getFrameId()
    public int getFramesPerSecond()
    public com.badlogic.gdx.graphics.GL20 getGL20()
    public com.badlogic.gdx.graphics.GL30 getGL30()
    public com.badlogic.gdx.graphics.GL31 getGL31()
    public com.badlogic.gdx.graphics.GL32 getGL32()
    public com.badlogic.gdx.graphics.glutils.GLVersion getGLVersion()
    public com.badlogic.gdx.Graphics$Monitor getMonitor()
    public com.badlogic.gdx.Graphics$Monitor[] getMonitors()
    public float getPpcX()
    public float getPpcY()
    public float getPpiX()
    public float getPpiY()
    public com.badlogic.gdx.Graphics$Monitor getPrimaryMonitor()
    public int getSafeInsetBottom()
    public int getSafeInsetLeft()
    public int getSafeInsetRight()
    public int getSafeInsetTop()
    public com.badlogic.gdx.Graphics$GraphicsType getType()
    public boolean isFullscreen()
    public boolean isGL31Available()
    public boolean isGL32Available()
    public com.badlogic.gdx.graphics.Cursor newCursor(com.badlogic.gdx.graphics.Pixmap,int,int)
    public void setCursor(com.badlogic.gdx.graphics.Cursor)
    public void setForegroundFPS(int)
    public boolean setFullscreenMode(com.badlogic.gdx.Graphics$DisplayMode)
    public void setGL20(com.badlogic.gdx.graphics.GL20)
    public void setGL30(com.badlogic.gdx.graphics.GL30)
    public void setGL31(com.badlogic.gdx.graphics.GL31)
    public void setGL32(com.badlogic.gdx.graphics.GL32)
    public void setResizable(boolean)
    public void setSystemCursor(com.badlogic.gdx.graphics.Cursor$SystemCursor)
    public void setTitle(java.lang.String)
    public void setUndecorated(boolean)
    public void setVSync(boolean)
    public boolean setWindowedMode(int,int)
    public boolean supportsDisplayModeChange()
com.badlogic.gdx.backends.android.AndroidGraphicsLiveWallpaper$1
com.badlogic.gdx.backends.android.AndroidGraphicsLiveWallpaper
com.badlogic.gdx.backends.android.AndroidHaptics$1
com.badlogic.gdx.backends.android.AndroidHaptics:
    public boolean hasHapticsSupport()
    public boolean hasVibratorAvailable()
    public void vibrate(int)
    public void vibrate(int,int,boolean)
    public void vibrate(com.badlogic.gdx.Input$VibrationType)
com.badlogic.gdx.backends.android.AndroidInput:
    public abstract void onDreamingStarted()
    public abstract void onDreamingStopped()
com.badlogic.gdx.backends.android.AndroidLiveWallpaper
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine$1
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine$2
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine$3
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService
com.badlogic.gdx.backends.android.AndroidMouseHandler:
    private void logAction(int)
com.badlogic.gdx.backends.android.AndroidMusic:
    private float volume
    void <init>(com.badlogic.gdx.backends.android.AndroidAudio,android.media.MediaPlayer)
    public float getDuration()
    public float getPosition()
    public float getVolume()
    public boolean isLooping()
    public void setLooping(boolean)
    public void setOnCompletionListener(com.badlogic.gdx.audio.Music$OnCompletionListener)
    public void setPan(float,float)
    public void setPosition(float)
    public void setVolume(float)
    public void stop()
com.badlogic.gdx.backends.android.AndroidNet:
    public void cancelHttpRequest(com.badlogic.gdx.Net$HttpRequest)
    public com.badlogic.gdx.net.Socket newClientSocket(com.badlogic.gdx.Net$Protocol,java.lang.String,int,com.badlogic.gdx.net.SocketHints)
    public com.badlogic.gdx.net.ServerSocket newServerSocket(com.badlogic.gdx.Net$Protocol,int,com.badlogic.gdx.net.ServerSocketHints)
    public com.badlogic.gdx.net.ServerSocket newServerSocket(com.badlogic.gdx.Net$Protocol,java.lang.String,int,com.badlogic.gdx.net.ServerSocketHints)
    public void sendHttpRequest(com.badlogic.gdx.Net$HttpRequest,com.badlogic.gdx.Net$HttpResponseListener)
com.badlogic.gdx.backends.android.AndroidPreferences
com.badlogic.gdx.backends.android.AndroidSound
com.badlogic.gdx.backends.android.AndroidTouchHandler:
    private void logAction(int,int)
com.badlogic.gdx.backends.android.AndroidWallpaperListener
com.badlogic.gdx.backends.android.AndroidZipFileHandle:
    public android.content.res.AssetFileDescriptor getAssetFileDescriptor()
    public com.badlogic.gdx.files.FileHandle[] list()
    public com.badlogic.gdx.files.FileHandle[] list(java.io.FileFilter)
    public com.badlogic.gdx.files.FileHandle[] list(java.io.FilenameFilter)
    public com.badlogic.gdx.files.FileHandle[] list(java.lang.String)
com.badlogic.gdx.backends.android.AsynchronousAndroidAudio
com.badlogic.gdx.backends.android.AsynchronousSound$1
com.badlogic.gdx.backends.android.AsynchronousSound$2
com.badlogic.gdx.backends.android.AsynchronousSound$3
com.badlogic.gdx.backends.android.AsynchronousSound$4
com.badlogic.gdx.backends.android.AsynchronousSound$5
com.badlogic.gdx.backends.android.AsynchronousSound$6
com.badlogic.gdx.backends.android.AsynchronousSound$7
com.badlogic.gdx.backends.android.AsynchronousSound
com.badlogic.gdx.backends.android.BuildConfig
com.badlogic.gdx.backends.android.DefaultAndroidAudio:
    protected android.media.MediaPlayer createMediaPlayer()
    public java.lang.String[] getAvailableOutputDevices()
    public com.badlogic.gdx.audio.AudioDevice newAudioDevice(int,boolean)
    public com.badlogic.gdx.audio.AudioRecorder newAudioRecorder(int,boolean)
    public com.badlogic.gdx.audio.Music newMusic(com.badlogic.gdx.files.FileHandle)
    public com.badlogic.gdx.audio.Music newMusic(java.io.FileDescriptor)
    public com.badlogic.gdx.audio.Sound newSound(com.badlogic.gdx.files.FileHandle)
    public boolean switchOutputDevice(java.lang.String)
com.badlogic.gdx.backends.android.DefaultAndroidFiles:
    public com.badlogic.gdx.files.FileHandle absolute(java.lang.String)
    public com.badlogic.gdx.files.FileHandle external(java.lang.String)
    public boolean isExternalStorageAvailable()
    public boolean isLocalStorageAvailable()
    public com.badlogic.gdx.files.FileHandle local(java.lang.String)
    public boolean setAPKExpansion(int,int)
com.badlogic.gdx.backends.android.DefaultAndroidInput$3$1$1
com.badlogic.gdx.backends.android.DefaultAndroidInput$3$1
com.badlogic.gdx.backends.android.DefaultAndroidInput$3$2$1
com.badlogic.gdx.backends.android.DefaultAndroidInput$3$2
com.badlogic.gdx.backends.android.DefaultAndroidInput$3$3$1
com.badlogic.gdx.backends.android.DefaultAndroidInput$3$3
com.badlogic.gdx.backends.android.DefaultAndroidInput$3
com.badlogic.gdx.backends.android.DefaultAndroidInput$KeyEvent:
    static final int KEY_DOWN
    static final int KEY_TYPED
    static final int KEY_UP
com.badlogic.gdx.backends.android.DefaultAndroidInput$TouchEvent:
    static final int TOUCH_CANCELLED
    static final int TOUCH_DOWN
    static final int TOUCH_DRAGGED
    static final int TOUCH_MOVED
    static final int TOUCH_SCROLLED
    static final int TOUCH_UP
com.badlogic.gdx.backends.android.DefaultAndroidInput:
    public static final int NUM_TOUCHES
    public float getAccelerometerX()
    public float getAccelerometerY()
    public float getAccelerometerZ()
    public float getAzimuth()
    public int getDeltaX()
    public int getDeltaX(int)
    public int getDeltaY()
    public int getDeltaY(int)
    public float getGyroscopeX()
    public float getGyroscopeY()
    public float getGyroscopeZ()
    public com.badlogic.gdx.InputProcessor getInputProcessor()
    public int getMaxPointers()
    public com.badlogic.gdx.Input$Orientation getNativeOrientation()
    public float getPitch()
    public float getPressure()
    public float getPressure(int)
    public float getRoll()
    public void getRotationMatrix(float[])
    public void getTextInput(com.badlogic.gdx.Input$TextInputListener,java.lang.String,java.lang.String,java.lang.String)
    public void getTextInput(com.badlogic.gdx.Input$TextInputListener,java.lang.String,java.lang.String,java.lang.String,com.badlogic.gdx.Input$OnscreenKeyboardType)
    public int getX(int)
    public int getY(int)
    public boolean isButtonJustPressed(int)
    public boolean isCursorCatched()
    public boolean isPeripheralAvailable(com.badlogic.gdx.Input$Peripheral)
    public boolean justTouched()
    public void onDreamingStarted()
    public void onDreamingStopped()
    public void setCursorCatched(boolean)
    public void setCursorPosition(int,int)
    private void updateOrientation()
    public void vibrate(int)
    public void vibrate(int,int,boolean)
    public void vibrate(int,boolean)
    public void vibrate(com.badlogic.gdx.Input$VibrationType)
com.badlogic.gdx.backends.android.InputProcessorLW
com.badlogic.gdx.backends.android.R
com.badlogic.gdx.backends.android.ZipResourceFile$ZipEntryRO:
    public long mCRC32
    public long mCompressedLength
    public final java.io.File mFile
    public final java.lang.String mFileName
    public long mLocalHdrOffset
    public int mMethod
    public long mOffset
    public long mUncompressedLength
    public long mWhenModified
    public final java.lang.String mZipFileName
    public void <init>(java.lang.String,java.io.File,java.lang.String)
    public android.content.res.AssetFileDescriptor getAssetFileDescriptor()
    public long getOffset()
    public java.io.File getZipFile()
    public java.lang.String getZipFileName()
    public boolean isUncompressed()
    public void setOffsetFromFile(java.io.RandomAccessFile,java.nio.ByteBuffer)
com.badlogic.gdx.backends.android.ZipResourceFile:
    static final boolean LOGV
    static final java.lang.String LOG_TAG
    static final int kCDECRC
    static final int kCDECommentLen
    static final int kCDECompLen
    static final int kCDEExtraLen
    static final int kCDELen
    static final int kCDELocalOffset
    static final int kCDEMethod
    static final int kCDEModWhen
    static final int kCDENameLen
    static final int kCDESignature
    static final int kCDEUncompLen
    static final int kCompressDeflated
    static final int kCompressStored
    static final int kEOCDFileOffset
    static final int kEOCDLen
    static final int kEOCDNumEntries
    static final int kEOCDSignature
    static final int kEOCDSize
    static final int kLFHExtraLen
    static final int kLFHLen
    static final int kLFHNameLen
    static final int kLFHSignature
    static final int kMaxCommentLen
    static final int kMaxEOCDSearch
    static final int kZipEntryAdj
    private java.util.HashMap mHashMap
    java.nio.ByteBuffer mLEByteBuffer
    public java.util.HashMap mZipFiles
    public void <init>(java.lang.String)
    void addPatchFile(java.lang.String)
    public com.badlogic.gdx.backends.android.ZipResourceFile$ZipEntryRO[] getAllEntries()
    private static int read4LE(java.io.RandomAccessFile)
    private static int swapEndian(int)
    private static int swapEndian(short)
com.badlogic.gdx.backends.android.surfaceview.FixedResolutionStrategy
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$ConfigChooser:
    private void printConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig)
    private void printConfigs(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[])
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20:
    private static final boolean DEBUG
    public void <init>(android.content.Context,com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy)
    public void <init>(android.content.Context,boolean,int,int,com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy)
com.badlogic.gdx.backends.android.surfaceview.GdxEglConfigChooser:
    public static final int EGL_COVERAGE_BUFFERS_NV
    public static final int EGL_COVERAGE_SAMPLES_NV
    private static final int EGL_OPENGL_ES2_BIT
    private static final java.lang.String TAG
    private void printConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig)
    private void printConfigs(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[])
com.badlogic.gdx.backends.android.surfaceview.RatioResolutionStrategy
com.badlogic.gdx.controllers.AbstractController
com.badlogic.gdx.controllers.AbstractControllerManager:
    public com.badlogic.gdx.utils.Array getControllers()
    public com.badlogic.gdx.controllers.Controller getCurrentController()
com.badlogic.gdx.controllers.Controller:
    public static final int PLAYER_IDX_UNSET
    public abstract void addListener(com.badlogic.gdx.controllers.ControllerListener)
    public abstract boolean canVibrate()
    public abstract void cancelVibration()
    public abstract float getAxis(int)
    public abstract int getAxisCount()
    public abstract boolean getButton(int)
    public abstract com.badlogic.gdx.controllers.ControllerMapping getMapping()
    public abstract int getMaxButtonIndex()
    public abstract int getMinButtonIndex()
    public abstract java.lang.String getName()
    public abstract int getPlayerIndex()
    public abstract com.badlogic.gdx.controllers.ControllerPowerLevel getPowerLevel()
    public abstract java.lang.String getUniqueId()
    public abstract boolean isConnected()
    public abstract boolean isVibrating()
    public abstract void removeListener(com.badlogic.gdx.controllers.ControllerListener)
    public abstract void setPlayerIndex(int)
    public abstract void startVibration(int,float)
    public abstract boolean supportsPlayerIndex()
com.badlogic.gdx.controllers.ControllerAdapter:
    public boolean axisMoved(com.badlogic.gdx.controllers.Controller,int,float)
    public boolean buttonDown(com.badlogic.gdx.controllers.Controller,int)
    public boolean buttonUp(com.badlogic.gdx.controllers.Controller,int)
    public void connected(com.badlogic.gdx.controllers.Controller)
    public void disconnected(com.badlogic.gdx.controllers.Controller)
com.badlogic.gdx.controllers.ControllerManager
com.badlogic.gdx.controllers.ControllerManagerStub
com.badlogic.gdx.controllers.ControllerMapping
com.badlogic.gdx.controllers.ControllerPowerLevel
com.badlogic.gdx.controllers.Controllers$1
com.badlogic.gdx.controllers.Controllers
com.badlogic.gdx.controllers.android.AndroidController:
    private boolean attached
    public void addListener(com.badlogic.gdx.controllers.ControllerListener)
    public boolean canVibrate()
    public void cancelVibration()
    public int getAxisCount()
    public int getDeviceId()
    public com.badlogic.gdx.controllers.ControllerMapping getMapping()
    public int getMaxButtonIndex()
    public int getMinButtonIndex()
    public int getPlayerIndex()
    public com.badlogic.gdx.controllers.ControllerPowerLevel getPowerLevel()
    public java.lang.String getUniqueId()
    public boolean isAttached()
    public boolean isConnected()
    public boolean isVibrating()
    public void removeListener(com.badlogic.gdx.controllers.ControllerListener)
    public void setAttached(boolean)
    public void setPlayerIndex(int)
    public void startVibration(int,float)
    public boolean supportsPlayerIndex()
com.badlogic.gdx.controllers.android.AndroidControllerEvent:
    public static final int AXIS
    public static final int BUTTON_DOWN
    public static final int BUTTON_UP
    public static final int CONNECTED
    public static final int DISCONNECTED
com.badlogic.gdx.controllers.android.AndroidControllerMapping
com.badlogic.gdx.controllers.android.AndroidControllers:
    private static final java.lang.String TAG
    public void addListener(com.badlogic.gdx.controllers.ControllerListener)
    public void clearListeners()
    public com.badlogic.gdx.utils.Array getListeners()
    public void removeListener(com.badlogic.gdx.controllers.ControllerListener)
com.badlogic.gdx.controllers.android.ControllerLifeCycleListener:
    private static final java.lang.String TAG
com.badlogic.gdx.files.FileHandle:
    public void <init>(java.io.File)
    public void <init>(java.lang.String)
    private static void copyDirectory(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle)
    private static void copyFile(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle)
    public void copyTo(com.badlogic.gdx.files.FileHandle)
    public boolean delete()
    public boolean deleteDirectory()
    private static boolean deleteDirectory(java.io.File)
    public void emptyDirectory()
    private static void emptyDirectory(java.io.File,boolean)
    public void emptyDirectory(boolean)
    public long lastModified()
    public com.badlogic.gdx.files.FileHandle[] list()
    public com.badlogic.gdx.files.FileHandle[] list(java.io.FileFilter)
    public com.badlogic.gdx.files.FileHandle[] list(java.io.FilenameFilter)
    public com.badlogic.gdx.files.FileHandle[] list(java.lang.String)
    public java.nio.ByteBuffer map()
    public java.nio.ByteBuffer map(java.nio.channels.FileChannel$MapMode)
    public void mkdirs()
    public void moveTo(com.badlogic.gdx.files.FileHandle)
    public java.lang.String pathWithoutExtension()
    public java.io.BufferedInputStream read(int)
    public int readBytes(byte[],int,int)
    public java.lang.String readString()
    public java.lang.String readString(java.lang.String)
    public java.io.BufferedReader reader(int,java.lang.String)
    public java.io.Reader reader()
    public static com.badlogic.gdx.files.FileHandle tempDirectory(java.lang.String)
    public static com.badlogic.gdx.files.FileHandle tempFile(java.lang.String)
    public java.io.OutputStream write(boolean)
    public java.io.OutputStream write(boolean,int)
    public void write(java.io.InputStream,boolean)
    public void writeBytes(byte[],int,int,boolean)
    public void writeBytes(byte[],boolean)
    public void writeString(java.lang.String,boolean)
    public void writeString(java.lang.String,boolean,java.lang.String)
    public java.io.Writer writer(boolean)
    public java.io.Writer writer(boolean,java.lang.String)
com.badlogic.gdx.files.FileHandleStream
com.badlogic.gdx.graphics.Camera:
    public com.badlogic.gdx.math.collision.Ray getPickRay(float,float)
    public com.badlogic.gdx.math.collision.Ray getPickRay(float,float,float,float,float,float)
    public void lookAt(float,float,float)
    public void lookAt(com.badlogic.gdx.math.Vector3)
    public void normalizeUp()
    public com.badlogic.gdx.math.Vector3 project(com.badlogic.gdx.math.Vector3)
    public void rotate(float,float,float,float)
    public void rotate(com.badlogic.gdx.math.Matrix4)
    public void rotate(com.badlogic.gdx.math.Quaternion)
    public void rotate(com.badlogic.gdx.math.Vector3,float)
    public void rotateAround(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,float)
    public void transform(com.badlogic.gdx.math.Matrix4)
    public void translate(float,float,float)
    public void translate(com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.Vector3 unproject(com.badlogic.gdx.math.Vector3)
    public abstract void update(boolean)
com.badlogic.gdx.graphics.Colors:
    private void <init>()
    public static com.badlogic.gdx.utils.ObjectMap getColors()
    public static com.badlogic.gdx.graphics.Color put(java.lang.String,com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.graphics.Cubemap$1:
    public void finishedLoading(com.badlogic.gdx.assets.AssetManager,java.lang.String,java.lang.Class)
com.badlogic.gdx.graphics.Cubemap$CubemapSide
com.badlogic.gdx.graphics.Cubemap:
    public void <init>(int,int,int,com.badlogic.gdx.graphics.Pixmap$Format)
    public void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle)
    public void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)
    public void <init>(com.badlogic.gdx.graphics.CubemapData)
    public void <init>(com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap)
    public void <init>(com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,boolean)
    public void <init>(com.badlogic.gdx.graphics.TextureData,com.badlogic.gdx.graphics.TextureData,com.badlogic.gdx.graphics.TextureData,com.badlogic.gdx.graphics.TextureData,com.badlogic.gdx.graphics.TextureData,com.badlogic.gdx.graphics.TextureData)
    private static void addManagedCubemap(com.badlogic.gdx.Application,com.badlogic.gdx.graphics.Cubemap)
    public int getDepth()
    public int getHeight()
    public static int getNumManagedCubemaps()
    public int getWidth()
    public static void setAssetManager(com.badlogic.gdx.assets.AssetManager)
com.badlogic.gdx.graphics.CubemapData:
    public abstract int getHeight()
    public abstract int getWidth()
com.badlogic.gdx.graphics.Cursor$SystemCursor
com.badlogic.gdx.graphics.Cursor
com.badlogic.gdx.graphics.FPSLogger
com.badlogic.gdx.graphics.GL20:
    public static final int GL_ACTIVE_ATTRIBUTES
    public static final int GL_ACTIVE_ATTRIBUTE_MAX_LENGTH
    public static final int GL_ACTIVE_TEXTURE
    public static final int GL_ACTIVE_UNIFORMS
    public static final int GL_ACTIVE_UNIFORM_MAX_LENGTH
    public static final int GL_ALIASED_LINE_WIDTH_RANGE
    public static final int GL_ALIASED_POINT_SIZE_RANGE
    public static final int GL_ALPHA
    public static final int GL_ALPHA_BITS
    public static final int GL_ALWAYS
    public static final int GL_ARRAY_BUFFER
    public static final int GL_ARRAY_BUFFER_BINDING
    public static final int GL_ATTACHED_SHADERS
    public static final int GL_BACK
    public static final int GL_BLEND
    public static final int GL_BLEND_COLOR
    public static final int GL_BLEND_DST_ALPHA
    public static final int GL_BLEND_DST_RGB
    public static final int GL_BLEND_EQUATION
    public static final int GL_BLEND_EQUATION_ALPHA
    public static final int GL_BLEND_EQUATION_RGB
    public static final int GL_BLEND_SRC_ALPHA
    public static final int GL_BLEND_SRC_RGB
    public static final int GL_BLUE_BITS
    public static final int GL_BOOL
    public static final int GL_BOOL_VEC2
    public static final int GL_BOOL_VEC3
    public static final int GL_BOOL_VEC4
    public static final int GL_BUFFER_SIZE
    public static final int GL_BUFFER_USAGE
    public static final int GL_BYTE
    public static final int GL_CCW
    public static final int GL_CLAMP_TO_EDGE
    public static final int GL_COLOR_ATTACHMENT0
    public static final int GL_COLOR_BUFFER_BIT
    public static final int GL_COLOR_CLEAR_VALUE
    public static final int GL_COLOR_WRITEMASK
    public static final int GL_COMPILE_STATUS
    public static final int GL_COMPRESSED_TEXTURE_FORMATS
    public static final int GL_CONSTANT_ALPHA
    public static final int GL_CONSTANT_COLOR
    public static final int GL_COVERAGE_BUFFER_BIT_NV
    public static final int GL_CULL_FACE
    public static final int GL_CULL_FACE_MODE
    public static final int GL_CURRENT_PROGRAM
    public static final int GL_CURRENT_VERTEX_ATTRIB
    public static final int GL_CW
    public static final int GL_DECR
    public static final int GL_DECR_WRAP
    public static final int GL_DELETE_STATUS
    public static final int GL_DEPTH_ATTACHMENT
    public static final int GL_DEPTH_BITS
    public static final int GL_DEPTH_BUFFER_BIT
    public static final int GL_DEPTH_CLEAR_VALUE
    public static final int GL_DEPTH_COMPONENT
    public static final int GL_DEPTH_COMPONENT16
    public static final int GL_DEPTH_FUNC
    public static final int GL_DEPTH_RANGE
    public static final int GL_DEPTH_TEST
    public static final int GL_DEPTH_WRITEMASK
    public static final int GL_DITHER
    public static final int GL_DONT_CARE
    public static final int GL_DST_ALPHA
    public static final int GL_DST_COLOR
    public static final int GL_DYNAMIC_DRAW
    public static final int GL_ELEMENT_ARRAY_BUFFER
    public static final int GL_ELEMENT_ARRAY_BUFFER_BINDING
    public static final int GL_EQUAL
    public static final int GL_ES_VERSION_2_0
    public static final int GL_EXTENSIONS
    public static final int GL_FALSE
    public static final int GL_FASTEST
    public static final int GL_FIXED
    public static final int GL_FLOAT
    public static final int GL_FLOAT_MAT2
    public static final int GL_FLOAT_MAT3
    public static final int GL_FLOAT_MAT4
    public static final int GL_FLOAT_VEC2
    public static final int GL_FLOAT_VEC3
    public static final int GL_FLOAT_VEC4
    public static final int GL_FRAGMENT_SHADER
    public static final int GL_FRAMEBUFFER
    public static final int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
    public static final int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
    public static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
    public static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
    public static final int GL_FRAMEBUFFER_BINDING
    public static final int GL_FRAMEBUFFER_COMPLETE
    public static final int GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
    public static final int GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS
    public static final int GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
    public static final int GL_FRAMEBUFFER_UNSUPPORTED
    public static final int GL_FRONT
    public static final int GL_FRONT_AND_BACK
    public static final int GL_FRONT_FACE
    public static final int GL_FUNC_ADD
    public static final int GL_FUNC_REVERSE_SUBTRACT
    public static final int GL_FUNC_SUBTRACT
    public static final int GL_GENERATE_MIPMAP
    public static final int GL_GENERATE_MIPMAP_HINT
    public static final int GL_GEQUAL
    public static final int GL_GREATER
    public static final int GL_GREEN_BITS
    public static final int GL_HIGH_FLOAT
    public static final int GL_HIGH_INT
    public static final int GL_IMPLEMENTATION_COLOR_READ_FORMAT
    public static final int GL_IMPLEMENTATION_COLOR_READ_TYPE
    public static final int GL_INCR
    public static final int GL_INCR_WRAP
    public static final int GL_INFO_LOG_LENGTH
    public static final int GL_INT
    public static final int GL_INT_VEC2
    public static final int GL_INT_VEC3
    public static final int GL_INT_VEC4
    public static final int GL_INVALID_ENUM
    public static final int GL_INVALID_FRAMEBUFFER_OPERATION
    public static final int GL_INVALID_OPERATION
    public static final int GL_INVALID_VALUE
    public static final int GL_INVERT
    public static final int GL_KEEP
    public static final int GL_LEQUAL
    public static final int GL_LESS
    public static final int GL_LINEAR
    public static final int GL_LINEAR_MIPMAP_LINEAR
    public static final int GL_LINEAR_MIPMAP_NEAREST
    public static final int GL_LINES
    public static final int GL_LINE_LOOP
    public static final int GL_LINE_STRIP
    public static final int GL_LINE_WIDTH
    public static final int GL_LINK_STATUS
    public static final int GL_LOW_FLOAT
    public static final int GL_LOW_INT
    public static final int GL_LUMINANCE
    public static final int GL_LUMINANCE_ALPHA
    public static final int GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS
    public static final int GL_MAX_CUBE_MAP_TEXTURE_SIZE
    public static final int GL_MAX_FRAGMENT_UNIFORM_VECTORS
    public static final int GL_MAX_RENDERBUFFER_SIZE
    public static final int GL_MAX_TEXTURE_IMAGE_UNITS
    public static final int GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT
    public static final int GL_MAX_TEXTURE_SIZE
    public static final int GL_MAX_TEXTURE_UNITS
    public static final int GL_MAX_VARYING_VECTORS
    public static final int GL_MAX_VERTEX_ATTRIBS
    public static final int GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS
    public static final int GL_MAX_VERTEX_UNIFORM_VECTORS
    public static final int GL_MAX_VIEWPORT_DIMS
    public static final int GL_MEDIUM_FLOAT
    public static final int GL_MEDIUM_INT
    public static final int GL_MIRRORED_REPEAT
    public static final int GL_NEAREST
    public static final int GL_NEAREST_MIPMAP_LINEAR
    public static final int GL_NEAREST_MIPMAP_NEAREST
    public static final int GL_NEVER
    public static final int GL_NICEST
    public static final int GL_NONE
    public static final int GL_NOTEQUAL
    public static final int GL_NO_ERROR
    public static final int GL_NUM_COMPRESSED_TEXTURE_FORMATS
    public static final int GL_NUM_SHADER_BINARY_FORMATS
    public static final int GL_ONE
    public static final int GL_ONE_MINUS_CONSTANT_ALPHA
    public static final int GL_ONE_MINUS_CONSTANT_COLOR
    public static final int GL_ONE_MINUS_DST_ALPHA
    public static final int GL_ONE_MINUS_DST_COLOR
    public static final int GL_ONE_MINUS_SRC_ALPHA
    public static final int GL_ONE_MINUS_SRC_COLOR
    public static final int GL_OUT_OF_MEMORY
    public static final int GL_PACK_ALIGNMENT
    public static final int GL_POINTS
    public static final int GL_POLYGON_OFFSET_FACTOR
    public static final int GL_POLYGON_OFFSET_FILL
    public static final int GL_POLYGON_OFFSET_UNITS
    public static final int GL_RED_BITS
    public static final int GL_RENDERBUFFER
    public static final int GL_RENDERBUFFER_ALPHA_SIZE
    public static final int GL_RENDERBUFFER_BINDING
    public static final int GL_RENDERBUFFER_BLUE_SIZE
    public static final int GL_RENDERBUFFER_DEPTH_SIZE
    public static final int GL_RENDERBUFFER_GREEN_SIZE
    public static final int GL_RENDERBUFFER_HEIGHT
    public static final int GL_RENDERBUFFER_INTERNAL_FORMAT
    public static final int GL_RENDERBUFFER_RED_SIZE
    public static final int GL_RENDERBUFFER_STENCIL_SIZE
    public static final int GL_RENDERBUFFER_WIDTH
    public static final int GL_RENDERER
    public static final int GL_REPEAT
    public static final int GL_REPLACE
    public static final int GL_RGB
    public static final int GL_RGB565
    public static final int GL_RGB5_A1
    public static final int GL_RGBA
    public static final int GL_RGBA4
    public static final int GL_SAMPLER_2D
    public static final int GL_SAMPLER_CUBE
    public static final int GL_SAMPLES
    public static final int GL_SAMPLE_ALPHA_TO_COVERAGE
    public static final int GL_SAMPLE_BUFFERS
    public static final int GL_SAMPLE_COVERAGE
    public static final int GL_SAMPLE_COVERAGE_INVERT
    public static final int GL_SAMPLE_COVERAGE_VALUE
    public static final int GL_SCISSOR_BOX
    public static final int GL_SCISSOR_TEST
    public static final int GL_SHADER_BINARY_FORMATS
    public static final int GL_SHADER_COMPILER
    public static final int GL_SHADER_SOURCE_LENGTH
    public static final int GL_SHADER_TYPE
    public static final int GL_SHADING_LANGUAGE_VERSION
    public static final int GL_SHORT
    public static final int GL_SRC_ALPHA
    public static final int GL_SRC_ALPHA_SATURATE
    public static final int GL_SRC_COLOR
    public static final int GL_STATIC_DRAW
    public static final int GL_STENCIL_ATTACHMENT
    public static final int GL_STENCIL_BACK_FAIL
    public static final int GL_STENCIL_BACK_FUNC
    public static final int GL_STENCIL_BACK_PASS_DEPTH_FAIL
    public static final int GL_STENCIL_BACK_PASS_DEPTH_PASS
    public static final int GL_STENCIL_BACK_REF
    public static final int GL_STENCIL_BACK_VALUE_MASK
    public static final int GL_STENCIL_BACK_WRITEMASK
    public static final int GL_STENCIL_BITS
    public static final int GL_STENCIL_BUFFER_BIT
    public static final int GL_STENCIL_CLEAR_VALUE
    public static final int GL_STENCIL_FAIL
    public static final int GL_STENCIL_FUNC
    public static final int GL_STENCIL_INDEX
    public static final int GL_STENCIL_INDEX8
    public static final int GL_STENCIL_PASS_DEPTH_FAIL
    public static final int GL_STENCIL_PASS_DEPTH_PASS
    public static final int GL_STENCIL_REF
    public static final int GL_STENCIL_TEST
    public static final int GL_STENCIL_VALUE_MASK
    public static final int GL_STENCIL_WRITEMASK
    public static final int GL_STREAM_DRAW
    public static final int GL_SUBPIXEL_BITS
    public static final int GL_TEXTURE
    public static final int GL_TEXTURE0
    public static final int GL_TEXTURE1
    public static final int GL_TEXTURE10
    public static final int GL_TEXTURE11
    public static final int GL_TEXTURE12
    public static final int GL_TEXTURE13
    public static final int GL_TEXTURE14
    public static final int GL_TEXTURE15
    public static final int GL_TEXTURE16
    public static final int GL_TEXTURE17
    public static final int GL_TEXTURE18
    public static final int GL_TEXTURE19
    public static final int GL_TEXTURE2
    public static final int GL_TEXTURE20
    public static final int GL_TEXTURE21
    public static final int GL_TEXTURE22
    public static final int GL_TEXTURE23
    public static final int GL_TEXTURE24
    public static final int GL_TEXTURE25
    public static final int GL_TEXTURE26
    public static final int GL_TEXTURE27
    public static final int GL_TEXTURE28
    public static final int GL_TEXTURE29
    public static final int GL_TEXTURE3
    public static final int GL_TEXTURE30
    public static final int GL_TEXTURE31
    public static final int GL_TEXTURE4
    public static final int GL_TEXTURE5
    public static final int GL_TEXTURE6
    public static final int GL_TEXTURE7
    public static final int GL_TEXTURE8
    public static final int GL_TEXTURE9
    public static final int GL_TEXTURE_2D
    public static final int GL_TEXTURE_BINDING_2D
    public static final int GL_TEXTURE_BINDING_CUBE_MAP
    public static final int GL_TEXTURE_CUBE_MAP
    public static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_X
    public static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
    public static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
    public static final int GL_TEXTURE_CUBE_MAP_POSITIVE_X
    public static final int GL_TEXTURE_CUBE_MAP_POSITIVE_Y
    public static final int GL_TEXTURE_CUBE_MAP_POSITIVE_Z
    public static final int GL_TEXTURE_MAG_FILTER
    public static final int GL_TEXTURE_MAX_ANISOTROPY_EXT
    public static final int GL_TEXTURE_MIN_FILTER
    public static final int GL_TEXTURE_WRAP_S
    public static final int GL_TEXTURE_WRAP_T
    public static final int GL_TRIANGLES
    public static final int GL_TRIANGLE_FAN
    public static final int GL_TRIANGLE_STRIP
    public static final int GL_TRUE
    public static final int GL_UNPACK_ALIGNMENT
    public static final int GL_UNSIGNED_BYTE
    public static final int GL_UNSIGNED_INT
    public static final int GL_UNSIGNED_SHORT
    public static final int GL_UNSIGNED_SHORT_4_4_4_4
    public static final int GL_UNSIGNED_SHORT_5_5_5_1
    public static final int GL_UNSIGNED_SHORT_5_6_5
    public static final int GL_VALIDATE_STATUS
    public static final int GL_VENDOR
    public static final int GL_VERSION
    public static final int GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
    public static final int GL_VERTEX_ATTRIB_ARRAY_ENABLED
    public static final int GL_VERTEX_ATTRIB_ARRAY_NORMALIZED
    public static final int GL_VERTEX_ATTRIB_ARRAY_POINTER
    public static final int GL_VERTEX_ATTRIB_ARRAY_SIZE
    public static final int GL_VERTEX_ATTRIB_ARRAY_STRIDE
    public static final int GL_VERTEX_ATTRIB_ARRAY_TYPE
    public static final int GL_VERTEX_PROGRAM_POINT_SIZE
    public static final int GL_VERTEX_SHADER
    public static final int GL_VIEWPORT
    public static final int GL_ZERO
    public abstract void glActiveTexture(int)
    public abstract void glBindAttribLocation(int,int,java.lang.String)
    public abstract void glBlendColor(float,float,float,float)
    public abstract void glBlendEquation(int)
    public abstract void glBlendEquationSeparate(int,int)
    public abstract void glBlendFunc(int,int)
    public abstract void glClearDepthf(float)
    public abstract void glClearStencil(int)
    public abstract void glColorMask(boolean,boolean,boolean,boolean)
    public abstract void glCompressedTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)
    public abstract void glCopyTexImage2D(int,int,int,int,int,int,int,int)
    public abstract void glCopyTexSubImage2D(int,int,int,int,int,int,int,int)
    public abstract void glCullFace(int)
    public abstract void glDeleteBuffers(int,java.nio.IntBuffer)
    public abstract void glDeleteFramebuffers(int,java.nio.IntBuffer)
    public abstract void glDeleteRenderbuffers(int,java.nio.IntBuffer)
    public abstract void glDeleteTextures(int,java.nio.IntBuffer)
    public abstract void glDepthFunc(int)
    public abstract void glDepthRangef(float,float)
    public abstract void glDetachShader(int,int)
    public abstract void glFinish()
    public abstract void glFlush()
    public abstract void glFrontFace(int)
    public abstract void glGenBuffers(int,java.nio.IntBuffer)
    public abstract void glGenFramebuffers(int,java.nio.IntBuffer)
    public abstract void glGenRenderbuffers(int,java.nio.IntBuffer)
    public abstract void glGenTextures(int,java.nio.IntBuffer)
    public abstract void glGetAttachedShaders(int,int,java.nio.Buffer,java.nio.IntBuffer)
    public abstract void glGetBooleanv(int,java.nio.Buffer)
    public abstract void glGetBufferParameteriv(int,int,java.nio.IntBuffer)
    public abstract int glGetError()
    public abstract void glGetFramebufferAttachmentParameteriv(int,int,int,java.nio.IntBuffer)
    public abstract void glGetRenderbufferParameteriv(int,int,java.nio.IntBuffer)
    public abstract void glGetShaderPrecisionFormat(int,int,java.nio.IntBuffer,java.nio.IntBuffer)
    public abstract void glGetTexParameterfv(int,int,java.nio.FloatBuffer)
    public abstract void glGetTexParameteriv(int,int,java.nio.IntBuffer)
    public abstract void glGetUniformfv(int,int,java.nio.FloatBuffer)
    public abstract void glGetUniformiv(int,int,java.nio.IntBuffer)
    public abstract void glGetVertexAttribPointerv(int,int,java.nio.Buffer)
    public abstract void glGetVertexAttribfv(int,int,java.nio.FloatBuffer)
    public abstract void glGetVertexAttribiv(int,int,java.nio.IntBuffer)
    public abstract void glHint(int,int)
    public abstract boolean glIsBuffer(int)
    public abstract boolean glIsEnabled(int)
    public abstract boolean glIsFramebuffer(int)
    public abstract boolean glIsProgram(int)
    public abstract boolean glIsRenderbuffer(int)
    public abstract boolean glIsShader(int)
    public abstract boolean glIsTexture(int)
    public abstract void glLineWidth(float)
    public abstract void glPolygonOffset(float,float)
    public abstract void glReadPixels(int,int,int,int,int,int,java.nio.Buffer)
    public abstract void glReleaseShaderCompiler()
    public abstract void glSampleCoverage(float,boolean)
    public abstract void glShaderBinary(int,java.nio.IntBuffer,int,java.nio.Buffer,int)
    public abstract void glStencilFunc(int,int,int)
    public abstract void glStencilFuncSeparate(int,int,int,int)
    public abstract void glStencilMask(int)
    public abstract void glStencilMaskSeparate(int,int)
    public abstract void glStencilOp(int,int,int)
    public abstract void glStencilOpSeparate(int,int,int,int)
    public abstract void glTexParameterfv(int,int,java.nio.FloatBuffer)
    public abstract void glTexParameteriv(int,int,java.nio.IntBuffer)
    public abstract void glTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)
    public abstract void glUniform1f(int,float)
    public abstract void glUniform1fv(int,int,java.nio.FloatBuffer)
    public abstract void glUniform1fv(int,int,float[],int)
    public abstract void glUniform1iv(int,int,java.nio.IntBuffer)
    public abstract void glUniform1iv(int,int,int[],int)
    public abstract void glUniform2f(int,float,float)
    public abstract void glUniform2fv(int,int,java.nio.FloatBuffer)
    public abstract void glUniform2fv(int,int,float[],int)
    public abstract void glUniform2i(int,int,int)
    public abstract void glUniform2iv(int,int,java.nio.IntBuffer)
    public abstract void glUniform2iv(int,int,int[],int)
    public abstract void glUniform3f(int,float,float,float)
    public abstract void glUniform3fv(int,int,java.nio.FloatBuffer)
    public abstract void glUniform3fv(int,int,float[],int)
    public abstract void glUniform3i(int,int,int,int)
    public abstract void glUniform3iv(int,int,java.nio.IntBuffer)
    public abstract void glUniform3iv(int,int,int[],int)
    public abstract void glUniform4f(int,float,float,float,float)
    public abstract void glUniform4fv(int,int,java.nio.FloatBuffer)
    public abstract void glUniform4fv(int,int,float[],int)
    public abstract void glUniform4i(int,int,int,int,int)
    public abstract void glUniform4iv(int,int,java.nio.IntBuffer)
    public abstract void glUniform4iv(int,int,int[],int)
    public abstract void glUniformMatrix2fv(int,int,boolean,java.nio.FloatBuffer)
    public abstract void glUniformMatrix2fv(int,int,boolean,float[],int)
    public abstract void glUniformMatrix3fv(int,int,boolean,java.nio.FloatBuffer)
    public abstract void glUniformMatrix3fv(int,int,boolean,float[],int)
    public abstract void glUniformMatrix4fv(int,int,boolean,java.nio.FloatBuffer)
    public abstract void glValidateProgram(int)
    public abstract void glVertexAttrib1f(int,float)
    public abstract void glVertexAttrib1fv(int,java.nio.FloatBuffer)
    public abstract void glVertexAttrib2f(int,float,float)
    public abstract void glVertexAttrib2fv(int,java.nio.FloatBuffer)
    public abstract void glVertexAttrib3f(int,float,float,float)
    public abstract void glVertexAttrib3fv(int,java.nio.FloatBuffer)
    public abstract void glVertexAttrib4f(int,float,float,float,float)
    public abstract void glVertexAttrib4fv(int,java.nio.FloatBuffer)
com.badlogic.gdx.graphics.GL30:
    public static final int GL_ACTIVE_UNIFORM_BLOCKS
    public static final int GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
    public static final int GL_ALREADY_SIGNALED
    public static final int GL_ANY_SAMPLES_PASSED
    public static final int GL_ANY_SAMPLES_PASSED_CONSERVATIVE
    public static final int GL_BLUE
    public static final int GL_BUFFER_ACCESS_FLAGS
    public static final int GL_BUFFER_MAPPED
    public static final int GL_BUFFER_MAP_LENGTH
    public static final int GL_BUFFER_MAP_OFFSET
    public static final int GL_BUFFER_MAP_POINTER
    public static final int GL_COLOR
    public static final int GL_COLOR_ATTACHMENT1
    public static final int GL_COLOR_ATTACHMENT10
    public static final int GL_COLOR_ATTACHMENT11
    public static final int GL_COLOR_ATTACHMENT12
    public static final int GL_COLOR_ATTACHMENT13
    public static final int GL_COLOR_ATTACHMENT14
    public static final int GL_COLOR_ATTACHMENT15
    public static final int GL_COLOR_ATTACHMENT2
    public static final int GL_COLOR_ATTACHMENT3
    public static final int GL_COLOR_ATTACHMENT4
    public static final int GL_COLOR_ATTACHMENT5
    public static final int GL_COLOR_ATTACHMENT6
    public static final int GL_COLOR_ATTACHMENT7
    public static final int GL_COLOR_ATTACHMENT8
    public static final int GL_COLOR_ATTACHMENT9
    public static final int GL_COMPARE_REF_TO_TEXTURE
    public static final int GL_COMPRESSED_R11_EAC
    public static final int GL_COMPRESSED_RG11_EAC
    public static final int GL_COMPRESSED_RGB8_ETC2
    public static final int GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2
    public static final int GL_COMPRESSED_RGBA8_ETC2_EAC
    public static final int GL_COMPRESSED_SIGNED_R11_EAC
    public static final int GL_COMPRESSED_SIGNED_RG11_EAC
    public static final int GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC
    public static final int GL_COMPRESSED_SRGB8_ETC2
    public static final int GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2
    public static final int GL_CONDITION_SATISFIED
    public static final int GL_COPY_READ_BUFFER
    public static final int GL_COPY_READ_BUFFER_BINDING
    public static final int GL_COPY_WRITE_BUFFER
    public static final int GL_COPY_WRITE_BUFFER_BINDING
    public static final int GL_CURRENT_QUERY
    public static final int GL_DEPTH
    public static final int GL_DEPTH24_STENCIL8
    public static final int GL_DEPTH32F_STENCIL8
    public static final int GL_DEPTH_COMPONENT24
    public static final int GL_DEPTH_COMPONENT32F
    public static final int GL_DEPTH_STENCIL
    public static final int GL_DEPTH_STENCIL_ATTACHMENT
    public static final int GL_DRAW_BUFFER0
    public static final int GL_DRAW_BUFFER1
    public static final int GL_DRAW_BUFFER10
    public static final int GL_DRAW_BUFFER11
    public static final int GL_DRAW_BUFFER12
    public static final int GL_DRAW_BUFFER13
    public static final int GL_DRAW_BUFFER14
    public static final int GL_DRAW_BUFFER15
    public static final int GL_DRAW_BUFFER2
    public static final int GL_DRAW_BUFFER3
    public static final int GL_DRAW_BUFFER4
    public static final int GL_DRAW_BUFFER5
    public static final int GL_DRAW_BUFFER6
    public static final int GL_DRAW_BUFFER7
    public static final int GL_DRAW_BUFFER8
    public static final int GL_DRAW_BUFFER9
    public static final int GL_DRAW_FRAMEBUFFER
    public static final int GL_DRAW_FRAMEBUFFER_BINDING
    public static final int GL_DYNAMIC_COPY
    public static final int GL_DYNAMIC_READ
    public static final int GL_FLOAT_32_UNSIGNED_INT_24_8_REV
    public static final int GL_FLOAT_MAT2x3
    public static final int GL_FLOAT_MAT2x4
    public static final int GL_FLOAT_MAT3x2
    public static final int GL_FLOAT_MAT3x4
    public static final int GL_FLOAT_MAT4x2
    public static final int GL_FLOAT_MAT4x3
    public static final int GL_FRAGMENT_SHADER_DERIVATIVE_HINT
    public static final int GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE
    public static final int GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE
    public static final int GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING
    public static final int GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE
    public static final int GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE
    public static final int GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE
    public static final int GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE
    public static final int GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE
    public static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER
    public static final int GL_FRAMEBUFFER_DEFAULT
    public static final int GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE
    public static final int GL_FRAMEBUFFER_UNDEFINED
    public static final int GL_GREEN
    public static final int GL_HALF_FLOAT
    public static final int GL_INTERLEAVED_ATTRIBS
    public static final int GL_INT_2_10_10_10_REV
    public static final int GL_INT_SAMPLER_2D
    public static final int GL_INT_SAMPLER_2D_ARRAY
    public static final int GL_INT_SAMPLER_3D
    public static final int GL_INT_SAMPLER_CUBE
    public static final int GL_INVALID_INDEX
    public static final int GL_MAJOR_VERSION
    public static final int GL_MAP_FLUSH_EXPLICIT_BIT
    public static final int GL_MAP_INVALIDATE_BUFFER_BIT
    public static final int GL_MAP_INVALIDATE_RANGE_BIT
    public static final int GL_MAP_READ_BIT
    public static final int GL_MAP_UNSYNCHRONIZED_BIT
    public static final int GL_MAP_WRITE_BIT
    public static final int GL_MAX
    public static final int GL_MAX_3D_TEXTURE_SIZE
    public static final int GL_MAX_ARRAY_TEXTURE_LAYERS
    public static final int GL_MAX_COLOR_ATTACHMENTS
    public static final int GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
    public static final int GL_MAX_COMBINED_UNIFORM_BLOCKS
    public static final int GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
    public static final int GL_MAX_DRAW_BUFFERS
    public static final int GL_MAX_ELEMENTS_INDICES
    public static final int GL_MAX_ELEMENTS_VERTICES
    public static final int GL_MAX_ELEMENT_INDEX
    public static final int GL_MAX_FRAGMENT_INPUT_COMPONENTS
    public static final int GL_MAX_FRAGMENT_UNIFORM_BLOCKS
    public static final int GL_MAX_FRAGMENT_UNIFORM_COMPONENTS
    public static final int GL_MAX_PROGRAM_TEXEL_OFFSET
    public static final int GL_MAX_SAMPLES
    public static final int GL_MAX_SERVER_WAIT_TIMEOUT
    public static final int GL_MAX_TEXTURE_LOD_BIAS
    public static final int GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS
    public static final int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS
    public static final int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS
    public static final int GL_MAX_UNIFORM_BLOCK_SIZE
    public static final int GL_MAX_UNIFORM_BUFFER_BINDINGS
    public static final int GL_MAX_VARYING_COMPONENTS
    public static final int GL_MAX_VERTEX_OUTPUT_COMPONENTS
    public static final int GL_MAX_VERTEX_UNIFORM_BLOCKS
    public static final int GL_MAX_VERTEX_UNIFORM_COMPONENTS
    public static final int GL_MIN
    public static final int GL_MINOR_VERSION
    public static final int GL_MIN_PROGRAM_TEXEL_OFFSET
    public static final int GL_NUM_EXTENSIONS
    public static final int GL_NUM_PROGRAM_BINARY_FORMATS
    public static final int GL_NUM_SAMPLE_COUNTS
    public static final int GL_OBJECT_TYPE
    public static final int GL_PACK_ROW_LENGTH
    public static final int GL_PACK_SKIP_PIXELS
    public static final int GL_PACK_SKIP_ROWS
    public static final int GL_PIXEL_PACK_BUFFER
    public static final int GL_PIXEL_PACK_BUFFER_BINDING
    public static final int GL_PIXEL_UNPACK_BUFFER
    public static final int GL_PIXEL_UNPACK_BUFFER_BINDING
    public static final int GL_PRIMITIVE_RESTART_FIXED_INDEX
    public static final int GL_PROGRAM_BINARY_FORMATS
    public static final int GL_PROGRAM_BINARY_LENGTH
    public static final int GL_PROGRAM_BINARY_RETRIEVABLE_HINT
    public static final int GL_QUERY_RESULT
    public static final int GL_QUERY_RESULT_AVAILABLE
    public static final int GL_R11F_G11F_B10F
    public static final int GL_R16F
    public static final int GL_R16I
    public static final int GL_R16UI
    public static final int GL_R32F
    public static final int GL_R32I
    public static final int GL_R32UI
    public static final int GL_R8
    public static final int GL_R8I
    public static final int GL_R8UI
    public static final int GL_R8_SNORM
    public static final int GL_RASTERIZER_DISCARD
    public static final int GL_READ_BUFFER
    public static final int GL_READ_FRAMEBUFFER
    public static final int GL_READ_FRAMEBUFFER_BINDING
    public static final int GL_RED
    public static final int GL_RED_INTEGER
    public static final int GL_RENDERBUFFER_SAMPLES
    public static final int GL_RG
    public static final int GL_RG16F
    public static final int GL_RG16I
    public static final int GL_RG16UI
    public static final int GL_RG32F
    public static final int GL_RG32I
    public static final int GL_RG32UI
    public static final int GL_RG8
    public static final int GL_RG8I
    public static final int GL_RG8UI
    public static final int GL_RG8_SNORM
    public static final int GL_RGB10_A2
    public static final int GL_RGB10_A2UI
    public static final int GL_RGB16F
    public static final int GL_RGB16I
    public static final int GL_RGB16UI
    public static final int GL_RGB32F
    public static final int GL_RGB32I
    public static final int GL_RGB32UI
    public static final int GL_RGB8
    public static final int GL_RGB8I
    public static final int GL_RGB8UI
    public static final int GL_RGB8_SNORM
    public static final int GL_RGB9_E5
    public static final int GL_RGBA16F
    public static final int GL_RGBA16I
    public static final int GL_RGBA16UI
    public static final int GL_RGBA32F
    public static final int GL_RGBA32I
    public static final int GL_RGBA32UI
    public static final int GL_RGBA8
    public static final int GL_RGBA8I
    public static final int GL_RGBA8UI
    public static final int GL_RGBA8_SNORM
    public static final int GL_RGBA_INTEGER
    public static final int GL_RGB_INTEGER
    public static final int GL_RG_INTEGER
    public static final int GL_SAMPLER_2D_ARRAY
    public static final int GL_SAMPLER_2D_ARRAY_SHADOW
    public static final int GL_SAMPLER_2D_SHADOW
    public static final int GL_SAMPLER_3D
    public static final int GL_SAMPLER_BINDING
    public static final int GL_SAMPLER_CUBE_SHADOW
    public static final int GL_SEPARATE_ATTRIBS
    public static final int GL_SIGNALED
    public static final int GL_SIGNED_NORMALIZED
    public static final int GL_SRGB
    public static final int GL_SRGB8
    public static final int GL_SRGB8_ALPHA8
    public static final int GL_STATIC_COPY
    public static final int GL_STATIC_READ
    public static final int GL_STENCIL
    public static final int GL_STREAM_COPY
    public static final int GL_STREAM_READ
    public static final int GL_SYNC_CONDITION
    public static final int GL_SYNC_FENCE
    public static final int GL_SYNC_FLAGS
    public static final int GL_SYNC_FLUSH_COMMANDS_BIT
    public static final int GL_SYNC_GPU_COMMANDS_COMPLETE
    public static final int GL_SYNC_STATUS
    public static final int GL_TEXTURE_2D_ARRAY
    public static final int GL_TEXTURE_3D
    public static final int GL_TEXTURE_BASE_LEVEL
    public static final int GL_TEXTURE_BINDING_2D_ARRAY
    public static final int GL_TEXTURE_BINDING_3D
    public static final int GL_TEXTURE_COMPARE_FUNC
    public static final int GL_TEXTURE_COMPARE_MODE
    public static final int GL_TEXTURE_IMMUTABLE_FORMAT
    public static final int GL_TEXTURE_IMMUTABLE_LEVELS
    public static final int GL_TEXTURE_MAX_LEVEL
    public static final int GL_TEXTURE_MAX_LOD
    public static final int GL_TEXTURE_MIN_LOD
    public static final int GL_TEXTURE_SWIZZLE_A
    public static final int GL_TEXTURE_SWIZZLE_B
    public static final int GL_TEXTURE_SWIZZLE_G
    public static final int GL_TEXTURE_SWIZZLE_R
    public static final int GL_TEXTURE_WRAP_R
    public static final int GL_TIMEOUT_EXPIRED
    public static final long GL_TIMEOUT_IGNORED
    public static final int GL_TRANSFORM_FEEDBACK
    public static final int GL_TRANSFORM_FEEDBACK_ACTIVE
    public static final int GL_TRANSFORM_FEEDBACK_BINDING
    public static final int GL_TRANSFORM_FEEDBACK_BUFFER
    public static final int GL_TRANSFORM_FEEDBACK_BUFFER_BINDING
    public static final int GL_TRANSFORM_FEEDBACK_BUFFER_MODE
    public static final int GL_TRANSFORM_FEEDBACK_BUFFER_SIZE
    public static final int GL_TRANSFORM_FEEDBACK_BUFFER_START
    public static final int GL_TRANSFORM_FEEDBACK_PAUSED
    public static final int GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN
    public static final int GL_TRANSFORM_FEEDBACK_VARYINGS
    public static final int GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH
    public static final int GL_UNIFORM_ARRAY_STRIDE
    public static final int GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
    public static final int GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
    public static final int GL_UNIFORM_BLOCK_BINDING
    public static final int GL_UNIFORM_BLOCK_DATA_SIZE
    public static final int GL_UNIFORM_BLOCK_INDEX
    public static final int GL_UNIFORM_BLOCK_NAME_LENGTH
    public static final int GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
    public static final int GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
    public static final int GL_UNIFORM_BUFFER
    public static final int GL_UNIFORM_BUFFER_BINDING
    public static final int GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
    public static final int GL_UNIFORM_BUFFER_SIZE
    public static final int GL_UNIFORM_BUFFER_START
    public static final int GL_UNIFORM_IS_ROW_MAJOR
    public static final int GL_UNIFORM_MATRIX_STRIDE
    public static final int GL_UNIFORM_NAME_LENGTH
    public static final int GL_UNIFORM_OFFSET
    public static final int GL_UNIFORM_SIZE
    public static final int GL_UNIFORM_TYPE
    public static final int GL_UNPACK_IMAGE_HEIGHT
    public static final int GL_UNPACK_ROW_LENGTH
    public static final int GL_UNPACK_SKIP_IMAGES
    public static final int GL_UNPACK_SKIP_PIXELS
    public static final int GL_UNPACK_SKIP_ROWS
    public static final int GL_UNSIGNALED
    public static final int GL_UNSIGNED_INT_10F_11F_11F_REV
    public static final int GL_UNSIGNED_INT_24_8
    public static final int GL_UNSIGNED_INT_2_10_10_10_REV
    public static final int GL_UNSIGNED_INT_5_9_9_9_REV
    public static final int GL_UNSIGNED_INT_SAMPLER_2D
    public static final int GL_UNSIGNED_INT_SAMPLER_2D_ARRAY
    public static final int GL_UNSIGNED_INT_SAMPLER_3D
    public static final int GL_UNSIGNED_INT_SAMPLER_CUBE
    public static final int GL_UNSIGNED_INT_VEC2
    public static final int GL_UNSIGNED_INT_VEC3
    public static final int GL_UNSIGNED_INT_VEC4
    public static final int GL_UNSIGNED_NORMALIZED
    public static final int GL_VERTEX_ARRAY_BINDING
    public static final int GL_VERTEX_ATTRIB_ARRAY_DIVISOR
    public static final int GL_VERTEX_ATTRIB_ARRAY_INTEGER
    public static final int GL_WAIT_FAILED
    public abstract void glBeginQuery(int,int)
    public abstract void glBeginTransformFeedback(int)
    public abstract void glBindBufferBase(int,int,int)
    public abstract void glBindBufferRange(int,int,int,int,int)
    public abstract void glBindSampler(int,int)
    public abstract void glBindTransformFeedback(int,int)
    public abstract void glBlitFramebuffer(int,int,int,int,int,int,int,int,int,int)
    public abstract void glClearBufferfi(int,int,float,int)
    public abstract void glClearBufferfv(int,int,java.nio.FloatBuffer)
    public abstract void glClearBufferiv(int,int,java.nio.IntBuffer)
    public abstract void glClearBufferuiv(int,int,java.nio.IntBuffer)
    public abstract void glCopyBufferSubData(int,int,int,int,int)
    public abstract void glCopyTexSubImage3D(int,int,int,int,int,int,int,int,int)
    public abstract void glDeleteQueries(int,java.nio.IntBuffer)
    public abstract void glDeleteQueries(int,int[],int)
    public abstract void glDeleteSamplers(int,java.nio.IntBuffer)
    public abstract void glDeleteSamplers(int,int[],int)
    public abstract void glDeleteTransformFeedbacks(int,java.nio.IntBuffer)
    public abstract void glDeleteTransformFeedbacks(int,int[],int)
    public abstract void glDeleteVertexArrays(int,int[],int)
    public abstract void glDrawRangeElements(int,int,int,int,int,int)
    public abstract void glDrawRangeElements(int,int,int,int,int,java.nio.Buffer)
    public abstract void glEndQuery(int)
    public abstract void glEndTransformFeedback()
    public abstract void glFlushMappedBufferRange(int,int,int)
    public abstract void glFramebufferTextureLayer(int,int,int,int,int)
    public abstract void glGenQueries(int,java.nio.IntBuffer)
    public abstract void glGenQueries(int,int[],int)
    public abstract void glGenSamplers(int,java.nio.IntBuffer)
    public abstract void glGenSamplers(int,int[],int)
    public abstract void glGenTransformFeedbacks(int,java.nio.IntBuffer)
    public abstract void glGenTransformFeedbacks(int,int[],int)
    public abstract void glGenVertexArrays(int,int[],int)
    public abstract java.lang.String glGetActiveUniformBlockName(int,int)
    public abstract void glGetActiveUniformBlockName(int,int,java.nio.Buffer,java.nio.Buffer)
    public abstract void glGetActiveUniformBlockiv(int,int,int,java.nio.IntBuffer)
    public abstract void glGetActiveUniformsiv(int,int,java.nio.IntBuffer,int,java.nio.IntBuffer)
    public abstract void glGetBufferParameteri64v(int,int,java.nio.LongBuffer)
    public abstract java.nio.Buffer glGetBufferPointerv(int,int)
    public abstract int glGetFragDataLocation(int,java.lang.String)
    public abstract void glGetInteger64v(int,java.nio.LongBuffer)
    public abstract void glGetQueryObjectuiv(int,int,java.nio.IntBuffer)
    public abstract void glGetQueryiv(int,int,java.nio.IntBuffer)
    public abstract void glGetSamplerParameterfv(int,int,java.nio.FloatBuffer)
    public abstract void glGetSamplerParameteriv(int,int,java.nio.IntBuffer)
    public abstract java.lang.String glGetStringi(int,int)
    public abstract int glGetUniformBlockIndex(int,java.lang.String)
    public abstract void glGetUniformIndices(int,java.lang.String[],java.nio.IntBuffer)
    public abstract void glGetUniformuiv(int,int,java.nio.IntBuffer)
    public abstract void glGetVertexAttribIiv(int,int,java.nio.IntBuffer)
    public abstract void glGetVertexAttribIuiv(int,int,java.nio.IntBuffer)
    public abstract void glInvalidateFramebuffer(int,int,java.nio.IntBuffer)
    public abstract void glInvalidateSubFramebuffer(int,int,java.nio.IntBuffer,int,int,int,int)
    public abstract boolean glIsQuery(int)
    public abstract boolean glIsSampler(int)
    public abstract boolean glIsTransformFeedback(int)
    public abstract boolean glIsVertexArray(int)
    public abstract java.nio.Buffer glMapBufferRange(int,int,int,int)
    public abstract void glPauseTransformFeedback()
    public abstract void glProgramParameteri(int,int,int)
    public abstract void glReadBuffer(int)
    public abstract void glRenderbufferStorageMultisample(int,int,int,int,int)
    public abstract void glResumeTransformFeedback()
    public abstract void glSamplerParameterf(int,int,float)
    public abstract void glSamplerParameterfv(int,int,java.nio.FloatBuffer)
    public abstract void glSamplerParameteri(int,int,int)
    public abstract void glSamplerParameteriv(int,int,java.nio.IntBuffer)
    public abstract void glTexImage2D(int,int,int,int,int,int,int,int,int)
    public abstract void glTexImage3D(int,int,int,int,int,int,int,int,int,int)
    public abstract void glTexSubImage2D(int,int,int,int,int,int,int,int,int)
    public abstract void glTexSubImage3D(int,int,int,int,int,int,int,int,int,int,int)
    public abstract void glTexSubImage3D(int,int,int,int,int,int,int,int,int,int,java.nio.Buffer)
    public abstract void glTransformFeedbackVaryings(int,java.lang.String[],int)
    public abstract void glUniform1uiv(int,int,java.nio.IntBuffer)
    public abstract void glUniform3uiv(int,int,java.nio.IntBuffer)
    public abstract void glUniform4uiv(int,int,java.nio.IntBuffer)
    public abstract void glUniformBlockBinding(int,int,int)
    public abstract void glUniformMatrix2x3fv(int,int,boolean,java.nio.FloatBuffer)
    public abstract void glUniformMatrix2x4fv(int,int,boolean,java.nio.FloatBuffer)
    public abstract void glUniformMatrix3x2fv(int,int,boolean,java.nio.FloatBuffer)
    public abstract void glUniformMatrix3x4fv(int,int,boolean,java.nio.FloatBuffer)
    public abstract void glUniformMatrix4x2fv(int,int,boolean,java.nio.FloatBuffer)
    public abstract void glUniformMatrix4x3fv(int,int,boolean,java.nio.FloatBuffer)
    public abstract boolean glUnmapBuffer(int)
    public abstract void glVertexAttribDivisor(int,int)
    public abstract void glVertexAttribI4i(int,int,int,int,int)
    public abstract void glVertexAttribI4ui(int,int,int,int,int)
    public abstract void glVertexAttribIPointer(int,int,int,int,int)
    public abstract void glVertexAttribPointer(int,int,int,boolean,int,java.nio.Buffer)
com.badlogic.gdx.graphics.GL31
com.badlogic.gdx.graphics.GL32$DebugProc
com.badlogic.gdx.graphics.GL32
com.badlogic.gdx.graphics.GLTexture:
    public void <init>(int)
    public void bind(int)
    public float getAnisotropicFilter()
    public abstract int getDepth()
    public abstract int getHeight()
    public abstract int getWidth()
    public abstract boolean isManaged()
    protected abstract void reload()
    public float setAnisotropicFilter(float)
    public float unsafeSetAnisotropicFilter(float)
    public void unsafeSetFilter(com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureFilter)
    public void unsafeSetWrap(com.badlogic.gdx.graphics.Texture$TextureWrap,com.badlogic.gdx.graphics.Texture$TextureWrap)
com.badlogic.gdx.graphics.Mesh:
    protected void <init>(com.badlogic.gdx.graphics.glutils.VertexData,com.badlogic.gdx.graphics.glutils.IndexData,boolean)
    public void <init>(boolean,int,int,com.badlogic.gdx.graphics.VertexAttributes)
    public void <init>(boolean,boolean,int,int,com.badlogic.gdx.graphics.VertexAttributes)
    public com.badlogic.gdx.math.collision.BoundingBox calculateBoundingBox()
    public com.badlogic.gdx.math.collision.BoundingBox calculateBoundingBox(com.badlogic.gdx.math.collision.BoundingBox,int,int)
    public com.badlogic.gdx.math.collision.BoundingBox calculateBoundingBox(com.badlogic.gdx.math.collision.BoundingBox,int,int,com.badlogic.gdx.math.Matrix4)
    public void calculateBoundingBox(com.badlogic.gdx.math.collision.BoundingBox)
    public float calculateRadius(float,float,float)
    public float calculateRadius(float,float,float,int,int)
    public float calculateRadius(float,float,float,int,int,com.badlogic.gdx.math.Matrix4)
    public float calculateRadius(com.badlogic.gdx.math.Vector3)
    public float calculateRadius(com.badlogic.gdx.math.Vector3,int,int)
    public float calculateRadius(com.badlogic.gdx.math.Vector3,int,int,com.badlogic.gdx.math.Matrix4)
    public float calculateRadiusSquared(float,float,float,int,int,com.badlogic.gdx.math.Matrix4)
    public com.badlogic.gdx.graphics.Mesh copy(boolean)
    public com.badlogic.gdx.graphics.Mesh copy(boolean,boolean,int[])
    public com.badlogic.gdx.graphics.Mesh disableInstancedRendering()
    public varargs com.badlogic.gdx.graphics.Mesh enableInstancedRendering(boolean,int,com.badlogic.gdx.graphics.VertexAttribute[])
    public com.badlogic.gdx.math.collision.BoundingBox extendBoundingBox(com.badlogic.gdx.math.collision.BoundingBox,int,int)
    public com.badlogic.gdx.math.collision.BoundingBox extendBoundingBox(com.badlogic.gdx.math.collision.BoundingBox,int,int,com.badlogic.gdx.math.Matrix4)
    public void getIndices(int,int,short[],int)
    public void getIndices(int,short[],int)
    public void getIndices(short[])
    public void getIndices(short[],int)
    public java.nio.ShortBuffer getIndicesBuffer()
    public com.badlogic.gdx.graphics.VertexAttributes getInstancedAttributes()
    public int getMaxIndices()
    public int getMaxVertices()
    public int getVertexSize()
    public float[] getVertices(int,int,float[])
    public float[] getVertices(int,int,float[],int)
    public float[] getVertices(int,float[])
    public float[] getVertices(float[])
    public java.nio.FloatBuffer getVerticesBuffer()
    public java.nio.FloatBuffer getVerticesBuffer(boolean)
    public boolean isInstanced()
    public void scale(float,float,float)
    public void setAutoBind(boolean)
    public com.badlogic.gdx.graphics.Mesh setIndices(short[],int,int)
    public com.badlogic.gdx.graphics.Mesh setInstanceData(java.nio.FloatBuffer)
    public com.badlogic.gdx.graphics.Mesh setInstanceData(java.nio.FloatBuffer,int)
    public com.badlogic.gdx.graphics.Mesh setInstanceData(float[])
    public com.badlogic.gdx.graphics.Mesh setInstanceData(float[],int,int)
    public com.badlogic.gdx.graphics.Mesh setVertices(float[])
    public void transform(com.badlogic.gdx.math.Matrix4)
    public void transform(com.badlogic.gdx.math.Matrix4,int,int)
    public static void transform(com.badlogic.gdx.math.Matrix4,float[],int,int,int,int,int)
    public void transformUV(com.badlogic.gdx.math.Matrix3)
    protected void transformUV(com.badlogic.gdx.math.Matrix3,int,int)
    public static void transformUV(com.badlogic.gdx.math.Matrix3,float[],int,int,int,int)
    public com.badlogic.gdx.graphics.Mesh updateInstanceData(int,java.nio.FloatBuffer)
    public com.badlogic.gdx.graphics.Mesh updateInstanceData(int,java.nio.FloatBuffer,int,int)
    public com.badlogic.gdx.graphics.Mesh updateInstanceData(int,float[])
    public com.badlogic.gdx.graphics.Mesh updateInstanceData(int,float[],int,int)
    public com.badlogic.gdx.graphics.Mesh updateVertices(int,float[])
    public com.badlogic.gdx.graphics.Mesh updateVertices(int,float[],int,int)
com.badlogic.gdx.graphics.OrthographicCamera:
    public void rotate(float)
    public void setToOrtho(boolean)
    public void translate(float,float)
    public void translate(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.graphics.PerspectiveCamera
com.badlogic.gdx.graphics.Pixmap$1$1
com.badlogic.gdx.graphics.Pixmap$1
com.badlogic.gdx.graphics.Pixmap$DownloadPixmapResponseListener
com.badlogic.gdx.graphics.Pixmap$Format:
    public static int toGlFormat(com.badlogic.gdx.graphics.Pixmap$Format)
    public static int toGlType(com.badlogic.gdx.graphics.Pixmap$Format)
com.badlogic.gdx.graphics.Pixmap:
    public void <init>(com.badlogic.gdx.graphics.g2d.Gdx2DPixmap)
    public void <init>(java.nio.ByteBuffer)
    public void <init>(java.nio.ByteBuffer,int,int)
    public void <init>(byte[],int,int)
    public static com.badlogic.gdx.graphics.Pixmap createFromFrameBuffer(int,int,int,int)
    public static void downloadFromUrl(java.lang.String,com.badlogic.gdx.graphics.Pixmap$DownloadPixmapResponseListener)
    public void drawCircle(int,int,int)
    public void drawLine(int,int,int,int)
    public void drawPixel(int,int)
    public void drawPixel(int,int,int)
    public void drawPixmap(com.badlogic.gdx.graphics.Pixmap,int,int)
    public void drawRectangle(int,int,int,int)
    public void fillCircle(int,int,int)
    public void fillRectangle(int,int,int,int)
    public void fillTriangle(int,int,int,int,int,int)
    public com.badlogic.gdx.graphics.Pixmap$Blending getBlending()
    public com.badlogic.gdx.graphics.Pixmap$Filter getFilter()
    public int getPixel(int,int)
    public boolean isDisposed()
    public void setColor(int)
    public void setColor(com.badlogic.gdx.graphics.Color)
    public void setFilter(com.badlogic.gdx.graphics.Pixmap$Filter)
    public void setPixels(java.nio.ByteBuffer)
com.badlogic.gdx.graphics.PixmapIO$CIM:
    private static final int BUFFER_SIZE
    private void <init>()
    public static void write(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.Pixmap)
com.badlogic.gdx.graphics.PixmapIO$PNG$ChunkBuffer
com.badlogic.gdx.graphics.PixmapIO$PNG
com.badlogic.gdx.graphics.PixmapIO:
    public void <init>()
    public static void writeCIM(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.Pixmap)
    public static void writePNG(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.Pixmap)
    public static void writePNG(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.Pixmap,int,boolean)
com.badlogic.gdx.graphics.Texture$1:
    public void finishedLoading(com.badlogic.gdx.assets.AssetManager,java.lang.String,java.lang.Class)
com.badlogic.gdx.graphics.Texture3D
com.badlogic.gdx.graphics.Texture3DData
com.badlogic.gdx.graphics.Texture:
    public void <init>(int,int,com.badlogic.gdx.graphics.Pixmap$Format)
    public void <init>(com.badlogic.gdx.graphics.Pixmap)
    public void <init>(com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap$Format,boolean)
    public void <init>(com.badlogic.gdx.graphics.Pixmap,boolean)
    public void <init>(java.lang.String)
    public void draw(com.badlogic.gdx.graphics.Pixmap,int,int)
    public int getDepth()
    public static int getNumManagedTextures()
    public static void setAssetManager(com.badlogic.gdx.assets.AssetManager)
com.badlogic.gdx.graphics.TextureArray:
    public void <init>(com.badlogic.gdx.graphics.TextureArrayData)
    public varargs void <init>(boolean,com.badlogic.gdx.graphics.Pixmap$Format,com.badlogic.gdx.files.FileHandle[])
    public varargs void <init>(boolean,com.badlogic.gdx.files.FileHandle[])
    public varargs void <init>(com.badlogic.gdx.files.FileHandle[])
    public varargs void <init>(java.lang.String[])
    private static void addManagedTexture(com.badlogic.gdx.Application,com.badlogic.gdx.graphics.TextureArray)
    public int getDepth()
    public int getHeight()
    private static varargs com.badlogic.gdx.files.FileHandle[] getInternalHandles(java.lang.String[])
    public static java.lang.String getManagedStatus()
    public static int getNumManagedTextureArrays()
    public int getWidth()
com.badlogic.gdx.graphics.TextureArrayData$Factory
com.badlogic.gdx.graphics.TextureData$Factory:
    public void <init>()
    public static com.badlogic.gdx.graphics.TextureData loadFromFile(com.badlogic.gdx.files.FileHandle,boolean)
com.badlogic.gdx.graphics.VertexAttribute:
    public void <init>(int,int,int,boolean,java.lang.String)
    public static com.badlogic.gdx.graphics.VertexAttribute Binormal()
    public static com.badlogic.gdx.graphics.VertexAttribute BoneWeight(int)
    public static com.badlogic.gdx.graphics.VertexAttribute ColorPacked()
    public static com.badlogic.gdx.graphics.VertexAttribute ColorUnpacked()
    public static com.badlogic.gdx.graphics.VertexAttribute Normal()
    public static com.badlogic.gdx.graphics.VertexAttribute Position()
    public static com.badlogic.gdx.graphics.VertexAttribute Tangent()
    public static com.badlogic.gdx.graphics.VertexAttribute TexCoords(int)
    public com.badlogic.gdx.graphics.VertexAttribute copy()
com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterator:
    public void reset()
com.badlogic.gdx.graphics.VertexAttributes$Usage
com.badlogic.gdx.graphics.VertexAttributes:
    public com.badlogic.gdx.graphics.VertexAttribute findByUsage(int)
    public int getBoneWeights()
    public long getMaskWithSizePacked()
    public int getOffset(int)
    public int getOffset(int,int)
    public int getTextureCoordinates()
com.badlogic.gdx.graphics.g2d.Animation$1
com.badlogic.gdx.graphics.g2d.Animation$PlayMode
com.badlogic.gdx.graphics.g2d.Animation
com.badlogic.gdx.graphics.g2d.Batch:
    public static final int C1
    public static final int C2
    public static final int C3
    public static final int C4
    public static final int U1
    public static final int U2
    public static final int U3
    public static final int U4
    public static final int V1
    public static final int V2
    public static final int V3
    public static final int V4
    public static final int X1
    public static final int X2
    public static final int X3
    public static final int X4
    public static final int Y1
    public static final int Y2
    public static final int Y3
    public static final int Y4
    public abstract void disableBlending()
    public abstract void draw(com.badlogic.gdx.graphics.Texture,float,float)
    public abstract void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float)
    public abstract void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float,float,float,float,float,float,int,int,int,int,boolean,boolean)
    public abstract void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float,int,int,int,int,boolean,boolean)
    public abstract void draw(com.badlogic.gdx.graphics.Texture,float,float,int,int,int,int)
    public abstract void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float)
    public abstract void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float,float,float,float,float,float,boolean)
    public abstract void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,com.badlogic.gdx.math.Affine2)
    public abstract void enableBlending()
    public abstract int getBlendDstFunc()
    public abstract int getBlendDstFuncAlpha()
    public abstract int getBlendSrcFunc()
    public abstract int getBlendSrcFuncAlpha()
    public abstract com.badlogic.gdx.math.Matrix4 getProjectionMatrix()
    public abstract com.badlogic.gdx.graphics.glutils.ShaderProgram getShader()
    public abstract boolean isBlendingEnabled()
    public abstract boolean isDrawing()
    public abstract void setBlendFunctionSeparate(int,int,int,int)
    public abstract void setShader(com.badlogic.gdx.graphics.glutils.ShaderProgram)
com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData:
    public void <init>()
    public com.badlogic.gdx.files.FileHandle getFontFile()
    public java.lang.String getImagePath(int)
    public java.lang.String[] getImagePaths()
    public void scale(float)
    public void setLineHeight(float)
com.badlogic.gdx.graphics.g2d.BitmapFontCache:
    public void <init>(com.badlogic.gdx.graphics.g2d.BitmapFont)
    public void draw(com.badlogic.gdx.graphics.g2d.Batch,float)
    public void draw(com.badlogic.gdx.graphics.g2d.Batch,int,int)
    public com.badlogic.gdx.utils.Array getLayouts()
    public int getVertexCount(int)
    public float[] getVertices()
    public float[] getVertices(int)
    public float getX()
    public float getY()
    public void setAlphas(float)
    public void setColor(float,float,float,float)
    public void setColor(com.badlogic.gdx.graphics.Color)
    public void setColors(float)
    public void setColors(float,float,float,float)
    public void setColors(float,int,int)
    public void setColors(com.badlogic.gdx.graphics.Color)
    public void setColors(com.badlogic.gdx.graphics.Color,int,int)
    public com.badlogic.gdx.graphics.g2d.GlyphLayout setText(java.lang.CharSequence,float,float)
    public com.badlogic.gdx.graphics.g2d.GlyphLayout setText(java.lang.CharSequence,float,float,float,int,boolean)
    public com.badlogic.gdx.graphics.g2d.GlyphLayout setText(java.lang.CharSequence,float,float,int,int,float,int,boolean)
    public com.badlogic.gdx.graphics.g2d.GlyphLayout setText(java.lang.CharSequence,float,float,int,int,float,int,boolean,java.lang.String)
    public boolean usesIntegerPositions()
com.badlogic.gdx.graphics.g2d.CpuSpriteBatch
com.badlogic.gdx.graphics.g2d.DistanceFieldFont$DistanceFieldFontCache
com.badlogic.gdx.graphics.g2d.DistanceFieldFont
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap:
    public static final int GDX2D_BLEND_NONE
    public static final int GDX2D_BLEND_SRC_OVER
    public static final int GDX2D_FORMAT_ALPHA
    public static final int GDX2D_FORMAT_LUMINANCE_ALPHA
    public static final int GDX2D_FORMAT_RGB565
    public static final int GDX2D_FORMAT_RGB888
    public static final int GDX2D_FORMAT_RGBA4444
    public static final int GDX2D_FORMAT_RGBA8888
    public static final int GDX2D_SCALE_LINEAR
    public static final int GDX2D_SCALE_NEAREST
    public void <init>(java.io.InputStream,int)
    public void <init>(java.nio.ByteBuffer,int,int,int)
    public void <init>(java.nio.ByteBuffer,long[])
    public void drawCircle(int,int,int,int)
    private static native void drawCircle(long,int,int,int,int)
    public void drawLine(int,int,int,int,int)
    private static native void drawLine(long,int,int,int,int,int)
    public void drawRect(int,int,int,int,int)
    private static native void drawRect(long,int,int,int,int,int)
    public void fillCircle(int,int,int,int)
    private static native void fillCircle(long,int,int,int,int)
    public void fillRect(int,int,int,int,int)
    private static native void fillRect(long,int,int,int,int,int)
    public void fillTriangle(int,int,int,int,int,int,int)
    private static native void fillTriangle(long,int,int,int,int,int,int,int)
    public java.lang.String getFormatString()
    public int getPixel(int,int)
    private static native int getPixel(long,int,int)
    private static native java.nio.ByteBuffer loadByteBuffer(long[],java.nio.ByteBuffer,int,int)
    public static com.badlogic.gdx.graphics.g2d.Gdx2DPixmap newPixmap(int,int,int)
    public static com.badlogic.gdx.graphics.g2d.Gdx2DPixmap newPixmap(java.io.InputStream,int)
    public void setPixel(int,int,int)
    private static native void setPixel(long,int,int,int)
    public void setScale(int)
    private static native void setScale(long,int)
com.badlogic.gdx.graphics.g2d.GlyphLayout:
    private static final float epsilon
    public void <init>(com.badlogic.gdx.graphics.g2d.BitmapFont,java.lang.CharSequence)
    public void <init>(com.badlogic.gdx.graphics.g2d.BitmapFont,java.lang.CharSequence,int,int,com.badlogic.gdx.graphics.Color,float,int,boolean,java.lang.String)
    public void <init>(com.badlogic.gdx.graphics.g2d.BitmapFont,java.lang.CharSequence,com.badlogic.gdx.graphics.Color,float,int,boolean)
com.badlogic.gdx.graphics.g2d.NinePatch:
    public static final int BOTTOM_CENTER
    public static final int BOTTOM_LEFT
    public static final int BOTTOM_RIGHT
    public static final int MIDDLE_CENTER
    public static final int MIDDLE_LEFT
    public static final int MIDDLE_RIGHT
    public static final int TOP_CENTER
    public static final int TOP_LEFT
    public static final int TOP_RIGHT
    public void <init>(com.badlogic.gdx.graphics.Texture)
    public void <init>(com.badlogic.gdx.graphics.Texture,int,int,int,int)
    public void <init>(com.badlogic.gdx.graphics.Texture,com.badlogic.gdx.graphics.Color)
    public void <init>(com.badlogic.gdx.graphics.g2d.NinePatch)
    public void <init>(com.badlogic.gdx.graphics.g2d.TextureRegion,com.badlogic.gdx.graphics.Color)
    public varargs void <init>(com.badlogic.gdx.graphics.g2d.TextureRegion[])
    public com.badlogic.gdx.graphics.Color getColor()
    public float getMiddleHeight()
    public float getMiddleWidth()
    public com.badlogic.gdx.graphics.Texture getTexture()
    public void setBottomHeight(float)
    public void setColor(com.badlogic.gdx.graphics.Color)
    public void setLeftWidth(float)
    public void setMiddleHeight(float)
    public void setMiddleWidth(float)
    public void setPadBottom(float)
    public void setPadLeft(float)
    public void setPadRight(float)
    public void setPadTop(float)
    public void setRightWidth(float)
    public void setTopHeight(float)
com.badlogic.gdx.graphics.g2d.ParticleEffect:
    private com.badlogic.gdx.math.collision.BoundingBox bounds
    public void <init>(com.badlogic.gdx.graphics.g2d.ParticleEffect)
    public void draw(com.badlogic.gdx.graphics.g2d.Batch,float)
    public com.badlogic.gdx.graphics.g2d.ParticleEmitter findEmitter(java.lang.String)
    public void flipY()
    public com.badlogic.gdx.math.collision.BoundingBox getBoundingBox()
    public com.badlogic.gdx.utils.Array getEmitters()
    public void loadEmitterImages(com.badlogic.gdx.graphics.g2d.TextureAtlas)
    protected com.badlogic.gdx.graphics.g2d.ParticleEmitter newEmitter(com.badlogic.gdx.graphics.g2d.ParticleEmitter)
    public void preAllocateParticles()
    public void reset()
    public void save(java.io.Writer)
    public void scaleEffect(float)
    public void scaleEffect(float,float)
    public void setDuration(int)
    public void setEmittersCleanUpBlendFunction(boolean)
    public void setFlip(boolean,boolean)
com.badlogic.gdx.graphics.g2d.ParticleEffectPool$PooledEffect
com.badlogic.gdx.graphics.g2d.ParticleEffectPool
com.badlogic.gdx.graphics.g2d.ParticleEmitter$GradientColorValue:
    public float[] getColors()
    public float[] getTimeline()
    public void load(com.badlogic.gdx.graphics.g2d.ParticleEmitter$GradientColorValue)
    public void save(java.io.Writer)
    public void setColors(float[])
    public void setTimeline(float[])
com.badlogic.gdx.graphics.g2d.ParticleEmitter$IndependentScaledNumericValue:
    public boolean isIndependent()
    public void load(com.badlogic.gdx.graphics.g2d.ParticleEmitter$IndependentScaledNumericValue)
    public void save(java.io.Writer)
    public void set(com.badlogic.gdx.graphics.g2d.ParticleEmitter$IndependentScaledNumericValue)
    public void set(com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue)
    public void set(com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue)
    public void setIndependent(boolean)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$NumericValue
com.badlogic.gdx.graphics.g2d.ParticleEmitter$ParticleValue:
    public boolean isActive()
    public boolean isAlwaysActive()
    public void load(com.badlogic.gdx.graphics.g2d.ParticleEmitter$ParticleValue)
    public void save(java.io.Writer)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue:
    public float getLowMax()
    public float getLowMin()
    public void load(com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue)
    public void save(java.io.Writer)
    public void set(com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue)
    public void setLow(float)
    public void setLow(float,float)
    public void setLowMax(float)
    public void setLowMin(float)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue:
    public float getHighMax()
    public float getHighMin()
    public float[] getScaling()
    public float[] getTimeline()
    public void load(com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue)
    public void save(java.io.Writer)
    public void set(com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue)
    public void set(com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue)
    public void setHigh(float)
    public void setHigh(float,float)
    public void setHighMax(float)
    public void setHighMin(float)
    public void setRelative(boolean)
    public void setScaling(float[])
    public void setTimeline(float[])
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShapeValue:
    public com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape getShape()
    public com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide getSide()
    public boolean isEdges()
    public void load(com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShapeValue)
    public void save(java.io.Writer)
    public void setEdges(boolean)
    public void setShape(com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape)
    public void setSide(com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide)
com.badlogic.gdx.graphics.g2d.ParticleEmitter:
    private static final int UPDATE_ANGLE
    private static final int UPDATE_GRAVITY
    private static final int UPDATE_ROTATION
    private static final int UPDATE_SCALE
    private static final int UPDATE_SPRITE
    private static final int UPDATE_TINT
    private static final int UPDATE_VELOCITY
    private static final int UPDATE_WIND
    private com.badlogic.gdx.math.collision.BoundingBox bounds
    public void <init>(com.badlogic.gdx.graphics.g2d.ParticleEmitter)
    public boolean cleansUpBlendFunction()
    public void draw(com.badlogic.gdx.graphics.g2d.Batch,float)
    public void flipY()
    public int getActiveCount()
    public com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue getAngle()
    public com.badlogic.gdx.math.collision.BoundingBox getBoundingBox()
    public com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue getDelay()
    public com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue getDuration()
    public com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue getEmission()
    public com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue getGravity()
    public com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue getLife()
    public com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue getLifeOffset()
    public int getMaxParticleCount()
    public int getMinParticleCount()
    public java.lang.String getName()
    protected com.badlogic.gdx.graphics.g2d.ParticleEmitter$Particle[] getParticles()
    public float getPercentComplete()
    public com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue getRotation()
    public com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue getSpawnHeight()
    public com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShapeValue getSpawnShape()
    public com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue getSpawnWidth()
    public com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpriteMode getSpriteMode()
    public com.badlogic.gdx.graphics.g2d.ParticleEmitter$GradientColorValue getTint()
    public com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue getTransparency()
    public com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue getVelocity()
    public com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue getWind()
    public float getX()
    public com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue getXOffsetValue()
    public com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue getXScale()
    public float getY()
    public com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue getYOffsetValue()
    public com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue getYScale()
    public boolean isAdditive()
    public boolean isAligned()
    public boolean isAttached()
    public boolean isBehind()
    public boolean isContinuous()
    public boolean isPremultipliedAlpha()
    public void matchMotion(com.badlogic.gdx.graphics.g2d.ParticleEmitter)
    public void matchSize(com.badlogic.gdx.graphics.g2d.ParticleEmitter)
    public void matchXSize(com.badlogic.gdx.graphics.g2d.ParticleEmitter)
    public void matchYSize(com.badlogic.gdx.graphics.g2d.ParticleEmitter)
    public void preAllocateParticles()
    public void save(java.io.Writer)
    public void scaleSize(float)
    public void setAdditive(boolean)
    public void setAligned(boolean)
    public void setAttached(boolean)
    public void setBehind(boolean)
    public void setCleansUpBlendFunction(boolean)
    public void setContinuous(boolean)
    public void setFlip(boolean,boolean)
    public void setName(java.lang.String)
    public void setPremultipliedAlpha(boolean)
    public void setSpriteMode(com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpriteMode)
com.badlogic.gdx.graphics.g2d.PixmapPacker$GuillotineStrategy$1
com.badlogic.gdx.graphics.g2d.PixmapPacker$GuillotineStrategy$GuillotinePage
com.badlogic.gdx.graphics.g2d.PixmapPacker$GuillotineStrategy$Node
com.badlogic.gdx.graphics.g2d.PixmapPacker$GuillotineStrategy
com.badlogic.gdx.graphics.g2d.PixmapPacker$PackStrategy
com.badlogic.gdx.graphics.g2d.PixmapPacker$Page$1
com.badlogic.gdx.graphics.g2d.PixmapPacker$Page
com.badlogic.gdx.graphics.g2d.PixmapPacker$PixmapPackerRectangle
com.badlogic.gdx.graphics.g2d.PixmapPacker$SkylineStrategy$1
com.badlogic.gdx.graphics.g2d.PixmapPacker$SkylineStrategy$SkylinePage$Row
com.badlogic.gdx.graphics.g2d.PixmapPacker$SkylineStrategy$SkylinePage
com.badlogic.gdx.graphics.g2d.PixmapPacker$SkylineStrategy
com.badlogic.gdx.graphics.g2d.PixmapPacker
com.badlogic.gdx.graphics.g2d.PixmapPackerIO$1
com.badlogic.gdx.graphics.g2d.PixmapPackerIO$ImageFormat
com.badlogic.gdx.graphics.g2d.PixmapPackerIO$SaveParameters
com.badlogic.gdx.graphics.g2d.PixmapPackerIO
com.badlogic.gdx.graphics.g2d.PolygonBatch
com.badlogic.gdx.graphics.g2d.PolygonRegion
com.badlogic.gdx.graphics.g2d.PolygonRegionLoader$PolygonRegionParameters
com.badlogic.gdx.graphics.g2d.PolygonRegionLoader
com.badlogic.gdx.graphics.g2d.PolygonSprite
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch
com.badlogic.gdx.graphics.g2d.RepeatablePolygonSprite
com.badlogic.gdx.graphics.g2d.Sprite:
    static final int SPRITE_SIZE
    static final int VERTEX_SIZE
    private com.badlogic.gdx.math.Rectangle bounds
    public void <init>(com.badlogic.gdx.graphics.Texture,int,int)
    public void <init>(com.badlogic.gdx.graphics.g2d.TextureRegion,int,int,int,int)
    public void draw(com.badlogic.gdx.graphics.g2d.Batch,float)
    public com.badlogic.gdx.math.Rectangle getBoundingRectangle()
    public float getRotation()
    public float getScaleX()
    public float getScaleY()
    public void rotate(float)
    public void scale(float)
    public void scroll(float,float)
    public void setAlpha(float)
    public void setCenter(float,float)
    public void setCenterX(float)
    public void setCenterY(float)
    public void setFlip(boolean,boolean)
    public void setOriginBasedPosition(float,float)
    public void setOriginCenter()
    public void setPosition(float,float)
    public void setU(float)
    public void setU2(float)
    public void setV(float)
    public void setV2(float)
    public void setX(float)
    public void setY(float)
    public void translateX(float)
    public void translateY(float)
com.badlogic.gdx.graphics.g2d.SpriteBatch:
    public void <init>(int)
    public void disableBlending()
    public void draw(com.badlogic.gdx.graphics.Texture,float,float)
    public void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float)
    public void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float,float,float,float,float,float,int,int,int,int,boolean,boolean)
    public void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float,int,int,int,int,boolean,boolean)
    public void draw(com.badlogic.gdx.graphics.Texture,float,float,int,int,int,int)
    public void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float)
    public void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float,float,float,float,float,float,boolean)
    public void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,com.badlogic.gdx.math.Affine2)
    public void enableBlending()
    public int getBlendDstFunc()
    public int getBlendDstFuncAlpha()
    public int getBlendSrcFunc()
    public int getBlendSrcFuncAlpha()
    public com.badlogic.gdx.math.Matrix4 getProjectionMatrix()
    public com.badlogic.gdx.graphics.glutils.ShaderProgram getShader()
    public boolean isDrawing()
    public void setShader(com.badlogic.gdx.graphics.glutils.ShaderProgram)
com.badlogic.gdx.graphics.g2d.SpriteCache$Cache
com.badlogic.gdx.graphics.g2d.SpriteCache
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion:
    public void <init>(com.badlogic.gdx.graphics.g2d.TextureRegion)
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasSprite:
    public void flip(boolean,boolean)
    public com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion getAtlasRegion()
    public void setOriginCenter()
    public void setPosition(float,float)
    public void setX(float)
    public void setY(float)
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region:
    public int[] findValue(java.lang.String)
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData:
    public void <init>()
    public com.badlogic.gdx.utils.Array getPages()
    public com.badlogic.gdx.utils.Array getRegions()
com.badlogic.gdx.graphics.g2d.TextureAtlas:
    public void <init>()
    public void <init>(com.badlogic.gdx.files.FileHandle,boolean)
    public void <init>(java.lang.String)
    public com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion addRegion(java.lang.String,com.badlogic.gdx.graphics.Texture,int,int,int,int)
    public com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion addRegion(java.lang.String,com.badlogic.gdx.graphics.g2d.TextureRegion)
    public com.badlogic.gdx.graphics.g2d.NinePatch createPatch(java.lang.String)
    public com.badlogic.gdx.graphics.g2d.Sprite createSprite(java.lang.String,int)
    public com.badlogic.gdx.utils.Array createSprites()
    public com.badlogic.gdx.utils.Array createSprites(java.lang.String)
    public com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion findRegion(java.lang.String)
    public com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion findRegion(java.lang.String,int)
    public com.badlogic.gdx.utils.ObjectSet getTextures()
com.badlogic.gdx.graphics.g2d.TextureRegion:
    public void <init>(com.badlogic.gdx.graphics.Texture,float,float,float,float)
    public void <init>(com.badlogic.gdx.graphics.Texture,int,int)
    public void <init>(com.badlogic.gdx.graphics.g2d.TextureRegion)
    public boolean isFlipX()
    public boolean isFlipY()
    public void scroll(float,float)
    public void setRegion(com.badlogic.gdx.graphics.Texture)
    public void setRegionHeight(int)
    public void setRegionWidth(int)
    public void setRegionX(int)
    public void setRegionY(int)
    public void setTexture(com.badlogic.gdx.graphics.Texture)
    public void setU(float)
    public void setU2(float)
    public void setV(float)
    public void setV2(float)
    public com.badlogic.gdx.graphics.g2d.TextureRegion[][] split(int,int)
    public static com.badlogic.gdx.graphics.g2d.TextureRegion[][] split(com.badlogic.gdx.graphics.Texture,int,int)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Bitmap
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Face
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Glyph
com.badlogic.gdx.graphics.g2d.freetype.FreeType$GlyphMetrics
com.badlogic.gdx.graphics.g2d.freetype.FreeType$GlyphSlot
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Library
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Pointer
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Size
com.badlogic.gdx.graphics.g2d.freetype.FreeType$SizeMetrics
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Stroker
com.badlogic.gdx.graphics.g2d.freetype.FreeType
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$1
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeBitmapFontData
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeFontParameter
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$GlyphAndBitmap
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$Hinting
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGeneratorLoader$FreeTypeFontGeneratorParameters
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGeneratorLoader
com.badlogic.gdx.graphics.g2d.freetype.FreetypeFontLoader$FreeTypeFontLoaderParameter
com.badlogic.gdx.graphics.g2d.freetype.FreetypeFontLoader
com.badlogic.gdx.graphics.g3d.Attribute
com.badlogic.gdx.graphics.g3d.Attributes
com.badlogic.gdx.graphics.g3d.Environment
com.badlogic.gdx.graphics.g3d.Material
com.badlogic.gdx.graphics.g3d.Model
com.badlogic.gdx.graphics.g3d.ModelBatch$RenderablePool
com.badlogic.gdx.graphics.g3d.ModelBatch
com.badlogic.gdx.graphics.g3d.ModelCache$1
com.badlogic.gdx.graphics.g3d.ModelCache$2
com.badlogic.gdx.graphics.g3d.ModelCache$MeshPool
com.badlogic.gdx.graphics.g3d.ModelCache$SimpleMeshPool
com.badlogic.gdx.graphics.g3d.ModelCache$Sorter
com.badlogic.gdx.graphics.g3d.ModelCache$TightMeshPool
com.badlogic.gdx.graphics.g3d.ModelCache
com.badlogic.gdx.graphics.g3d.ModelInstance
com.badlogic.gdx.graphics.g3d.Renderable
com.badlogic.gdx.graphics.g3d.RenderableProvider
com.badlogic.gdx.graphics.g3d.Shader
com.badlogic.gdx.graphics.g3d.attributes.BlendingAttribute
com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute
com.badlogic.gdx.graphics.g3d.attributes.CubemapAttribute
com.badlogic.gdx.graphics.g3d.attributes.DepthTestAttribute
com.badlogic.gdx.graphics.g3d.attributes.DirectionalLightsAttribute
com.badlogic.gdx.graphics.g3d.attributes.FloatAttribute
com.badlogic.gdx.graphics.g3d.attributes.IntAttribute
com.badlogic.gdx.graphics.g3d.attributes.PointLightsAttribute
com.badlogic.gdx.graphics.g3d.attributes.SpotLightsAttribute
com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute
com.badlogic.gdx.graphics.g3d.decals.CameraGroupStrategy$1
com.badlogic.gdx.graphics.g3d.decals.CameraGroupStrategy$2
com.badlogic.gdx.graphics.g3d.decals.CameraGroupStrategy
com.badlogic.gdx.graphics.g3d.decals.Decal
com.badlogic.gdx.graphics.g3d.decals.DecalBatch$1
com.badlogic.gdx.graphics.g3d.decals.DecalBatch
com.badlogic.gdx.graphics.g3d.decals.DecalMaterial
com.badlogic.gdx.graphics.g3d.decals.GroupPlug
com.badlogic.gdx.graphics.g3d.decals.GroupStrategy
com.badlogic.gdx.graphics.g3d.decals.PluggableGroupStrategy
com.badlogic.gdx.graphics.g3d.decals.SimpleOrthoGroupStrategy$Comparator
com.badlogic.gdx.graphics.g3d.decals.SimpleOrthoGroupStrategy
com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap
com.badlogic.gdx.graphics.g3d.environment.BaseLight
com.badlogic.gdx.graphics.g3d.environment.DirectionalLight
com.badlogic.gdx.graphics.g3d.environment.DirectionalShadowLight
com.badlogic.gdx.graphics.g3d.environment.PointLight
com.badlogic.gdx.graphics.g3d.environment.ShadowMap
com.badlogic.gdx.graphics.g3d.environment.SphericalHarmonics
com.badlogic.gdx.graphics.g3d.environment.SpotLight
com.badlogic.gdx.graphics.g3d.loader.G3dModelLoader
com.badlogic.gdx.graphics.g3d.loader.MtlLoader$ObjMaterial
com.badlogic.gdx.graphics.g3d.loader.MtlLoader
com.badlogic.gdx.graphics.g3d.loader.ObjLoader$Group
com.badlogic.gdx.graphics.g3d.loader.ObjLoader$ObjLoaderParameters
com.badlogic.gdx.graphics.g3d.loader.ObjLoader
com.badlogic.gdx.graphics.g3d.model.Animation
com.badlogic.gdx.graphics.g3d.model.MeshPart
com.badlogic.gdx.graphics.g3d.model.Node
com.badlogic.gdx.graphics.g3d.model.NodeAnimation
com.badlogic.gdx.graphics.g3d.model.NodeKeyframe
com.badlogic.gdx.graphics.g3d.model.NodePart
com.badlogic.gdx.graphics.g3d.model.data.ModelAnimation
com.badlogic.gdx.graphics.g3d.model.data.ModelData
com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial$MaterialType
com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial
com.badlogic.gdx.graphics.g3d.model.data.ModelMesh
com.badlogic.gdx.graphics.g3d.model.data.ModelMeshPart
com.badlogic.gdx.graphics.g3d.model.data.ModelNode
com.badlogic.gdx.graphics.g3d.model.data.ModelNodeAnimation
com.badlogic.gdx.graphics.g3d.model.data.ModelNodeKeyframe
com.badlogic.gdx.graphics.g3d.model.data.ModelNodePart
com.badlogic.gdx.graphics.g3d.model.data.ModelTexture
com.badlogic.gdx.graphics.g3d.particles.ParallelArray$Channel
com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ChannelDescriptor
com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ChannelInitializer
com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel
com.badlogic.gdx.graphics.g3d.particles.ParallelArray$IntChannel
com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ObjectChannel
com.badlogic.gdx.graphics.g3d.particles.ParallelArray
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$ColorInitializer
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$Rotation2dInitializer
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$Rotation3dInitializer
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$ScaleInitializer
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$TextureRegionInitializer
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels
com.badlogic.gdx.graphics.g3d.particles.ParticleController
com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent
com.badlogic.gdx.graphics.g3d.particles.ParticleEffect
com.badlogic.gdx.graphics.g3d.particles.ParticleEffectLoader$ParticleEffectLoadParameter
com.badlogic.gdx.graphics.g3d.particles.ParticleEffectLoader$ParticleEffectSaveParameter
com.badlogic.gdx.graphics.g3d.particles.ParticleEffectLoader
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$AlignMode
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Config
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Inputs
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$ParticleType
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters$1
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters$2
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters$3
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters$4
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters$5
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters$6
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters
com.badlogic.gdx.graphics.g3d.particles.ParticleShader
com.badlogic.gdx.graphics.g3d.particles.ParticleSorter$Distance
com.badlogic.gdx.graphics.g3d.particles.ParticleSorter$None
com.badlogic.gdx.graphics.g3d.particles.ParticleSorter
com.badlogic.gdx.graphics.g3d.particles.ParticleSystem
com.badlogic.gdx.graphics.g3d.particles.ResourceData$AssetData
com.badlogic.gdx.graphics.g3d.particles.ResourceData$Configurable
com.badlogic.gdx.graphics.g3d.particles.ResourceData$SaveData
com.badlogic.gdx.graphics.g3d.particles.ResourceData
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch$Config
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch$RenderablePool
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch
com.badlogic.gdx.graphics.g3d.particles.batches.BufferedParticleBatch
com.badlogic.gdx.graphics.g3d.particles.batches.ModelInstanceParticleBatch
com.badlogic.gdx.graphics.g3d.particles.batches.ParticleBatch
com.badlogic.gdx.graphics.g3d.particles.batches.PointSpriteParticleBatch
com.badlogic.gdx.graphics.g3d.particles.emitters.Emitter
com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter$EmissionMode
com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter
com.badlogic.gdx.graphics.g3d.particles.influencers.ColorInfluencer$Random
com.badlogic.gdx.graphics.g3d.particles.influencers.ColorInfluencer$Single
com.badlogic.gdx.graphics.g3d.particles.influencers.ColorInfluencer
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsInfluencer
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Angular
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$BrownianAcceleration
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$CentripetalAcceleration
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$FaceDirection
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$PolarAcceleration
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Rotational2D
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Rotational3D
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Strength
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$TangentialAcceleration
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier
com.badlogic.gdx.graphics.g3d.particles.influencers.Influencer
com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer$Random$ModelInstancePool
com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer$Random
com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer$Single
com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerFinalizerInfluencer
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer$Random$ParticleControllerPool
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer$Random
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer$Single
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$Animated
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$AspectTextureRegion
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$Random
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$Single
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer
com.badlogic.gdx.graphics.g3d.particles.influencers.ScaleInfluencer
com.badlogic.gdx.graphics.g3d.particles.influencers.SimpleInfluencer
com.badlogic.gdx.graphics.g3d.particles.influencers.SpawnInfluencer
com.badlogic.gdx.graphics.g3d.particles.renderers.BillboardControllerRenderData
com.badlogic.gdx.graphics.g3d.particles.renderers.BillboardRenderer
com.badlogic.gdx.graphics.g3d.particles.renderers.ModelInstanceControllerRenderData
com.badlogic.gdx.graphics.g3d.particles.renderers.ModelInstanceRenderer
com.badlogic.gdx.graphics.g3d.particles.renderers.ParticleControllerControllerRenderer
com.badlogic.gdx.graphics.g3d.particles.renderers.ParticleControllerRenderData
com.badlogic.gdx.graphics.g3d.particles.renderers.ParticleControllerRenderer
com.badlogic.gdx.graphics.g3d.particles.renderers.PointSpriteControllerRenderData
com.badlogic.gdx.graphics.g3d.particles.renderers.PointSpriteRenderer
com.badlogic.gdx.graphics.g3d.particles.values.CylinderSpawnShapeValue
com.badlogic.gdx.graphics.g3d.particles.values.EllipseSpawnShapeValue
com.badlogic.gdx.graphics.g3d.particles.values.GradientColorValue
com.badlogic.gdx.graphics.g3d.particles.values.LineSpawnShapeValue
com.badlogic.gdx.graphics.g3d.particles.values.MeshSpawnShapeValue$Triangle
com.badlogic.gdx.graphics.g3d.particles.values.MeshSpawnShapeValue
com.badlogic.gdx.graphics.g3d.particles.values.NumericValue
com.badlogic.gdx.graphics.g3d.particles.values.ParticleValue
com.badlogic.gdx.graphics.g3d.particles.values.PointSpawnShapeValue
com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue$SpawnSide
com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue
com.badlogic.gdx.graphics.g3d.particles.values.RangedNumericValue
com.badlogic.gdx.graphics.g3d.particles.values.RectangleSpawnShapeValue
com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue
com.badlogic.gdx.graphics.g3d.particles.values.SpawnShapeValue
com.badlogic.gdx.graphics.g3d.particles.values.UnweightedMeshSpawnShapeValue
com.badlogic.gdx.graphics.g3d.particles.values.WeightMeshSpawnShapeValue
com.badlogic.gdx.graphics.g3d.shaders.BaseShader$GlobalSetter
com.badlogic.gdx.graphics.g3d.shaders.BaseShader$LocalSetter
com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter
com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform
com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Validator
com.badlogic.gdx.graphics.g3d.shaders.BaseShader
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Config
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Inputs
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$10
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$11
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$12
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$13
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$14
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$15
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$16
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$17
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$18
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$19
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$1
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$20
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$21
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$22
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$23
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$24
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$25
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$26
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$27
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$28
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$29
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$2
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$3
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$4
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$5
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$6
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$7
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$8
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$9
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$ACubemap
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$Bones
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader
com.badlogic.gdx.graphics.g3d.shaders.DepthShader$Config
com.badlogic.gdx.graphics.g3d.shaders.DepthShader
com.badlogic.gdx.graphics.g3d.utils.AnimationController$1
com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc
com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationListener
com.badlogic.gdx.graphics.g3d.utils.AnimationController
com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController$1
com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController$Transform
com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController
com.badlogic.gdx.graphics.g3d.utils.BaseShaderProvider
com.badlogic.gdx.graphics.g3d.utils.CameraInputController$CameraGestureListener
com.badlogic.gdx.graphics.g3d.utils.CameraInputController
com.badlogic.gdx.graphics.g3d.utils.DefaultRenderableSorter
com.badlogic.gdx.graphics.g3d.utils.DefaultShaderProvider
com.badlogic.gdx.graphics.g3d.utils.DefaultTextureBinder
com.badlogic.gdx.graphics.g3d.utils.DepthShaderProvider
com.badlogic.gdx.graphics.g3d.utils.FirstPersonCameraController
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder
com.badlogic.gdx.graphics.g3d.utils.ModelBuilder
com.badlogic.gdx.graphics.g3d.utils.RenderContext
com.badlogic.gdx.graphics.g3d.utils.RenderableSorter
com.badlogic.gdx.graphics.g3d.utils.ShaderProvider
com.badlogic.gdx.graphics.g3d.utils.ShapeCache
com.badlogic.gdx.graphics.g3d.utils.TextureBinder
com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor
com.badlogic.gdx.graphics.g3d.utils.TextureProvider$AssetTextureProvider
com.badlogic.gdx.graphics.g3d.utils.TextureProvider$FileTextureProvider
com.badlogic.gdx.graphics.g3d.utils.TextureProvider
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.ArrowShapeBuilder
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.BaseShapeBuilder$1
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.BaseShapeBuilder$2
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.BaseShapeBuilder
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.BoxShapeBuilder
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.CapsuleShapeBuilder
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.ConeShapeBuilder
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.CylinderShapeBuilder
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.EllipseShapeBuilder
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.FrustumShapeBuilder
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.PatchShapeBuilder
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.RenderableShapeBuilder$RenderablePool
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.RenderableShapeBuilder
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.SphereShapeBuilder
com.badlogic.gdx.graphics.glutils.CustomTexture3DData
com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data:
    public void write(com.badlogic.gdx.files.FileHandle)
com.badlogic.gdx.graphics.glutils.ETC1:
    public void <init>()
    public static com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data encodeImage(com.badlogic.gdx.graphics.Pixmap)
    private static native java.nio.ByteBuffer encodeImage(java.nio.ByteBuffer,int,int,int,int)
    public static com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data encodeImagePKM(com.badlogic.gdx.graphics.Pixmap)
    private static native java.nio.ByteBuffer encodeImagePKM(java.nio.ByteBuffer,int,int,int,int)
    public static native void formatHeader(java.nio.ByteBuffer,int,int,int)
    public static native int getCompressedDataSize(int,int)
com.badlogic.gdx.graphics.glutils.ETC1TextureData:
    public void <init>(com.badlogic.gdx.files.FileHandle)
    public void <init>(com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data,boolean)
com.badlogic.gdx.graphics.glutils.FacedCubemapData
com.badlogic.gdx.graphics.glutils.FileTextureArrayData
com.badlogic.gdx.graphics.glutils.FileTextureData:
    public com.badlogic.gdx.files.FileHandle getFileHandle()
com.badlogic.gdx.graphics.glutils.FloatFrameBuffer
com.badlogic.gdx.graphics.glutils.FloatTextureData
com.badlogic.gdx.graphics.glutils.FrameBuffer:
    void <init>()
    public void <init>(com.badlogic.gdx.graphics.Pixmap$Format,int,int,boolean)
    public void <init>(com.badlogic.gdx.graphics.Pixmap$Format,int,int,boolean,boolean)
    protected void <init>(com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder)
    protected synthetic bridge void attachFrameBufferColorTexture(com.badlogic.gdx.graphics.GLTexture)
    protected void attachFrameBufferColorTexture(com.badlogic.gdx.graphics.Texture)
    protected synthetic bridge com.badlogic.gdx.graphics.GLTexture createTexture(com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferTextureAttachmentSpec)
    protected com.badlogic.gdx.graphics.Texture createTexture(com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferTextureAttachmentSpec)
    protected synthetic bridge void disposeColorTexture(com.badlogic.gdx.graphics.GLTexture)
    protected void disposeColorTexture(com.badlogic.gdx.graphics.Texture)
    public static void unbind()
com.badlogic.gdx.graphics.glutils.FrameBufferCubemap
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FloatFrameBufferBuilder
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferBuilder
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferCubemapBuilder
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferRenderBufferAttachmentSpec:
    public void <init>(int)
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferTextureAttachmentSpec:
    int format
    int internalFormat
    boolean isGpuOnly
    int type
    public void <init>(int,int,int)
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder:
    public void <init>(int,int)
    public com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addBasicColorTextureAttachment(com.badlogic.gdx.graphics.Pixmap$Format)
    public com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addBasicDepthRenderBuffer()
    public com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addBasicStencilDepthPackedRenderBuffer()
    public com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addBasicStencilRenderBuffer()
    public com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addColorTextureAttachment(int,int,int)
    public com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addDepthRenderBuffer(int)
    public com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addDepthTextureAttachment(int,int)
    public com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addFloatAttachment(int,int,int,boolean)
    public com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addStencilDepthPackedRenderBuffer(int)
    public com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addStencilRenderBuffer(int)
    public com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addStencilTextureAttachment(int,int)
    public abstract com.badlogic.gdx.graphics.glutils.GLFrameBuffer build()
com.badlogic.gdx.graphics.glutils.GLFrameBuffer:
    protected static final int GL_DEPTH24_STENCIL8_OES
    protected void <init>(com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder)
    public void begin()
    public void bind()
    public void end()
    public void end(int,int,int,int)
    public com.badlogic.gdx.graphics.GLTexture getColorBufferTexture()
    public int getDepthBufferHandle()
    protected int getDepthStencilPackedBuffer()
    public int getFramebufferHandle()
    public int getHeight()
    public int getStencilBufferHandle()
    public com.badlogic.gdx.utils.Array getTextureAttachments()
    public int getWidth()
    protected void setFrameBufferViewport()
    public static void unbind()
com.badlogic.gdx.graphics.glutils.GLOnlyTextureData
com.badlogic.gdx.graphics.glutils.GLVersion:
    public java.lang.String getDebugVersionString()
    public int getMinorVersion()
    public int getReleaseVersion()
    public java.lang.String getRendererString()
    public com.badlogic.gdx.graphics.glutils.GLVersion$Type getType()
    public java.lang.String getVendorString()
    public boolean isVersionEqualToOrHigher(int,int)
com.badlogic.gdx.graphics.glutils.HdpiUtils:
    public void <init>()
    public static void setMode(com.badlogic.gdx.graphics.glutils.HdpiMode)
    public static int toLogicalX(int)
    public static int toLogicalY(int)
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer20:
    public void <init>(boolean,boolean,int)
    public void color(com.badlogic.gdx.graphics.Color)
    public com.badlogic.gdx.graphics.glutils.ShaderProgram getShader()
    public void normal(float,float,float)
    public void setShader(com.badlogic.gdx.graphics.glutils.ShaderProgram)
    public void texCoord(float,float)
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer:
    public abstract void color(com.badlogic.gdx.graphics.Color)
    public abstract void flush()
    public abstract void normal(float,float,float)
    public abstract void texCoord(float,float)
com.badlogic.gdx.graphics.glutils.IndexArray:
    public java.nio.ShortBuffer getBuffer()
    public void setIndices(java.nio.ShortBuffer)
    public void updateIndices(int,short[],int,int)
com.badlogic.gdx.graphics.glutils.IndexBufferObject:
    public void <init>(int)
    public void <init>(boolean,java.nio.ByteBuffer)
    public java.nio.ShortBuffer getBuffer()
    public void setIndices(java.nio.ShortBuffer)
    public void updateIndices(int,short[],int,int)
com.badlogic.gdx.graphics.glutils.IndexBufferObjectSubData:
    public void <init>(int)
    public java.nio.ShortBuffer getBuffer()
    public void setIndices(java.nio.ShortBuffer)
    public void updateIndices(int,short[],int,int)
com.badlogic.gdx.graphics.glutils.IndexData:
    public abstract java.nio.ShortBuffer getBuffer()
    public abstract void setIndices(java.nio.ShortBuffer)
    public abstract void updateIndices(int,short[],int,int)
com.badlogic.gdx.graphics.glutils.InstanceBufferObject
com.badlogic.gdx.graphics.glutils.InstanceBufferObjectSubData
com.badlogic.gdx.graphics.glutils.InstanceData:
    public abstract void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram)
    public abstract com.badlogic.gdx.graphics.VertexAttributes getAttributes()
    public abstract java.nio.FloatBuffer getBuffer()
    public abstract java.nio.FloatBuffer getBuffer(boolean)
    public abstract int getNumMaxInstances()
    public abstract void invalidate()
    public abstract void setInstanceData(java.nio.FloatBuffer,int)
    public abstract void setInstanceData(float[],int,int)
    public abstract void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram)
    public abstract void updateInstanceData(int,java.nio.FloatBuffer,int,int)
    public abstract void updateInstanceData(int,float[],int,int)
com.badlogic.gdx.graphics.glutils.KTXTextureData:
    private static final int GL_TEXTURE_1D
    private static final int GL_TEXTURE_1D_ARRAY_EXT
    private static final int GL_TEXTURE_2D_ARRAY_EXT
    private static final int GL_TEXTURE_3D
    public java.nio.ByteBuffer getData(int,int)
    public int getGlInternalFormat()
    public int getNumberOfFaces()
    public int getNumberOfMipMapLevels()
com.badlogic.gdx.graphics.glutils.MipMapGenerator:
    private void <init>()
    public static void generateMipMap(com.badlogic.gdx.graphics.Pixmap,int,int)
    public static void setUseHardwareMipMap(boolean)
com.badlogic.gdx.graphics.glutils.MipMapTextureData
com.badlogic.gdx.graphics.glutils.PixmapTextureData
com.badlogic.gdx.graphics.glutils.ShaderProgram:
    public static final java.lang.String BINORMAL_ATTRIBUTE
    public static final java.lang.String BONEWEIGHT_ATTRIBUTE
    public static final java.lang.String COLOR_ATTRIBUTE
    public static final java.lang.String NORMAL_ATTRIBUTE
    public static final java.lang.String POSITION_ATTRIBUTE
    public static final java.lang.String TANGENT_ATTRIBUTE
    public static final java.lang.String TEXCOORD_ATTRIBUTE
    public void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle)
    public void begin()
    public void enableVertexAttribute(java.lang.String)
    public void end()
    public int getAttributeSize(java.lang.String)
    public int getAttributeType(java.lang.String)
    public java.lang.String[] getAttributes()
    public java.lang.String getFragmentShaderSource()
    public int getHandle()
    public static int getNumManagedShaderPrograms()
    public int getUniformLocation(java.lang.String)
    public int getUniformSize(java.lang.String)
    public int getUniformType(java.lang.String)
    public java.lang.String[] getUniforms()
    public java.lang.String getVertexShaderSource()
    public boolean hasAttribute(java.lang.String)
    public boolean hasUniform(java.lang.String)
    public void setAttributef(java.lang.String,float,float,float,float)
    public void setUniform1fv(int,float[],int,int)
    public void setUniform1fv(java.lang.String,float[],int,int)
    public void setUniform2fv(int,float[],int,int)
    public void setUniform2fv(java.lang.String,float[],int,int)
    public void setUniform3fv(int,float[],int,int)
    public void setUniform3fv(java.lang.String,float[],int,int)
    public void setUniform4fv(int,float[],int,int)
    public void setUniform4fv(java.lang.String,float[],int,int)
    public void setUniformMatrix(int,com.badlogic.gdx.math.Matrix3)
    public void setUniformMatrix(int,com.badlogic.gdx.math.Matrix3,boolean)
    public void setUniformMatrix(int,com.badlogic.gdx.math.Matrix4)
    public void setUniformMatrix(java.lang.String,com.badlogic.gdx.math.Matrix3)
    public void setUniformMatrix(java.lang.String,com.badlogic.gdx.math.Matrix3,boolean)
    public void setUniformMatrix3fv(java.lang.String,java.nio.FloatBuffer,int,boolean)
    public void setUniformMatrix4fv(int,float[],int,int)
    public void setUniformMatrix4fv(java.lang.String,java.nio.FloatBuffer,int,boolean)
    public void setUniformMatrix4fv(java.lang.String,float[],int,int)
    public void setUniformf(int,float)
    public void setUniformf(int,float,float)
    public void setUniformf(int,float,float,float)
    public void setUniformf(int,float,float,float,float)
    public void setUniformf(int,com.badlogic.gdx.graphics.Color)
    public void setUniformf(int,com.badlogic.gdx.math.Vector2)
    public void setUniformf(int,com.badlogic.gdx.math.Vector3)
    public void setUniformf(int,com.badlogic.gdx.math.Vector4)
    public void setUniformf(java.lang.String,float)
    public void setUniformf(java.lang.String,float,float)
    public void setUniformf(java.lang.String,float,float,float)
    public void setUniformf(java.lang.String,float,float,float,float)
    public void setUniformf(java.lang.String,com.badlogic.gdx.graphics.Color)
    public void setUniformf(java.lang.String,com.badlogic.gdx.math.Vector2)
    public void setUniformf(java.lang.String,com.badlogic.gdx.math.Vector3)
    public void setUniformf(java.lang.String,com.badlogic.gdx.math.Vector4)
    public void setUniformi(int,int)
    public void setUniformi(int,int,int)
    public void setUniformi(int,int,int,int)
    public void setUniformi(int,int,int,int,int)
    public void setUniformi(java.lang.String,int,int)
    public void setUniformi(java.lang.String,int,int,int)
    public void setUniformi(java.lang.String,int,int,int,int)
    public void setVertexAttribute(java.lang.String,int,int,boolean,int,int)
    public void setVertexAttribute(java.lang.String,int,int,boolean,int,java.nio.Buffer)
com.badlogic.gdx.graphics.glutils.ShapeRenderer:
    public void arc(float,float,float,float,float)
    public void arc(float,float,float,float,float,int)
    public void box(float,float,float,float,float,float)
    public void circle(float,float,float)
    public void circle(float,float,float,int)
    public void cone(float,float,float,float,float)
    public void cone(float,float,float,float,float,int)
    public void curve(float,float,float,float,float,float,float,float,int)
    public void ellipse(float,float,float,float)
    public void ellipse(float,float,float,float,float)
    public void ellipse(float,float,float,float,float,int)
    public void ellipse(float,float,float,float,int)
    public com.badlogic.gdx.graphics.Color getColor()
    public com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType getCurrentType()
    public com.badlogic.gdx.math.Matrix4 getProjectionMatrix()
    public com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer getRenderer()
    public void identity()
    public final void line(float,float,float,float)
    public final void line(float,float,float,float,float,float)
    public void line(float,float,float,float,float,float,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color)
    public final void line(float,float,float,float,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color)
    public final void line(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2)
    public final void line(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
    public void point(float,float,float)
    public void polygon(float[])
    public void polygon(float[],int,int)
    public void polyline(float[])
    public void polyline(float[],int,int)
    public void rect(float,float,float,float,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color)
    public void rectLine(float,float,float,float,float)
    public void rectLine(float,float,float,float,float,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color)
    public void rectLine(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,float)
    public void rotate(float,float,float,float)
    public void scale(float,float,float)
    public void setColor(float,float,float,float)
    public void translate(float,float,float)
    public void triangle(float,float,float,float,float,float)
    public void triangle(float,float,float,float,float,float,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color)
    public void updateMatrices()
    public void x(float,float,float)
    public void x(com.badlogic.gdx.math.Vector2,float)
com.badlogic.gdx.graphics.glutils.VertexArray:
    public varargs void <init>(int,com.badlogic.gdx.graphics.VertexAttribute[])
    public void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram)
    public java.nio.FloatBuffer getBuffer()
    public java.nio.FloatBuffer getBuffer(boolean)
    public int getNumMaxVertices()
    public void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram)
    public void updateVertices(int,float[],int,int)
com.badlogic.gdx.graphics.glutils.VertexBufferObject:
    protected void <init>(int,java.nio.ByteBuffer,boolean,com.badlogic.gdx.graphics.VertexAttributes)
    public varargs void <init>(boolean,int,com.badlogic.gdx.graphics.VertexAttribute[])
    public void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram)
    public java.nio.FloatBuffer getBuffer()
    public java.nio.FloatBuffer getBuffer(boolean)
    public int getNumMaxVertices()
    protected int getUsage()
    public void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram)
    public void updateVertices(int,float[],int,int)
com.badlogic.gdx.graphics.glutils.VertexBufferObjectSubData:
    public varargs void <init>(boolean,int,com.badlogic.gdx.graphics.VertexAttribute[])
    public void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram)
    public java.nio.FloatBuffer getBuffer()
    public java.nio.FloatBuffer getBuffer(boolean)
    public int getBufferHandle()
    public int getNumMaxVertices()
    public void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram)
    public void updateVertices(int,float[],int,int)
com.badlogic.gdx.graphics.glutils.VertexBufferObjectWithVAO:
    public varargs void <init>(boolean,int,com.badlogic.gdx.graphics.VertexAttribute[])
    public void <init>(boolean,java.nio.ByteBuffer,com.badlogic.gdx.graphics.VertexAttributes)
    public void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram)
    public java.nio.FloatBuffer getBuffer()
    public java.nio.FloatBuffer getBuffer(boolean)
    public int getNumMaxVertices()
    public void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram)
    public void updateVertices(int,float[],int,int)
com.badlogic.gdx.graphics.glutils.VertexData:
    public abstract void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram)
    public abstract java.nio.FloatBuffer getBuffer()
    public abstract java.nio.FloatBuffer getBuffer(boolean)
    public abstract int getNumMaxVertices()
    public abstract void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram)
    public abstract void updateVertices(int,float[],int,int)
com.badlogic.gdx.graphics.profiling.GL20Interceptor
com.badlogic.gdx.graphics.profiling.GL30Interceptor
com.badlogic.gdx.graphics.profiling.GL31Interceptor
com.badlogic.gdx.graphics.profiling.GL32Interceptor
com.badlogic.gdx.graphics.profiling.GLErrorListener$1
com.badlogic.gdx.graphics.profiling.GLErrorListener$2
com.badlogic.gdx.graphics.profiling.GLErrorListener
com.badlogic.gdx.graphics.profiling.GLInterceptor
com.badlogic.gdx.graphics.profiling.GLProfiler
com.badlogic.gdx.input.GestureDetector$GestureAdapter:
    public boolean fling(float,float,int)
    public boolean longPress(float,float)
    public boolean pan(float,float,float,float)
    public boolean panStop(float,float,int,int)
    public boolean pinch(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2)
    public boolean tap(float,float,int,int)
    public boolean zoom(float,float)
com.badlogic.gdx.input.GestureDetector$VelocityTracker:
    private float getSum(float[],int)
com.badlogic.gdx.input.GestureDetector:
    public void <init>(com.badlogic.gdx.input.GestureDetector$GestureListener)
    public void invalidateTapSquare()
    public boolean isLongPressed()
    public boolean isLongPressed(float)
    public void setLongPressSeconds(float)
    public void setMaxFlingDelay(long)
    public void setTapCountInterval(float)
com.badlogic.gdx.input.RemoteInput$EventTrigger
com.badlogic.gdx.input.RemoteInput$KeyEvent
com.badlogic.gdx.input.RemoteInput$RemoteInputListener
com.badlogic.gdx.input.RemoteInput$TouchEvent
com.badlogic.gdx.input.RemoteInput
com.badlogic.gdx.input.RemoteSender
com.badlogic.gdx.maps.ImageResolver$AssetManagerImageResolver
com.badlogic.gdx.maps.ImageResolver$DirectImageResolver
com.badlogic.gdx.maps.ImageResolver$TextureAtlasImageResolver
com.badlogic.gdx.maps.ImageResolver
com.badlogic.gdx.maps.Map
com.badlogic.gdx.maps.MapGroupLayer
com.badlogic.gdx.maps.MapLayer
com.badlogic.gdx.maps.MapLayers
com.badlogic.gdx.maps.MapObject
com.badlogic.gdx.maps.MapObjects
com.badlogic.gdx.maps.MapProperties
com.badlogic.gdx.maps.MapRenderer
com.badlogic.gdx.maps.objects.CircleMapObject
com.badlogic.gdx.maps.objects.EllipseMapObject
com.badlogic.gdx.maps.objects.PolygonMapObject
com.badlogic.gdx.maps.objects.PolylineMapObject
com.badlogic.gdx.maps.objects.RectangleMapObject
com.badlogic.gdx.maps.objects.TextureMapObject
com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader$AtlasResolver$AssetManagerAtlasResolver
com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader$AtlasResolver$DirectAtlasResolver
com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader$AtlasResolver
com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader$AtlasTiledMapLoaderParameters
com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader$1
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader$Parameters
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader
com.badlogic.gdx.maps.tiled.TideMapLoader$Parameters
com.badlogic.gdx.maps.tiled.TideMapLoader
com.badlogic.gdx.maps.tiled.TiledMap
com.badlogic.gdx.maps.tiled.TiledMapImageLayer
com.badlogic.gdx.maps.tiled.TiledMapRenderer
com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode
com.badlogic.gdx.maps.tiled.TiledMapTile
com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell
com.badlogic.gdx.maps.tiled.TiledMapTileLayer
com.badlogic.gdx.maps.tiled.TiledMapTileSet
com.badlogic.gdx.maps.tiled.TiledMapTileSets
com.badlogic.gdx.maps.tiled.TmxMapLoader$Parameters
com.badlogic.gdx.maps.tiled.TmxMapLoader
com.badlogic.gdx.maps.tiled.objects.TiledMapTileMapObject
com.badlogic.gdx.maps.tiled.renderers.BatchTiledMapRenderer
com.badlogic.gdx.maps.tiled.renderers.HexagonalTiledMapRenderer
com.badlogic.gdx.maps.tiled.renderers.IsometricStaggeredTiledMapRenderer
com.badlogic.gdx.maps.tiled.renderers.IsometricTiledMapRenderer
com.badlogic.gdx.maps.tiled.renderers.OrthoCachedTiledMapRenderer
com.badlogic.gdx.maps.tiled.renderers.OrthogonalTiledMapRenderer
com.badlogic.gdx.maps.tiled.tiles.AnimatedTiledMapTile
com.badlogic.gdx.maps.tiled.tiles.StaticTiledMapTile
com.badlogic.gdx.math.Affine2:
    private static final long serialVersionUID
    public void <init>(com.badlogic.gdx.math.Affine2)
    public void applyTo(com.badlogic.gdx.math.Vector2)
    public float det()
    public com.badlogic.gdx.math.Vector2 getTranslation(com.badlogic.gdx.math.Vector2)
    public com.badlogic.gdx.math.Affine2 idt()
    public com.badlogic.gdx.math.Affine2 inv()
    public boolean isIdt()
    public boolean isTranslation()
    public com.badlogic.gdx.math.Affine2 mul(com.badlogic.gdx.math.Affine2)
    public com.badlogic.gdx.math.Affine2 preRotate(float)
    public com.badlogic.gdx.math.Affine2 preRotateRad(float)
    public com.badlogic.gdx.math.Affine2 preScale(float,float)
    public com.badlogic.gdx.math.Affine2 preScale(com.badlogic.gdx.math.Vector2)
    public com.badlogic.gdx.math.Affine2 preShear(float,float)
    public com.badlogic.gdx.math.Affine2 preShear(com.badlogic.gdx.math.Vector2)
    public com.badlogic.gdx.math.Affine2 preTranslate(float,float)
    public com.badlogic.gdx.math.Affine2 preTranslate(com.badlogic.gdx.math.Vector2)
    public com.badlogic.gdx.math.Affine2 rotate(float)
    public com.badlogic.gdx.math.Affine2 rotateRad(float)
    public com.badlogic.gdx.math.Affine2 scale(float,float)
    public com.badlogic.gdx.math.Affine2 scale(com.badlogic.gdx.math.Vector2)
    public com.badlogic.gdx.math.Affine2 set(com.badlogic.gdx.math.Affine2)
    public com.badlogic.gdx.math.Affine2 set(com.badlogic.gdx.math.Matrix3)
    public com.badlogic.gdx.math.Affine2 set(com.badlogic.gdx.math.Matrix4)
    public com.badlogic.gdx.math.Affine2 setToProduct(com.badlogic.gdx.math.Affine2,com.badlogic.gdx.math.Affine2)
    public com.badlogic.gdx.math.Affine2 setToRotation(float)
    public com.badlogic.gdx.math.Affine2 setToRotation(float,float)
    public com.badlogic.gdx.math.Affine2 setToRotationRad(float)
    public com.badlogic.gdx.math.Affine2 setToScaling(float,float)
    public com.badlogic.gdx.math.Affine2 setToScaling(com.badlogic.gdx.math.Vector2)
    public com.badlogic.gdx.math.Affine2 setToShearing(float,float)
    public com.badlogic.gdx.math.Affine2 setToShearing(com.badlogic.gdx.math.Vector2)
    public com.badlogic.gdx.math.Affine2 setToTranslation(float,float)
    public com.badlogic.gdx.math.Affine2 setToTranslation(com.badlogic.gdx.math.Vector2)
    public com.badlogic.gdx.math.Affine2 setToTrnRotRadScl(float,float,float,float,float)
    public com.badlogic.gdx.math.Affine2 setToTrnRotRadScl(com.badlogic.gdx.math.Vector2,float,com.badlogic.gdx.math.Vector2)
    public com.badlogic.gdx.math.Affine2 setToTrnRotScl(com.badlogic.gdx.math.Vector2,float,com.badlogic.gdx.math.Vector2)
    public com.badlogic.gdx.math.Affine2 setToTrnScl(float,float,float,float)
    public com.badlogic.gdx.math.Affine2 setToTrnScl(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2)
    public com.badlogic.gdx.math.Affine2 shear(float,float)
    public com.badlogic.gdx.math.Affine2 shear(com.badlogic.gdx.math.Vector2)
    public com.badlogic.gdx.math.Affine2 translate(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.math.BSpline
com.badlogic.gdx.math.Bezier
com.badlogic.gdx.math.Bresenham2$1
com.badlogic.gdx.math.Bresenham2
com.badlogic.gdx.math.CatmullRomSpline
com.badlogic.gdx.math.Circle:
    public void <init>(com.badlogic.gdx.math.Circle)
    public void <init>(com.badlogic.gdx.math.Vector2,float)
    public void <init>(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2)
    public float area()
    public float circumference()
    public boolean contains(com.badlogic.gdx.math.Circle)
    public boolean contains(com.badlogic.gdx.math.Vector2)
    public boolean overlaps(com.badlogic.gdx.math.Circle)
    public void set(com.badlogic.gdx.math.Circle)
    public void set(com.badlogic.gdx.math.Vector2,float)
    public void set(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2)
    public void setPosition(float,float)
    public void setPosition(com.badlogic.gdx.math.Vector2)
    public void setRadius(float)
    public void setX(float)
    public void setY(float)
com.badlogic.gdx.math.ConvexHull
com.badlogic.gdx.math.CumulativeDistribution$CumulativeValue
com.badlogic.gdx.math.CumulativeDistribution
com.badlogic.gdx.math.DelaunayTriangulator
com.badlogic.gdx.math.EarClippingTriangulator
com.badlogic.gdx.math.Ellipse
com.badlogic.gdx.math.FloatCounter
com.badlogic.gdx.math.Frustum:
    public boolean boundsInFrustum(float,float,float,float,float,float)
    public boolean boundsInFrustum(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
    public boolean boundsInFrustum(com.badlogic.gdx.math.collision.BoundingBox)
    public boolean boundsInFrustum(com.badlogic.gdx.math.collision.OrientedBoundingBox)
    public boolean pointInFrustum(float,float,float)
    public boolean pointInFrustum(com.badlogic.gdx.math.Vector3)
    public boolean sphereInFrustum(float,float,float,float)
    public boolean sphereInFrustum(com.badlogic.gdx.math.Vector3,float)
    public boolean sphereInFrustumWithoutNearFar(float,float,float,float)
    public boolean sphereInFrustumWithoutNearFar(com.badlogic.gdx.math.Vector3,float)
com.badlogic.gdx.math.GeometryUtils
com.badlogic.gdx.math.GridPoint2
com.badlogic.gdx.math.GridPoint3
com.badlogic.gdx.math.Interpolation$Bounce:
    public void <init>(float[],float[])
com.badlogic.gdx.math.Interpolation$BounceIn:
    public void <init>(float[],float[])
com.badlogic.gdx.math.Interpolation$BounceOut:
    public void <init>(float[],float[])
com.badlogic.gdx.math.Intersector$MinimumTranslationVector
com.badlogic.gdx.math.Intersector$SplitTriangle
com.badlogic.gdx.math.Intersector
com.badlogic.gdx.math.MathUtils$Sin:
    private void <init>()
com.badlogic.gdx.math.MathUtils:
    private static final double BIG_ENOUGH_CEIL
    private static final double BIG_ENOUGH_FLOOR
    private static final int BIG_ENOUGH_INT
    private static final double BIG_ENOUGH_ROUND
    private static final double CEIL
    public static final float E
    public static final float FLOAT_ROUNDING_ERROR
    public static final float HALF_PI
    public static final float PI
    public static final float PI2
    private static final int SIN_BITS
    private static final int SIN_COUNT
    private static final int SIN_MASK
    private static final float degFull
    public static final float degRad
    private static final float degToIndex
    public static final float degreesToRadians
    public static final float nanoToSec
    public static final float radDeg
    private static final float radFull
    private static final float radToIndex
    public static final float radiansToDegrees
    private void <init>()
    public static float acos(float)
    public static float acosDeg(float)
    public static float asin(float)
    public static float asinDeg(float)
    public static float atan(float)
    public static float atan2(float,float)
    public static float atan2Deg(float,float)
    public static float atan2Deg360(float,float)
    public static float atanDeg(float)
    public static float atanUnchecked(double)
    public static double atanUncheckedDeg(double)
    public static int ceilPositive(float)
    public static double clamp(double,double,double)
    public static long clamp(long,long,long)
    public static short clamp(short,short,short)
    public static int floor(float)
    public static int floorPositive(float)
    public static boolean isEqual(float,float)
    public static boolean isZero(float)
    public static boolean isZero(float,float)
    public static float lerp(float,float,float)
    public static float lerpAngle(float,float,float)
    public static float log(float,float)
    public static float log2(float)
    public static float map(float,float,float,float,float)
    public static float norm(float,float,float)
    public static float random(float,float)
    public static int random(int)
    public static long random(long)
    public static long random(long,long)
    public static boolean randomBoolean()
    public static boolean randomBoolean(float)
    public static int randomSign()
    public static float randomTriangular()
    public static float randomTriangular(float)
    public static float randomTriangular(float,float)
    public static float randomTriangular(float,float,float)
    public static int round(float)
    public static float tan(float)
    public static float tanDeg(float)
com.badlogic.gdx.math.Matrix3
com.badlogic.gdx.math.Matrix4:
    public static final int M00
    public static final int M01
    public static final int M02
    public static final int M03
    public static final int M10
    public static final int M11
    public static final int M12
    public static final int M13
    public static final int M20
    public static final int M21
    public static final int M22
    public static final int M23
    public static final int M30
    public static final int M31
    public static final int M32
    public static final int M33
    private static final long serialVersionUID
    public void <init>(com.badlogic.gdx.math.Matrix4)
    public void <init>(com.badlogic.gdx.math.Quaternion)
    public void <init>(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Quaternion,com.badlogic.gdx.math.Vector3)
    public void <init>(float[])
    public com.badlogic.gdx.math.Matrix4 avg(com.badlogic.gdx.math.Matrix4,float)
    public com.badlogic.gdx.math.Matrix4 avg(com.badlogic.gdx.math.Matrix4[])
    public com.badlogic.gdx.math.Matrix4 avg(com.badlogic.gdx.math.Matrix4[],float[])
    public com.badlogic.gdx.math.Matrix4 cpy()
    public float det()
    public float det3x3()
    public void extract4x3Matrix(float[])
    public com.badlogic.gdx.math.Quaternion getRotation(com.badlogic.gdx.math.Quaternion)
    public com.badlogic.gdx.math.Quaternion getRotation(com.badlogic.gdx.math.Quaternion,boolean)
    public com.badlogic.gdx.math.Vector3 getScale(com.badlogic.gdx.math.Vector3)
    public float getScaleX()
    public float getScaleXSquared()
    public float getScaleY()
    public float getScaleYSquared()
    public float getScaleZ()
    public float getScaleZSquared()
    public com.badlogic.gdx.math.Vector3 getTranslation(com.badlogic.gdx.math.Vector3)
    public float[] getValues()
    public boolean hasRotationOrScaling()
    public com.badlogic.gdx.math.Matrix4 inv()
    public com.badlogic.gdx.math.Matrix4 lerp(com.badlogic.gdx.math.Matrix4,float)
    public com.badlogic.gdx.math.Matrix4 mulLeft(com.badlogic.gdx.math.Matrix4)
    public static void mulVec(float[],float[])
    public static native void mulVec(float[],float[],int,int,int)
    public static void prj(float[],float[])
    public static void rot(float[],float[])
    public static native void rot(float[],float[],int,int,int)
    public com.badlogic.gdx.math.Matrix4 rotate(float,float,float,float)
    public com.badlogic.gdx.math.Matrix4 rotate(com.badlogic.gdx.math.Quaternion)
    public com.badlogic.gdx.math.Matrix4 rotate(com.badlogic.gdx.math.Vector3,float)
    public com.badlogic.gdx.math.Matrix4 rotate(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.Matrix4 rotateRad(float,float,float,float)
    public com.badlogic.gdx.math.Matrix4 rotateRad(com.badlogic.gdx.math.Vector3,float)
    public com.badlogic.gdx.math.Matrix4 rotateTowardDirection(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.Matrix4 rotateTowardTarget(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.Matrix4 scale(float,float,float)
    public com.badlogic.gdx.math.Matrix4 scl(float)
    public com.badlogic.gdx.math.Matrix4 scl(float,float,float)
    public com.badlogic.gdx.math.Matrix4 scl(com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.Matrix4 set(float,float,float,float)
    public com.badlogic.gdx.math.Matrix4 set(float,float,float,float,float,float,float)
    public com.badlogic.gdx.math.Matrix4 set(float,float,float,float,float,float,float,float,float,float)
    public com.badlogic.gdx.math.Matrix4 set(com.badlogic.gdx.math.Matrix3)
    public com.badlogic.gdx.math.Matrix4 set(com.badlogic.gdx.math.Quaternion)
    public com.badlogic.gdx.math.Matrix4 set(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Quaternion)
    public com.badlogic.gdx.math.Matrix4 set(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Quaternion,com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.Matrix4 set(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.Matrix4 setAsAffine(com.badlogic.gdx.math.Affine2)
    public com.badlogic.gdx.math.Matrix4 setAsAffine(com.badlogic.gdx.math.Matrix4)
    public com.badlogic.gdx.math.Matrix4 setFromEulerAngles(float,float,float)
    public com.badlogic.gdx.math.Matrix4 setFromEulerAnglesRad(float,float,float)
    public com.badlogic.gdx.math.Matrix4 setToOrtho2D(float,float,float,float,float,float)
    public com.badlogic.gdx.math.Matrix4 setToProjection(float,float,float,float)
    public com.badlogic.gdx.math.Matrix4 setToProjection(float,float,float,float,float,float)
    public com.badlogic.gdx.math.Matrix4 setToRotation(float,float,float,float)
    public com.badlogic.gdx.math.Matrix4 setToRotation(float,float,float,float,float,float)
    public com.badlogic.gdx.math.Matrix4 setToRotation(com.badlogic.gdx.math.Vector3,float)
    public com.badlogic.gdx.math.Matrix4 setToRotation(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.Matrix4 setToRotationRad(float,float,float,float)
    public com.badlogic.gdx.math.Matrix4 setToRotationRad(com.badlogic.gdx.math.Vector3,float)
    public com.badlogic.gdx.math.Matrix4 setToScaling(float,float,float)
    public com.badlogic.gdx.math.Matrix4 setToScaling(com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.Matrix4 setToTranslation(com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.Matrix4 setToTranslationAndScaling(float,float,float,float,float,float)
    public com.badlogic.gdx.math.Matrix4 setToTranslationAndScaling(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.Matrix4 setToWorld(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.Matrix4 setTranslation(float,float,float)
    public com.badlogic.gdx.math.Matrix4 setTranslation(com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.Matrix4 toNormalMatrix()
    public com.badlogic.gdx.math.Matrix4 tra()
    public com.badlogic.gdx.math.Matrix4 translate(float,float,float)
    public com.badlogic.gdx.math.Matrix4 translate(com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.Matrix4 trn(float,float,float)
    public com.badlogic.gdx.math.Matrix4 trn(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.math.Octree$1
com.badlogic.gdx.math.Octree$Collider
com.badlogic.gdx.math.Octree$OctreeNode
com.badlogic.gdx.math.Octree$RayCastResult
com.badlogic.gdx.math.Octree
com.badlogic.gdx.math.Path
com.badlogic.gdx.math.Plane$PlaneSide
com.badlogic.gdx.math.Plane:
    private static final long serialVersionUID
    public void <init>()
    public void <init>(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
    public void <init>(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
    public float distance(com.badlogic.gdx.math.Vector3)
    public float getD()
    public com.badlogic.gdx.math.Vector3 getNormal()
    public boolean isFrontFacing(com.badlogic.gdx.math.Vector3)
    public void set(float,float,float,float)
    public void set(float,float,float,float,float,float)
    public void set(com.badlogic.gdx.math.Plane)
    public void set(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.Plane$PlaneSide testPoint(float,float,float)
    public com.badlogic.gdx.math.Plane$PlaneSide testPoint(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.math.Polygon
com.badlogic.gdx.math.Polyline
com.badlogic.gdx.math.Quaternion:
    private static final long serialVersionUID
    public void <init>(com.badlogic.gdx.math.Quaternion)
    public void <init>(com.badlogic.gdx.math.Vector3,float)
    public com.badlogic.gdx.math.Quaternion add(float,float,float,float)
    public com.badlogic.gdx.math.Quaternion add(com.badlogic.gdx.math.Quaternion)
    public com.badlogic.gdx.math.Quaternion conjugate()
    public com.badlogic.gdx.math.Quaternion cpy()
    public float dot(float,float,float,float)
    public static final float dot(float,float,float,float,float,float,float,float)
    public float dot(com.badlogic.gdx.math.Quaternion)
    public com.badlogic.gdx.math.Quaternion exp(float)
    public float getAngle()
    public float getAngleAround(float,float,float)
    public float getAngleAround(com.badlogic.gdx.math.Vector3)
    public float getAngleAroundRad(float,float,float)
    public float getAngleAroundRad(com.badlogic.gdx.math.Vector3)
    public float getAngleRad()
    public float getAxisAngle(com.badlogic.gdx.math.Vector3)
    public float getAxisAngleRad(com.badlogic.gdx.math.Vector3)
    public int getGimbalPole()
    public float getPitch()
    public float getPitchRad()
    public float getRoll()
    public float getRollRad()
    public void getSwingTwist(float,float,float,com.badlogic.gdx.math.Quaternion,com.badlogic.gdx.math.Quaternion)
    public void getSwingTwist(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Quaternion,com.badlogic.gdx.math.Quaternion)
    public float getYaw()
    public float getYawRad()
    public boolean isIdentity()
    public boolean isIdentity(float)
    public float len()
    public static final float len(float,float,float,float)
    public float len2()
    public static final float len2(float,float,float,float)
    public com.badlogic.gdx.math.Quaternion mul(float)
    public com.badlogic.gdx.math.Quaternion mul(float,float,float,float)
    public com.badlogic.gdx.math.Quaternion mul(com.badlogic.gdx.math.Quaternion)
    public com.badlogic.gdx.math.Quaternion mulLeft(float,float,float,float)
    public com.badlogic.gdx.math.Quaternion mulLeft(com.badlogic.gdx.math.Quaternion)
    public com.badlogic.gdx.math.Quaternion nor()
    public com.badlogic.gdx.math.Quaternion set(com.badlogic.gdx.math.Quaternion)
    public com.badlogic.gdx.math.Quaternion set(com.badlogic.gdx.math.Vector3,float)
    public com.badlogic.gdx.math.Quaternion setEulerAngles(float,float,float)
    public com.badlogic.gdx.math.Quaternion setEulerAnglesRad(float,float,float)
    public com.badlogic.gdx.math.Quaternion setFromAxes(float,float,float,float,float,float,float,float,float)
    public com.badlogic.gdx.math.Quaternion setFromAxes(boolean,float,float,float,float,float,float,float,float,float)
    public com.badlogic.gdx.math.Quaternion setFromAxis(float,float,float,float)
    public com.badlogic.gdx.math.Quaternion setFromAxis(com.badlogic.gdx.math.Vector3,float)
    public com.badlogic.gdx.math.Quaternion setFromAxisRad(float,float,float,float)
    public com.badlogic.gdx.math.Quaternion setFromAxisRad(com.badlogic.gdx.math.Vector3,float)
    public com.badlogic.gdx.math.Quaternion setFromCross(float,float,float,float,float,float)
    public com.badlogic.gdx.math.Quaternion setFromCross(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.Quaternion setFromMatrix(com.badlogic.gdx.math.Matrix3)
    public com.badlogic.gdx.math.Quaternion setFromMatrix(com.badlogic.gdx.math.Matrix4)
    public com.badlogic.gdx.math.Quaternion setFromMatrix(boolean,com.badlogic.gdx.math.Matrix3)
    public com.badlogic.gdx.math.Quaternion setFromMatrix(boolean,com.badlogic.gdx.math.Matrix4)
    public com.badlogic.gdx.math.Quaternion slerp(com.badlogic.gdx.math.Quaternion,float)
    public com.badlogic.gdx.math.Quaternion slerp(com.badlogic.gdx.math.Quaternion[])
    public com.badlogic.gdx.math.Quaternion slerp(com.badlogic.gdx.math.Quaternion[],float[])
    public void toMatrix(float[])
    public com.badlogic.gdx.math.Vector3 transform(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.math.RandomXS128:
    private static final double NORM_DOUBLE
    private static final double NORM_FLOAT
    public void <init>(long)
    public void <init>(long,long)
    public long getState(int)
com.badlogic.gdx.math.Shape2D
com.badlogic.gdx.math.Vector2:
    private static final long serialVersionUID
    public void <init>(com.badlogic.gdx.math.Vector2)
    public com.badlogic.gdx.math.Vector2 add(com.badlogic.gdx.math.Vector2)
    public synthetic bridge com.badlogic.gdx.math.Vector add(com.badlogic.gdx.math.Vector)
    public float angle()
    public float angle(com.badlogic.gdx.math.Vector2)
    public float angleDeg()
    public float angleDeg(com.badlogic.gdx.math.Vector2)
    public float angleRad()
    public float angleRad(com.badlogic.gdx.math.Vector2)
    public com.badlogic.gdx.math.Vector2 clamp(float,float)
    public synthetic bridge com.badlogic.gdx.math.Vector clamp(float,float)
    public com.badlogic.gdx.math.Vector2 cpy()
    public synthetic bridge com.badlogic.gdx.math.Vector cpy()
    public float crs(float,float)
    public float crs(com.badlogic.gdx.math.Vector2)
    public float dot(float,float)
    public static float dot(float,float,float,float)
    public float dot(com.badlogic.gdx.math.Vector2)
    public synthetic bridge float dot(com.badlogic.gdx.math.Vector)
    public float dst(float,float)
    public static float dst(float,float,float,float)
    public synthetic bridge float dst(com.badlogic.gdx.math.Vector)
    public float dst2(float,float)
    public static float dst2(float,float,float,float)
    public float dst2(com.badlogic.gdx.math.Vector2)
    public synthetic bridge float dst2(com.badlogic.gdx.math.Vector)
    public boolean epsilonEquals(float,float)
    public boolean epsilonEquals(float,float,float)
    public boolean epsilonEquals(com.badlogic.gdx.math.Vector2)
    public boolean epsilonEquals(com.badlogic.gdx.math.Vector2,float)
    public synthetic bridge boolean epsilonEquals(com.badlogic.gdx.math.Vector,float)
    public com.badlogic.gdx.math.Vector2 fromString(java.lang.String)
    public boolean hasOppositeDirection(com.badlogic.gdx.math.Vector2)
    public synthetic bridge boolean hasOppositeDirection(com.badlogic.gdx.math.Vector)
    public boolean hasSameDirection(com.badlogic.gdx.math.Vector2)
    public synthetic bridge boolean hasSameDirection(com.badlogic.gdx.math.Vector)
    public boolean idt(com.badlogic.gdx.math.Vector2)
    public com.badlogic.gdx.math.Vector2 interpolate(com.badlogic.gdx.math.Vector2,float,com.badlogic.gdx.math.Interpolation)
    public synthetic bridge com.badlogic.gdx.math.Vector interpolate(com.badlogic.gdx.math.Vector,float,com.badlogic.gdx.math.Interpolation)
    public boolean isCollinear(com.badlogic.gdx.math.Vector2)
    public boolean isCollinear(com.badlogic.gdx.math.Vector2,float)
    public synthetic bridge boolean isCollinear(com.badlogic.gdx.math.Vector)
    public synthetic bridge boolean isCollinear(com.badlogic.gdx.math.Vector,float)
    public boolean isCollinearOpposite(com.badlogic.gdx.math.Vector2)
    public boolean isCollinearOpposite(com.badlogic.gdx.math.Vector2,float)
    public synthetic bridge boolean isCollinearOpposite(com.badlogic.gdx.math.Vector)
    public synthetic bridge boolean isCollinearOpposite(com.badlogic.gdx.math.Vector,float)
    public boolean isOnLine(com.badlogic.gdx.math.Vector2)
    public boolean isOnLine(com.badlogic.gdx.math.Vector2,float)
    public synthetic bridge boolean isOnLine(com.badlogic.gdx.math.Vector)
    public synthetic bridge boolean isOnLine(com.badlogic.gdx.math.Vector,float)
    public boolean isPerpendicular(com.badlogic.gdx.math.Vector2)
    public boolean isPerpendicular(com.badlogic.gdx.math.Vector2,float)
    public synthetic bridge boolean isPerpendicular(com.badlogic.gdx.math.Vector)
    public synthetic bridge boolean isPerpendicular(com.badlogic.gdx.math.Vector,float)
    public boolean isUnit()
    public boolean isUnit(float)
    public boolean isZero()
    public boolean isZero(float)
    public float len2()
    public static float len2(float,float)
    public com.badlogic.gdx.math.Vector2 lerp(com.badlogic.gdx.math.Vector2,float)
    public synthetic bridge com.badlogic.gdx.math.Vector lerp(com.badlogic.gdx.math.Vector,float)
    public com.badlogic.gdx.math.Vector2 limit(float)
    public synthetic bridge com.badlogic.gdx.math.Vector limit(float)
    public com.badlogic.gdx.math.Vector2 limit2(float)
    public synthetic bridge com.badlogic.gdx.math.Vector limit2(float)
    public com.badlogic.gdx.math.Vector2 mul(com.badlogic.gdx.math.Matrix3)
    public com.badlogic.gdx.math.Vector2 mulAdd(com.badlogic.gdx.math.Vector2,float)
    public com.badlogic.gdx.math.Vector2 mulAdd(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2)
    public synthetic bridge com.badlogic.gdx.math.Vector mulAdd(com.badlogic.gdx.math.Vector,float)
    public synthetic bridge com.badlogic.gdx.math.Vector mulAdd(com.badlogic.gdx.math.Vector,com.badlogic.gdx.math.Vector)
    public synthetic bridge com.badlogic.gdx.math.Vector nor()
    public com.badlogic.gdx.math.Vector2 rotate(float)
    public com.badlogic.gdx.math.Vector2 rotate90(int)
    public com.badlogic.gdx.math.Vector2 rotateAround(com.badlogic.gdx.math.Vector2,float)
    public com.badlogic.gdx.math.Vector2 rotateAroundDeg(com.badlogic.gdx.math.Vector2,float)
    public com.badlogic.gdx.math.Vector2 rotateAroundRad(com.badlogic.gdx.math.Vector2,float)
    public com.badlogic.gdx.math.Vector2 rotateDeg(float)
    public com.badlogic.gdx.math.Vector2 rotateRad(float)
    public com.badlogic.gdx.math.Vector2 scl(float,float)
    public com.badlogic.gdx.math.Vector2 scl(com.badlogic.gdx.math.Vector2)
    public synthetic bridge com.badlogic.gdx.math.Vector scl(float)
    public synthetic bridge com.badlogic.gdx.math.Vector scl(com.badlogic.gdx.math.Vector)
    public synthetic bridge com.badlogic.gdx.math.Vector set(com.badlogic.gdx.math.Vector)
    public com.badlogic.gdx.math.Vector2 setAngle(float)
    public com.badlogic.gdx.math.Vector2 setAngleDeg(float)
    public com.badlogic.gdx.math.Vector2 setAngleRad(float)
    public com.badlogic.gdx.math.Vector2 setLength(float)
    public synthetic bridge com.badlogic.gdx.math.Vector setLength(float)
    public com.badlogic.gdx.math.Vector2 setLength2(float)
    public synthetic bridge com.badlogic.gdx.math.Vector setLength2(float)
    public com.badlogic.gdx.math.Vector2 setToRandomDirection()
    public synthetic bridge com.badlogic.gdx.math.Vector setToRandomDirection()
    public com.badlogic.gdx.math.Vector2 setZero()
    public synthetic bridge com.badlogic.gdx.math.Vector setZero()
    public synthetic bridge com.badlogic.gdx.math.Vector sub(com.badlogic.gdx.math.Vector)
com.badlogic.gdx.math.Vector3:
    private static final long serialVersionUID
    public void <init>(com.badlogic.gdx.math.Vector2,float)
    public void <init>(com.badlogic.gdx.math.Vector3)
    public void <init>(float[])
    public com.badlogic.gdx.math.Vector3 add(float)
    public synthetic bridge com.badlogic.gdx.math.Vector add(com.badlogic.gdx.math.Vector)
    public com.badlogic.gdx.math.Vector3 clamp(float,float)
    public synthetic bridge com.badlogic.gdx.math.Vector clamp(float,float)
    public com.badlogic.gdx.math.Vector3 cpy()
    public synthetic bridge com.badlogic.gdx.math.Vector cpy()
    public float dot(float,float,float)
    public static float dot(float,float,float,float,float,float)
    public synthetic bridge float dot(com.badlogic.gdx.math.Vector)
    public float dst(float,float,float)
    public static float dst(float,float,float,float,float,float)
    public float dst(com.badlogic.gdx.math.Vector3)
    public synthetic bridge float dst(com.badlogic.gdx.math.Vector)
    public float dst2(float,float,float)
    public static float dst2(float,float,float,float,float,float)
    public float dst2(com.badlogic.gdx.math.Vector3)
    public synthetic bridge float dst2(com.badlogic.gdx.math.Vector)
    public boolean epsilonEquals(float,float,float)
    public boolean epsilonEquals(float,float,float,float)
    public boolean epsilonEquals(com.badlogic.gdx.math.Vector3)
    public boolean epsilonEquals(com.badlogic.gdx.math.Vector3,float)
    public synthetic bridge boolean epsilonEquals(com.badlogic.gdx.math.Vector,float)
    public com.badlogic.gdx.math.Vector3 fromString(java.lang.String)
    public boolean hasOppositeDirection(com.badlogic.gdx.math.Vector3)
    public synthetic bridge boolean hasOppositeDirection(com.badlogic.gdx.math.Vector)
    public boolean hasSameDirection(com.badlogic.gdx.math.Vector3)
    public synthetic bridge boolean hasSameDirection(com.badlogic.gdx.math.Vector)
    public boolean idt(com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.Vector3 interpolate(com.badlogic.gdx.math.Vector3,float,com.badlogic.gdx.math.Interpolation)
    public synthetic bridge com.badlogic.gdx.math.Vector interpolate(com.badlogic.gdx.math.Vector,float,com.badlogic.gdx.math.Interpolation)
    public boolean isCollinear(com.badlogic.gdx.math.Vector3)
    public boolean isCollinear(com.badlogic.gdx.math.Vector3,float)
    public synthetic bridge boolean isCollinear(com.badlogic.gdx.math.Vector)
    public synthetic bridge boolean isCollinear(com.badlogic.gdx.math.Vector,float)
    public boolean isCollinearOpposite(com.badlogic.gdx.math.Vector3)
    public boolean isCollinearOpposite(com.badlogic.gdx.math.Vector3,float)
    public synthetic bridge boolean isCollinearOpposite(com.badlogic.gdx.math.Vector)
    public synthetic bridge boolean isCollinearOpposite(com.badlogic.gdx.math.Vector,float)
    public boolean isOnLine(com.badlogic.gdx.math.Vector3)
    public boolean isOnLine(com.badlogic.gdx.math.Vector3,float)
    public synthetic bridge boolean isOnLine(com.badlogic.gdx.math.Vector)
    public synthetic bridge boolean isOnLine(com.badlogic.gdx.math.Vector,float)
    public boolean isPerpendicular(com.badlogic.gdx.math.Vector3)
    public boolean isPerpendicular(com.badlogic.gdx.math.Vector3,float)
    public synthetic bridge boolean isPerpendicular(com.badlogic.gdx.math.Vector)
    public synthetic bridge boolean isPerpendicular(com.badlogic.gdx.math.Vector,float)
    public boolean isUnit()
    public boolean isUnit(float)
    public boolean isZero()
    public boolean isZero(float)
    public float len()
    public static float len(float,float,float)
    public static float len2(float,float,float)
    public com.badlogic.gdx.math.Vector3 lerp(com.badlogic.gdx.math.Vector3,float)
    public synthetic bridge com.badlogic.gdx.math.Vector lerp(com.badlogic.gdx.math.Vector,float)
    public com.badlogic.gdx.math.Vector3 limit(float)
    public synthetic bridge com.badlogic.gdx.math.Vector limit(float)
    public com.badlogic.gdx.math.Vector3 limit2(float)
    public synthetic bridge com.badlogic.gdx.math.Vector limit2(float)
    public com.badlogic.gdx.math.Vector3 mul(com.badlogic.gdx.math.Matrix3)
    public com.badlogic.gdx.math.Vector3 mul(com.badlogic.gdx.math.Quaternion)
    public com.badlogic.gdx.math.Vector3 mul4x3(float[])
    public com.badlogic.gdx.math.Vector3 mulAdd(com.badlogic.gdx.math.Vector3,float)
    public com.badlogic.gdx.math.Vector3 mulAdd(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
    public synthetic bridge com.badlogic.gdx.math.Vector mulAdd(com.badlogic.gdx.math.Vector,float)
    public synthetic bridge com.badlogic.gdx.math.Vector mulAdd(com.badlogic.gdx.math.Vector,com.badlogic.gdx.math.Vector)
    public synthetic bridge com.badlogic.gdx.math.Vector nor()
    public com.badlogic.gdx.math.Vector3 rot(com.badlogic.gdx.math.Matrix4)
    public com.badlogic.gdx.math.Vector3 rotate(float,float,float,float)
    public com.badlogic.gdx.math.Vector3 rotate(com.badlogic.gdx.math.Vector3,float)
    public com.badlogic.gdx.math.Vector3 rotateRad(float,float,float,float)
    public com.badlogic.gdx.math.Vector3 rotateRad(com.badlogic.gdx.math.Vector3,float)
    public com.badlogic.gdx.math.Vector3 scl(float,float,float)
    public com.badlogic.gdx.math.Vector3 scl(com.badlogic.gdx.math.Vector3)
    public synthetic bridge com.badlogic.gdx.math.Vector scl(float)
    public synthetic bridge com.badlogic.gdx.math.Vector scl(com.badlogic.gdx.math.Vector)
    public com.badlogic.gdx.math.Vector3 set(com.badlogic.gdx.math.Vector2,float)
    public com.badlogic.gdx.math.Vector3 set(float[])
    public synthetic bridge com.badlogic.gdx.math.Vector set(com.badlogic.gdx.math.Vector)
    public com.badlogic.gdx.math.Vector3 setFromSpherical(float,float)
    public com.badlogic.gdx.math.Vector3 setLength(float)
    public synthetic bridge com.badlogic.gdx.math.Vector setLength(float)
    public com.badlogic.gdx.math.Vector3 setLength2(float)
    public synthetic bridge com.badlogic.gdx.math.Vector setLength2(float)
    public com.badlogic.gdx.math.Vector3 setToRandomDirection()
    public synthetic bridge com.badlogic.gdx.math.Vector setToRandomDirection()
    public com.badlogic.gdx.math.Vector3 setZero()
    public synthetic bridge com.badlogic.gdx.math.Vector setZero()
    public com.badlogic.gdx.math.Vector3 slerp(com.badlogic.gdx.math.Vector3,float)
    public com.badlogic.gdx.math.Vector3 sub(float)
    public synthetic bridge com.badlogic.gdx.math.Vector sub(com.badlogic.gdx.math.Vector)
    public com.badlogic.gdx.math.Vector3 traMul(com.badlogic.gdx.math.Matrix3)
    public com.badlogic.gdx.math.Vector3 traMul(com.badlogic.gdx.math.Matrix4)
    public com.badlogic.gdx.math.Vector3 unrotate(com.badlogic.gdx.math.Matrix4)
    public com.badlogic.gdx.math.Vector3 untransform(com.badlogic.gdx.math.Matrix4)
com.badlogic.gdx.math.Vector4
com.badlogic.gdx.math.Vector
com.badlogic.gdx.math.WindowedMean
com.badlogic.gdx.math.collision.BoundingBox
com.badlogic.gdx.math.collision.OrientedBoundingBox
com.badlogic.gdx.math.collision.Ray:
    private static final long serialVersionUID
    public com.badlogic.gdx.math.collision.Ray cpy()
    public com.badlogic.gdx.math.Vector3 getEndPoint(com.badlogic.gdx.math.Vector3,float)
    public com.badlogic.gdx.math.collision.Ray mul(com.badlogic.gdx.math.Matrix4)
    public com.badlogic.gdx.math.collision.Ray set(float,float,float,float,float,float)
    public com.badlogic.gdx.math.collision.Ray set(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.collision.Ray set(com.badlogic.gdx.math.collision.Ray)
com.badlogic.gdx.math.collision.Segment
com.badlogic.gdx.math.collision.Sphere
com.badlogic.gdx.net.HttpParametersUtils
com.badlogic.gdx.net.HttpRequestBuilder
com.badlogic.gdx.net.HttpRequestHeader
com.badlogic.gdx.net.HttpResponseHeader
com.badlogic.gdx.net.HttpStatus
com.badlogic.gdx.net.NetJavaImpl$2
com.badlogic.gdx.net.NetJavaImpl$HttpClientResponse
com.badlogic.gdx.net.NetJavaImpl:
    public void <init>()
    public void cancelHttpRequest(com.badlogic.gdx.Net$HttpRequest)
    private void cancelTask(com.badlogic.gdx.Net$HttpRequest)
    synchronized com.badlogic.gdx.Net$HttpResponseListener getFromListeners(com.badlogic.gdx.Net$HttpRequest)
    synchronized void putIntoConnectionsAndListeners(com.badlogic.gdx.Net$HttpRequest,com.badlogic.gdx.Net$HttpResponseListener,java.net.HttpURLConnection)
    synchronized void removeFromConnectionsAndListeners(com.badlogic.gdx.Net$HttpRequest)
    public void sendHttpRequest(com.badlogic.gdx.Net$HttpRequest,com.badlogic.gdx.Net$HttpResponseListener)
com.badlogic.gdx.net.NetJavaServerSocketImpl
com.badlogic.gdx.net.NetJavaSocketImpl
com.badlogic.gdx.net.ServerSocket
com.badlogic.gdx.net.ServerSocketHints
com.badlogic.gdx.net.Socket
com.badlogic.gdx.net.SocketHints
com.badlogic.gdx.physics.box2d.Body
com.badlogic.gdx.physics.box2d.BodyDef$BodyType
com.badlogic.gdx.physics.box2d.BodyDef
com.badlogic.gdx.physics.box2d.Box2D
com.badlogic.gdx.physics.box2d.Box2DDebugRenderer
com.badlogic.gdx.physics.box2d.ChainShape
com.badlogic.gdx.physics.box2d.CircleShape
com.badlogic.gdx.physics.box2d.Contact
com.badlogic.gdx.physics.box2d.ContactFilter
com.badlogic.gdx.physics.box2d.ContactImpulse
com.badlogic.gdx.physics.box2d.ContactListener
com.badlogic.gdx.physics.box2d.DestructionListener
com.badlogic.gdx.physics.box2d.EdgeShape
com.badlogic.gdx.physics.box2d.Filter
com.badlogic.gdx.physics.box2d.Fixture
com.badlogic.gdx.physics.box2d.FixtureDef
com.badlogic.gdx.physics.box2d.Joint
com.badlogic.gdx.physics.box2d.JointDef$JointType
com.badlogic.gdx.physics.box2d.JointDef
com.badlogic.gdx.physics.box2d.JointEdge
com.badlogic.gdx.physics.box2d.Manifold$ManifoldPoint
com.badlogic.gdx.physics.box2d.Manifold$ManifoldType
com.badlogic.gdx.physics.box2d.Manifold
com.badlogic.gdx.physics.box2d.MassData
com.badlogic.gdx.physics.box2d.PolygonShape
com.badlogic.gdx.physics.box2d.QueryCallback
com.badlogic.gdx.physics.box2d.RayCastCallback
com.badlogic.gdx.physics.box2d.Shape$Type
com.badlogic.gdx.physics.box2d.Shape
com.badlogic.gdx.physics.box2d.Transform
com.badlogic.gdx.physics.box2d.World$1
com.badlogic.gdx.physics.box2d.World$2
com.badlogic.gdx.physics.box2d.World
com.badlogic.gdx.physics.box2d.WorldManifold
com.badlogic.gdx.physics.box2d.graphics.ParticleEmitterBox2D$1
com.badlogic.gdx.physics.box2d.graphics.ParticleEmitterBox2D$ParticleBox2D
com.badlogic.gdx.physics.box2d.graphics.ParticleEmitterBox2D
com.badlogic.gdx.physics.box2d.joints.DistanceJoint
com.badlogic.gdx.physics.box2d.joints.DistanceJointDef
com.badlogic.gdx.physics.box2d.joints.FrictionJoint
com.badlogic.gdx.physics.box2d.joints.FrictionJointDef
com.badlogic.gdx.physics.box2d.joints.GearJoint
com.badlogic.gdx.physics.box2d.joints.GearJointDef
com.badlogic.gdx.physics.box2d.joints.MotorJoint
com.badlogic.gdx.physics.box2d.joints.MotorJointDef
com.badlogic.gdx.physics.box2d.joints.MouseJoint
com.badlogic.gdx.physics.box2d.joints.MouseJointDef
com.badlogic.gdx.physics.box2d.joints.PrismaticJoint
com.badlogic.gdx.physics.box2d.joints.PrismaticJointDef
com.badlogic.gdx.physics.box2d.joints.PulleyJoint
com.badlogic.gdx.physics.box2d.joints.PulleyJointDef
com.badlogic.gdx.physics.box2d.joints.RevoluteJoint
com.badlogic.gdx.physics.box2d.joints.RevoluteJointDef
com.badlogic.gdx.physics.box2d.joints.RopeJoint
com.badlogic.gdx.physics.box2d.joints.RopeJointDef
com.badlogic.gdx.physics.box2d.joints.WeldJoint
com.badlogic.gdx.physics.box2d.joints.WeldJointDef
com.badlogic.gdx.physics.box2d.joints.WheelJoint
com.badlogic.gdx.physics.box2d.joints.WheelJointDef
com.badlogic.gdx.scenes.scene2d.ui.Skin$1:
    private static final java.lang.String parentFieldName
com.badlogic.gdx.scenes.scene2d.ui.Window$3:
    public boolean scrolled(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int)
com.badlogic.gdx.utils.Align:
    public static final int bottom
    public static final int bottomLeft
    public static final int bottomRight
    public static final int center
    public static final int left
    public static final int right
    public static final int top
    public static final int topLeft
    public static final int topRight
    public void <init>()
    public static java.lang.String toString(int)
com.badlogic.gdx.utils.Array$ArrayIterator:
    public void <init>(com.badlogic.gdx.utils.Array)
    public void reset()
com.badlogic.gdx.utils.Array:
    private com.badlogic.gdx.utils.Predicate$PredicateIterable predicateIterable
    public void add(java.lang.Object,java.lang.Object)
    public void add(java.lang.Object,java.lang.Object,java.lang.Object)
    public void add(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)
    public boolean containsAll(com.badlogic.gdx.utils.Array,boolean)
    public boolean containsAny(com.badlogic.gdx.utils.Array,boolean)
    public boolean equalsIdentity(java.lang.Object)
    public void insertRange(int,int)
    public int lastIndexOf(java.lang.Object,boolean)
    public boolean notEmpty()
    public static com.badlogic.gdx.utils.Array of(java.lang.Class)
    public static com.badlogic.gdx.utils.Array of(boolean,int,java.lang.Class)
    public boolean removeAll(com.badlogic.gdx.utils.Array,boolean)
    public java.lang.Iterable select(com.badlogic.gdx.utils.Predicate)
    public java.lang.Object selectRanked(java.util.Comparator,int)
    public int selectRankedIndex(java.util.Comparator,int)
    public java.lang.Object[] setSize(int)
    public java.lang.Object[] shrink()
    public void shuffle()
    public java.lang.Object[] toArray()
com.badlogic.gdx.utils.ArrayMap$Entries:
    public void reset()
com.badlogic.gdx.utils.ArrayMap$Keys
com.badlogic.gdx.utils.ArrayMap$Values
com.badlogic.gdx.utils.ArrayMap:
    private transient com.badlogic.gdx.utils.ArrayMap$Keys keys1
    private transient com.badlogic.gdx.utils.ArrayMap$Keys keys2
    private transient com.badlogic.gdx.utils.ArrayMap$Values values1
    private transient com.badlogic.gdx.utils.ArrayMap$Values values2
    public void <init>(int)
    public void <init>(com.badlogic.gdx.utils.ArrayMap)
    public void <init>(java.lang.Class,java.lang.Class)
    public void <init>(boolean,int,java.lang.Class,java.lang.Class)
    public void clear()
    public void clear(int)
    public boolean containsKey(java.lang.Object)
    public boolean containsValue(java.lang.Object,boolean)
    public void ensureCapacity(int)
    public boolean equalsIdentity(java.lang.Object)
    public java.lang.Object firstKey()
    public java.lang.Object firstValue()
    public java.lang.Object getKey(java.lang.Object,boolean)
    public java.lang.Object getKeyAt(int)
    public java.lang.Object getValueAt(int)
    public int indexOfValue(java.lang.Object,boolean)
    public void insert(int,java.lang.Object,java.lang.Object)
    public boolean isEmpty()
    public com.badlogic.gdx.utils.ArrayMap$Keys keys()
    public boolean notEmpty()
    public java.lang.Object peekKey()
    public java.lang.Object peekValue()
    public int put(java.lang.Object,java.lang.Object,int)
    public void putAll(com.badlogic.gdx.utils.ArrayMap)
    public void putAll(com.badlogic.gdx.utils.ArrayMap,int,int)
    public java.lang.Object removeKey(java.lang.Object)
    public boolean removeValue(java.lang.Object,boolean)
    public void reverse()
    public void setKey(int,java.lang.Object)
    public void setValue(int,java.lang.Object)
    public void shrink()
    public void shuffle()
    public void truncate(int)
    public com.badlogic.gdx.utils.ArrayMap$Values values()
com.badlogic.gdx.utils.AtomicQueue
com.badlogic.gdx.utils.Base64Coder$CharMap
com.badlogic.gdx.utils.Base64Coder
com.badlogic.gdx.utils.BaseJsonReader
com.badlogic.gdx.utils.BinaryHeap$Node
com.badlogic.gdx.utils.BinaryHeap
com.badlogic.gdx.utils.Bits
com.badlogic.gdx.utils.BooleanArray
com.badlogic.gdx.utils.BufferUtils:
    private void <init>()
    private static int bytesToElements(java.nio.Buffer,int)
    public static native void clear(java.nio.ByteBuffer,int)
    public static void copy(java.nio.Buffer,java.nio.Buffer,int)
    public static void copy(byte[],int,java.nio.Buffer,int)
    public static void copy(char[],int,int,java.nio.Buffer)
    public static void copy(char[],int,java.nio.Buffer,int)
    public static void copy(double[],int,int,java.nio.Buffer)
    public static void copy(double[],int,java.nio.Buffer,int)
    public static void copy(float[],int,int,java.nio.Buffer)
    public static void copy(float[],int,java.nio.Buffer,int)
    public static void copy(int[],int,int,java.nio.Buffer)
    public static void copy(int[],int,java.nio.Buffer,int)
    public static void copy(long[],int,int,java.nio.Buffer)
    public static void copy(long[],int,java.nio.Buffer,int)
    public static void copy(short[],int,java.nio.Buffer,int)
    private static native void copyJni(java.nio.Buffer,int,java.nio.Buffer,int,int)
    private static native void copyJni(byte[],int,java.nio.Buffer,int,int)
    private static native void copyJni(char[],int,java.nio.Buffer,int,int)
    private static native void copyJni(double[],int,java.nio.Buffer,int,int)
    private static native void copyJni(float[],int,java.nio.Buffer,int,int)
    private static native void copyJni(int[],int,java.nio.Buffer,int,int)
    private static native void copyJni(long[],int,java.nio.Buffer,int,int)
    private static native void copyJni(short[],int,java.nio.Buffer,int,int)
    private static int elementsToBytes(java.nio.Buffer,int)
    private static native long find(java.nio.Buffer,int,int,java.nio.Buffer,int,int)
    private static native long find(java.nio.Buffer,int,int,java.nio.Buffer,int,int,float)
    private static native long find(java.nio.Buffer,int,int,float[],int,int)
    private static native long find(java.nio.Buffer,int,int,float[],int,int,float)
    private static native long find(float[],int,int,java.nio.Buffer,int,int)
    private static native long find(float[],int,int,java.nio.Buffer,int,int,float)
    private static native long find(float[],int,int,float[],int,int)
    private static native long find(float[],int,int,float[],int,int,float)
    public static long findFloats(java.nio.Buffer,int,java.nio.Buffer,int)
    public static long findFloats(java.nio.Buffer,int,java.nio.Buffer,int,float)
    public static long findFloats(java.nio.Buffer,int,float[],int)
    public static long findFloats(java.nio.Buffer,int,float[],int,float)
    public static long findFloats(float[],int,java.nio.Buffer,int)
    public static long findFloats(float[],int,java.nio.Buffer,int,float)
    public static long findFloats(float[],int,float[],int)
    public static long findFloats(float[],int,float[],int,float)
    public static int getAllocatedBytesUnsafe()
    private static native long getBufferAddress(java.nio.Buffer)
    public static long getUnsafeBufferAddress(java.nio.Buffer)
    public static boolean isUnsafeByteBuffer(java.nio.ByteBuffer)
    public static java.nio.CharBuffer newCharBuffer(int)
    public static java.nio.DoubleBuffer newDoubleBuffer(int)
    public static java.nio.LongBuffer newLongBuffer(int)
    public static java.nio.ShortBuffer newShortBuffer(int)
    public static java.nio.ByteBuffer newUnsafeByteBuffer(java.nio.ByteBuffer)
    private static int positionInBytes(java.nio.Buffer)
    public static void transform(java.nio.Buffer,int,int,int,com.badlogic.gdx.math.Matrix3)
    public static void transform(java.nio.Buffer,int,int,int,com.badlogic.gdx.math.Matrix3,int)
    public static void transform(java.nio.Buffer,int,int,int,com.badlogic.gdx.math.Matrix4)
    public static void transform(java.nio.Buffer,int,int,int,com.badlogic.gdx.math.Matrix4,int)
    public static void transform(float[],int,int,int,com.badlogic.gdx.math.Matrix3)
    public static void transform(float[],int,int,int,com.badlogic.gdx.math.Matrix3,int)
    public static void transform(float[],int,int,int,com.badlogic.gdx.math.Matrix4)
    public static void transform(float[],int,int,int,com.badlogic.gdx.math.Matrix4,int)
    private static native void transformV2M3Jni(java.nio.Buffer,int,int,float[],int)
    private static native void transformV2M3Jni(float[],int,int,float[],int)
    private static native void transformV2M4Jni(java.nio.Buffer,int,int,float[],int)
    private static native void transformV2M4Jni(float[],int,int,float[],int)
    private static native void transformV3M3Jni(java.nio.Buffer,int,int,float[],int)
    private static native void transformV3M3Jni(float[],int,int,float[],int)
    private static native void transformV3M4Jni(java.nio.Buffer,int,int,float[],int)
    private static native void transformV3M4Jni(float[],int,int,float[],int)
    private static native void transformV4M4Jni(java.nio.Buffer,int,int,float[],int)
    private static native void transformV4M4Jni(float[],int,int,float[],int)
com.badlogic.gdx.utils.ByteArray
com.badlogic.gdx.utils.CharArray
com.badlogic.gdx.utils.Clipboard:
    public abstract boolean hasContents()
com.badlogic.gdx.utils.Collections:
    public void <init>()
com.badlogic.gdx.utils.ComparableTimSort:
    private static final boolean DEBUG
    private static final int INITIAL_TMP_STORAGE_LENGTH
    private static final int MIN_GALLOP
    private static final int MIN_MERGE
    private void <init>(java.lang.Object[])
    static void sort(java.lang.Object[])
    static void sort(java.lang.Object[],int,int)
com.badlogic.gdx.utils.DataBuffer
com.badlogic.gdx.utils.DataInput
com.badlogic.gdx.utils.DataOutput
com.badlogic.gdx.utils.DelayedRemovalArray:
    public void <init>()
    public void <init>(com.badlogic.gdx.utils.Array)
    public void <init>(java.lang.Class)
    public void <init>(boolean,int)
    public void <init>(boolean,int,java.lang.Class)
    public void <init>(boolean,java.lang.Object[],int,int)
    public void <init>(java.lang.Object[])
    public void insertRange(int,int)
    public java.lang.Object[] setSize(int)
    public void shuffle()
    public void swap(int,int)
    public static varargs com.badlogic.gdx.utils.DelayedRemovalArray with(java.lang.Object[])
com.badlogic.gdx.utils.FloatArray:
    public void <init>(int)
    public void <init>(com.badlogic.gdx.utils.FloatArray)
    public void <init>(boolean,float[],int,int)
    public void <init>(float[])
    public void add(float,float)
    public void add(float,float,float)
    public void add(float,float,float,float)
    public varargs void addAll(float[])
    public boolean contains(float)
    public boolean equals(java.lang.Object,float)
    public void incr(float)
    public void incr(int,float)
    public int indexOf(float)
    public void insert(int,float)
    public void insertRange(int,int)
    public boolean isEmpty()
    public int lastIndexOf(float)
    public void mul(float)
    public void mul(int,float)
    public float peek()
    public float pop()
    public float random()
    public boolean removeAll(com.badlogic.gdx.utils.FloatArray)
    public float removeIndex(int)
    public boolean removeValue(float)
    public void reverse()
    public void set(int,float)
    public float[] setSize(int)
    public float[] shrink()
    public void shuffle()
    public void sort()
    public void swap(int,int)
    public float[] toArray()
    public java.lang.String toString(java.lang.String)
    public static varargs com.badlogic.gdx.utils.FloatArray with(float[])
com.badlogic.gdx.utils.FlushablePool
com.badlogic.gdx.utils.GdxNativesLoader:
    public void <init>()
com.badlogic.gdx.utils.GdxRuntimeException:
    private static final long serialVersionUID
    public void <init>(java.lang.Throwable)
com.badlogic.gdx.utils.I18NBundle
com.badlogic.gdx.utils.IdentityMap
com.badlogic.gdx.utils.IntArray:
    public void <init>(com.badlogic.gdx.utils.IntArray)
    public void <init>(boolean,int[],int,int)
    public void <init>(int[])
    public void add(int,int,int)
    public void add(int,int,int,int)
    public void addAll(com.badlogic.gdx.utils.IntArray)
    public void addAll(com.badlogic.gdx.utils.IntArray,int,int)
    public varargs void addAll(int[])
    public void addAll(int[],int,int)
    public boolean contains(int)
    public int first()
    public void incr(int)
    public void incr(int,int)
    public int indexOf(int)
    public void insertRange(int,int)
    public boolean isEmpty()
    public int lastIndexOf(int)
    public void mul(int)
    public void mul(int,int)
    public boolean notEmpty()
    public int random()
    public boolean removeAll(com.badlogic.gdx.utils.IntArray)
    public int removeIndex(int)
    public void removeRange(int,int)
    public boolean removeValue(int)
    public void reverse()
    public int[] setSize(int)
    public int[] shrink()
    public void shuffle()
    public void sort()
    public void swap(int,int)
    public int[] toArray()
    public java.lang.String toString(java.lang.String)
    public void truncate(int)
    public static varargs com.badlogic.gdx.utils.IntArray with(int[])
com.badlogic.gdx.utils.IntFloatMap$Entries
com.badlogic.gdx.utils.IntFloatMap$Entry
com.badlogic.gdx.utils.IntFloatMap$Keys
com.badlogic.gdx.utils.IntFloatMap$MapIterator
com.badlogic.gdx.utils.IntFloatMap$Values
com.badlogic.gdx.utils.IntFloatMap
com.badlogic.gdx.utils.IntIntMap$Keys
com.badlogic.gdx.utils.IntIntMap$MapIterator:
    private static final int INDEX_ILLEGAL
    static final int INDEX_ZERO
com.badlogic.gdx.utils.IntIntMap$Values
com.badlogic.gdx.utils.IntIntMap:
    private transient com.badlogic.gdx.utils.IntIntMap$Keys keys1
    private transient com.badlogic.gdx.utils.IntIntMap$Keys keys2
    private transient com.badlogic.gdx.utils.IntIntMap$Values values1
    private transient com.badlogic.gdx.utils.IntIntMap$Values values2
    public void <init>(int)
    public void <init>(com.badlogic.gdx.utils.IntIntMap)
    public void clear()
    public void clear(int)
    public boolean containsValue(int)
    public void ensureCapacity(int)
    public int findKey(int,int)
    public int getAndIncrement(int,int,int)
    public boolean isEmpty()
    public com.badlogic.gdx.utils.IntIntMap$Keys keys()
    public boolean notEmpty()
    public int put(int,int,int)
    public void putAll(com.badlogic.gdx.utils.IntIntMap)
    public void shrink(int)
    public com.badlogic.gdx.utils.IntIntMap$Values values()
com.badlogic.gdx.utils.IntMap$Keys
com.badlogic.gdx.utils.IntMap$MapIterator:
    private static final int INDEX_ILLEGAL
    static final int INDEX_ZERO
com.badlogic.gdx.utils.IntMap$Values
com.badlogic.gdx.utils.IntMap:
    private transient com.badlogic.gdx.utils.IntMap$Keys keys1
    private transient com.badlogic.gdx.utils.IntMap$Keys keys2
    private transient com.badlogic.gdx.utils.IntMap$Values values1
    private transient com.badlogic.gdx.utils.IntMap$Values values2
    public void <init>(int)
    public void <init>(com.badlogic.gdx.utils.IntMap)
    public void clear()
    public void clear(int)
    public boolean containsKey(int)
    public boolean containsValue(java.lang.Object,boolean)
    public boolean equalsIdentity(java.lang.Object)
    public int findKey(java.lang.Object,boolean,int)
    public boolean isEmpty()
    public com.badlogic.gdx.utils.IntMap$Keys keys()
    public boolean notEmpty()
    public void shrink(int)
    public com.badlogic.gdx.utils.IntMap$Values values()
com.badlogic.gdx.utils.IntSet$IntSetIterator
com.badlogic.gdx.utils.IntSet:
    private transient com.badlogic.gdx.utils.IntSet$IntSetIterator iterator1
    private transient com.badlogic.gdx.utils.IntSet$IntSetIterator iterator2
    public void <init>(int)
    public void <init>(com.badlogic.gdx.utils.IntSet)
    public void addAll(com.badlogic.gdx.utils.IntArray)
    public void addAll(com.badlogic.gdx.utils.IntArray,int,int)
    public void addAll(com.badlogic.gdx.utils.IntSet)
    public varargs void addAll(int[])
    public void addAll(int[],int,int)
    public void clear()
    public void clear(int)
    public void ensureCapacity(int)
    public int first()
    public boolean isEmpty()
    public com.badlogic.gdx.utils.IntSet$IntSetIterator iterator()
    public boolean notEmpty()
    public void shrink(int)
    public static varargs com.badlogic.gdx.utils.IntSet with(int[])
com.badlogic.gdx.utils.Json$ReadOnlySerializer:
    public abstract java.lang.Object read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue,java.lang.Class)
    public void write(com.badlogic.gdx.utils.Json,java.lang.Object,java.lang.Class)
com.badlogic.gdx.utils.Json$Serializable:
    public abstract void write(com.badlogic.gdx.utils.Json)
com.badlogic.gdx.utils.Json$Serializer:
    public abstract void write(com.badlogic.gdx.utils.Json,java.lang.Object,java.lang.Class)
com.badlogic.gdx.utils.Json:
    private static final boolean debug
    private boolean quoteLongValues
    private com.badlogic.gdx.utils.JsonWriter writer
    public void <init>(com.badlogic.gdx.utils.JsonWriter$OutputType)
    private java.lang.String convertToString(java.lang.Object)
    public java.lang.Object fromJson(java.lang.Class,java.io.InputStream)
    public java.lang.Object fromJson(java.lang.Class,java.io.Reader)
    public java.lang.Object fromJson(java.lang.Class,java.lang.Class,com.badlogic.gdx.files.FileHandle)
    public java.lang.Object fromJson(java.lang.Class,java.lang.Class,java.io.InputStream)
    public java.lang.Object fromJson(java.lang.Class,java.lang.Class,java.io.Reader)
    public java.lang.Object fromJson(java.lang.Class,java.lang.Class,java.lang.String)
    public java.lang.Object fromJson(java.lang.Class,java.lang.Class,char[],int,int)
    public java.lang.Object fromJson(java.lang.Class,java.lang.String)
    public java.lang.Object fromJson(java.lang.Class,char[],int,int)
    private java.lang.Object[] getDefaultValues(java.lang.Class)
    public boolean getIgnoreUnknownFields()
    public com.badlogic.gdx.utils.Json$Serializer getSerializer(java.lang.Class)
    public java.lang.String getTag(java.lang.Class)
    public com.badlogic.gdx.utils.JsonWriter getWriter()
    public java.lang.String prettyPrint(java.lang.Object)
    public java.lang.String prettyPrint(java.lang.Object,int)
    public java.lang.String prettyPrint(java.lang.Object,com.badlogic.gdx.utils.JsonValue$PrettyPrintSettings)
    public java.lang.String prettyPrint(java.lang.String)
    public java.lang.String prettyPrint(java.lang.String,int)
    public java.lang.String prettyPrint(java.lang.String,com.badlogic.gdx.utils.JsonValue$PrettyPrintSettings)
    public void readField(java.lang.Object,com.badlogic.gdx.utils.reflect.Field,java.lang.String,java.lang.Class,com.badlogic.gdx.utils.JsonValue)
    public void readField(java.lang.Object,java.lang.String,com.badlogic.gdx.utils.JsonValue)
    public void readField(java.lang.Object,java.lang.String,java.lang.Class,com.badlogic.gdx.utils.JsonValue)
    public void readField(java.lang.Object,java.lang.String,java.lang.String,com.badlogic.gdx.utils.JsonValue)
    public void readField(java.lang.Object,java.lang.String,java.lang.String,java.lang.Class,com.badlogic.gdx.utils.JsonValue)
    public java.lang.Object readValue(java.lang.Class,java.lang.Class,java.lang.Object,com.badlogic.gdx.utils.JsonValue)
    public java.lang.Object readValue(java.lang.String,java.lang.Class,java.lang.Class,com.badlogic.gdx.utils.JsonValue)
    public java.lang.Object readValue(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object,com.badlogic.gdx.utils.JsonValue)
    public void setDefaultSerializer(com.badlogic.gdx.utils.Json$Serializer)
    public void setDeprecated(java.lang.Class,java.lang.String,boolean)
    public void setElementType(java.lang.Class,java.lang.String,java.lang.Class)
    public void setEnumNames(boolean)
    public void setIgnoreDeprecated(boolean)
    public void setIgnoreUnknownFields(boolean)
    public void setOutputType(com.badlogic.gdx.utils.JsonWriter$OutputType)
    public void setQuoteLongValues(boolean)
    public void setReadDeprecated(boolean)
    public void setSortFields(boolean)
    public void setWriter(java.io.Writer)
    public java.lang.String toJson(java.lang.Object)
    public java.lang.String toJson(java.lang.Object,java.lang.Class)
    public java.lang.String toJson(java.lang.Object,java.lang.Class,java.lang.Class)
    public void toJson(java.lang.Object,com.badlogic.gdx.files.FileHandle)
    public void toJson(java.lang.Object,java.io.Writer)
    public void toJson(java.lang.Object,java.lang.Class,com.badlogic.gdx.files.FileHandle)
    public void toJson(java.lang.Object,java.lang.Class,java.io.Writer)
    public void toJson(java.lang.Object,java.lang.Class,java.lang.Class,com.badlogic.gdx.files.FileHandle)
    public void toJson(java.lang.Object,java.lang.Class,java.lang.Class,java.io.Writer)
    public void writeArrayEnd()
    public void writeArrayStart()
    public void writeArrayStart(java.lang.String)
    public void writeField(java.lang.Object,java.lang.String)
    public void writeField(java.lang.Object,java.lang.String,java.lang.Class)
    public void writeField(java.lang.Object,java.lang.String,java.lang.String)
    public void writeField(java.lang.Object,java.lang.String,java.lang.String,java.lang.Class)
    public void writeFields(java.lang.Object)
    public void writeObjectEnd()
    public void writeObjectStart()
    public void writeObjectStart(java.lang.Class,java.lang.Class)
    public void writeObjectStart(java.lang.String)
    public void writeObjectStart(java.lang.String,java.lang.Class,java.lang.Class)
    public void writeType(java.lang.Class)
    public void writeValue(java.lang.Object)
    public void writeValue(java.lang.Object,java.lang.Class)
    public void writeValue(java.lang.Object,java.lang.Class,java.lang.Class)
    public void writeValue(java.lang.String,java.lang.Object)
    public void writeValue(java.lang.String,java.lang.Object,java.lang.Class)
    public void writeValue(java.lang.String,java.lang.Object,java.lang.Class,java.lang.Class)
com.badlogic.gdx.utils.JsonReader:
    static final int json_en_array
    static final int json_en_main
    static final int json_en_object
    static final int json_error
    static final int json_first_final
    static final int json_start
    public boolean isStopped()
    public com.badlogic.gdx.utils.JsonValue parse(java.io.InputStream)
    public com.badlogic.gdx.utils.JsonValue parse(java.lang.String)
    public void stop()
com.badlogic.gdx.utils.JsonValue:
    public void <init>(double)
    public void <init>(long)
    public void addChild(com.badlogic.gdx.utils.JsonValue)
    public void addChild(java.lang.String,com.badlogic.gdx.utils.JsonValue)
    public boolean[] asBooleanArray()
    public byte[] asByteArray()
    public char asChar()
    public char[] asCharArray()
    public double[] asDoubleArray()
    public float[] asFloatArray()
    public int[] asIntArray()
    public long[] asLongArray()
    public short[] asShortArray()
    public java.lang.String[] asStringArray()
    public com.badlogic.gdx.utils.JsonValue child()
    public com.badlogic.gdx.utils.JsonValue get(int)
    public boolean getBoolean(int)
    public boolean getBoolean(java.lang.String)
    public boolean getBoolean(java.lang.String,boolean)
    public byte getByte(int)
    public byte getByte(java.lang.String)
    public byte getByte(java.lang.String,byte)
    public char getChar(int)
    public char getChar(java.lang.String)
    public char getChar(java.lang.String,char)
    public double getDouble(int)
    public double getDouble(java.lang.String)
    public double getDouble(java.lang.String,double)
    public float getFloat(int)
    public float getFloat(java.lang.String)
    public float getFloat(java.lang.String,float)
    public int getInt(int)
    public int getInt(java.lang.String)
    public int getInt(java.lang.String,int)
    public long getLong(int)
    public long getLong(java.lang.String)
    public long getLong(java.lang.String,long)
    public short getShort(int)
    public short getShort(java.lang.String)
    public short getShort(java.lang.String,short)
    public java.lang.String getString(int)
    public java.lang.String getString(java.lang.String)
    public boolean hasChild(java.lang.String)
    private static void indent(int,java.io.Writer)
    public boolean isEmpty()
    public com.badlogic.gdx.utils.JsonValue$JsonIterator iterator(java.lang.String)
    private void json(com.badlogic.gdx.utils.JsonValue,com.badlogic.gdx.utils.StringBuilder,com.badlogic.gdx.utils.JsonWriter$OutputType)
    public com.badlogic.gdx.utils.JsonValue next()
    public boolean notEmpty()
    public com.badlogic.gdx.utils.JsonValue parent()
    private void prettyPrint(com.badlogic.gdx.utils.JsonValue,java.io.Writer,int,com.badlogic.gdx.utils.JsonValue$PrettyPrintSettings)
    public void prettyPrint(com.badlogic.gdx.utils.JsonWriter$OutputType,java.io.Writer)
    public com.badlogic.gdx.utils.JsonValue prev()
    public com.badlogic.gdx.utils.JsonValue remove(int)
    public com.badlogic.gdx.utils.JsonValue remove(java.lang.String)
    public void remove()
    public com.badlogic.gdx.utils.JsonValue require(int)
    public com.badlogic.gdx.utils.JsonValue require(java.lang.String)
    public void setNext(com.badlogic.gdx.utils.JsonValue)
    public void setPrev(com.badlogic.gdx.utils.JsonValue)
    public void setType(com.badlogic.gdx.utils.JsonValue$ValueType)
    public int size()
    public java.lang.String toJson(com.badlogic.gdx.utils.JsonWriter$OutputType)
    public com.badlogic.gdx.utils.JsonValue$ValueType type()
com.badlogic.gdx.utils.JsonWriter$JsonObject
com.badlogic.gdx.utils.JsonWriter
com.badlogic.gdx.utils.LittleEndianInputStream
com.badlogic.gdx.utils.Logger
com.badlogic.gdx.utils.LongArray
com.badlogic.gdx.utils.LongMap$Keys
com.badlogic.gdx.utils.LongMap$MapIterator:
    private static final int INDEX_ILLEGAL
    static final int INDEX_ZERO
com.badlogic.gdx.utils.LongMap$Values
com.badlogic.gdx.utils.LongMap:
    private transient com.badlogic.gdx.utils.LongMap$Keys keys1
    private transient com.badlogic.gdx.utils.LongMap$Keys keys2
    private transient com.badlogic.gdx.utils.LongMap$Values values1
    private transient com.badlogic.gdx.utils.LongMap$Values values2
    public void <init>(int)
    public void <init>(com.badlogic.gdx.utils.LongMap)
    public void clear()
    public void clear(int)
    public boolean containsKey(long)
    public boolean containsValue(java.lang.Object,boolean)
    public void ensureCapacity(int)
    public boolean equalsIdentity(java.lang.Object)
    public long findKey(java.lang.Object,boolean,long)
    public boolean isEmpty()
    public com.badlogic.gdx.utils.LongMap$Keys keys()
    public boolean notEmpty()
    public void putAll(com.badlogic.gdx.utils.LongMap)
    public java.lang.Object remove(long)
    public void shrink(int)
    public com.badlogic.gdx.utils.LongMap$Values values()
com.badlogic.gdx.utils.LongQueue
com.badlogic.gdx.utils.Null
com.badlogic.gdx.utils.NumberUtils:
    public void <init>()
    public static long doubleToLongBits(double)
    public static float intBitsToFloat(int)
    public static double longBitsToDouble(long)
com.badlogic.gdx.utils.ObjectFloatMap$Keys
com.badlogic.gdx.utils.ObjectFloatMap$Values
com.badlogic.gdx.utils.ObjectFloatMap:
    transient com.badlogic.gdx.utils.ObjectFloatMap$Keys keys1
    transient com.badlogic.gdx.utils.ObjectFloatMap$Keys keys2
    transient com.badlogic.gdx.utils.ObjectFloatMap$Values values1
    transient com.badlogic.gdx.utils.ObjectFloatMap$Values values2
    public void <init>(int)
    public void <init>(com.badlogic.gdx.utils.ObjectFloatMap)
    public void clear()
    public void clear(int)
    public boolean containsValue(float)
    public boolean containsValue(float,float)
    public void ensureCapacity(int)
    public java.lang.Object findKey(float)
    public java.lang.Object findKey(float,float)
    public float getAndIncrement(java.lang.Object,float,float)
    public boolean isEmpty()
    public com.badlogic.gdx.utils.ObjectFloatMap$Keys keys()
    public boolean notEmpty()
    public float put(java.lang.Object,float,float)
    public void putAll(com.badlogic.gdx.utils.ObjectFloatMap)
    public float remove(java.lang.Object,float)
    public void shrink(int)
    public java.lang.String toString(java.lang.String)
    public com.badlogic.gdx.utils.ObjectFloatMap$Values values()
com.badlogic.gdx.utils.ObjectIntMap$Keys
com.badlogic.gdx.utils.ObjectIntMap$Values
com.badlogic.gdx.utils.ObjectIntMap:
    transient com.badlogic.gdx.utils.ObjectIntMap$Keys keys1
    transient com.badlogic.gdx.utils.ObjectIntMap$Keys keys2
    transient com.badlogic.gdx.utils.ObjectIntMap$Values values1
    transient com.badlogic.gdx.utils.ObjectIntMap$Values values2
    public void <init>(int)
    public void <init>(com.badlogic.gdx.utils.ObjectIntMap)
    public void clear()
    public void clear(int)
    public boolean containsValue(int)
    public void ensureCapacity(int)
    public java.lang.Object findKey(int)
    public int getAndIncrement(java.lang.Object,int,int)
    public boolean isEmpty()
    public com.badlogic.gdx.utils.ObjectIntMap$Keys keys()
    public boolean notEmpty()
    public int put(java.lang.Object,int,int)
    public void putAll(com.badlogic.gdx.utils.ObjectIntMap)
    public int remove(java.lang.Object,int)
    public void shrink(int)
    public java.lang.String toString(java.lang.String)
    public com.badlogic.gdx.utils.ObjectIntMap$Values values()
com.badlogic.gdx.utils.ObjectLongMap$Entries
com.badlogic.gdx.utils.ObjectLongMap$Entry
com.badlogic.gdx.utils.ObjectLongMap$Keys
com.badlogic.gdx.utils.ObjectLongMap$MapIterator
com.badlogic.gdx.utils.ObjectLongMap$Values
com.badlogic.gdx.utils.ObjectLongMap
com.badlogic.gdx.utils.ObjectMap$Keys:
    public com.badlogic.gdx.utils.Array toArray()
    public com.badlogic.gdx.utils.Array toArray(com.badlogic.gdx.utils.Array)
com.badlogic.gdx.utils.ObjectMap$Values:
    public com.badlogic.gdx.utils.Array toArray()
    public com.badlogic.gdx.utils.Array toArray(com.badlogic.gdx.utils.Array)
com.badlogic.gdx.utils.ObjectMap:
    public void <init>(com.badlogic.gdx.utils.ObjectMap)
    public boolean containsValue(java.lang.Object,boolean)
    public void ensureCapacity(int)
    public boolean equalsIdentity(java.lang.Object)
    public boolean isEmpty()
    public boolean notEmpty()
    public void putAll(com.badlogic.gdx.utils.ObjectMap)
    public void shrink(int)
    public java.lang.String toString(java.lang.String)
com.badlogic.gdx.utils.ObjectSet$ObjectSetIterator:
    public com.badlogic.gdx.utils.Array toArray()
    public com.badlogic.gdx.utils.Array toArray(com.badlogic.gdx.utils.Array)
com.badlogic.gdx.utils.ObjectSet:
    public void <init>(com.badlogic.gdx.utils.ObjectSet)
    public void addAll(com.badlogic.gdx.utils.Array)
    public void addAll(com.badlogic.gdx.utils.Array,int,int)
    public void addAll(com.badlogic.gdx.utils.ObjectSet)
    public varargs boolean addAll(java.lang.Object[])
    public boolean addAll(java.lang.Object[],int,int)
    public java.lang.Object get(java.lang.Object)
    public boolean isEmpty()
    public boolean notEmpty()
    public void shrink(int)
    public static varargs com.badlogic.gdx.utils.ObjectSet with(java.lang.Object[])
com.badlogic.gdx.utils.OrderedMap$OrderedMapKeys:
    public com.badlogic.gdx.utils.Array toArray()
    public com.badlogic.gdx.utils.Array toArray(com.badlogic.gdx.utils.Array)
com.badlogic.gdx.utils.OrderedMap$OrderedMapValues:
    public com.badlogic.gdx.utils.Array toArray()
    public com.badlogic.gdx.utils.Array toArray(com.badlogic.gdx.utils.Array)
com.badlogic.gdx.utils.OrderedMap:
    public void <init>(int,float)
    public void <init>(com.badlogic.gdx.utils.OrderedMap)
    public boolean alter(java.lang.Object,java.lang.Object)
    public boolean alterIndex(int,java.lang.Object)
    public com.badlogic.gdx.utils.Array orderedKeys()
    public void putAll(com.badlogic.gdx.utils.OrderedMap)
com.badlogic.gdx.utils.OrderedSet:
    public void <init>(int)
    public void <init>(int,float)
    public void <init>(com.badlogic.gdx.utils.OrderedSet)
    public boolean add(java.lang.Object,int)
    public boolean alter(java.lang.Object,java.lang.Object)
    public boolean alterIndex(int,java.lang.Object)
    public static varargs com.badlogic.gdx.utils.OrderedSet with(java.lang.Object[])
com.badlogic.gdx.utils.PauseableThread
com.badlogic.gdx.utils.PerformanceCounter
com.badlogic.gdx.utils.PerformanceCounters
com.badlogic.gdx.utils.Pool:
    public void <init>(int)
    public void clear()
    public void fill(int)
    public int getFree()
com.badlogic.gdx.utils.PooledLinkedList$1
com.badlogic.gdx.utils.PooledLinkedList$Item
com.badlogic.gdx.utils.PooledLinkedList
com.badlogic.gdx.utils.Pools:
    private void <init>()
    public static void freeAll(com.badlogic.gdx.utils.Array)
    public static void set(java.lang.Class,com.badlogic.gdx.utils.Pool)
com.badlogic.gdx.utils.Predicate$PredicateIterable
com.badlogic.gdx.utils.Predicate$PredicateIterator
com.badlogic.gdx.utils.Predicate
com.badlogic.gdx.utils.PropertiesUtils
com.badlogic.gdx.utils.QuadTreeFloat$1
com.badlogic.gdx.utils.QuadTreeFloat
com.badlogic.gdx.utils.Queue$QueueIterator:
    public void <init>(com.badlogic.gdx.utils.Queue)
    public void reset()
com.badlogic.gdx.utils.Queue:
    public void <init>(int,java.lang.Class)
    public void addFirst(java.lang.Object)
    public void clear()
    public void ensureCapacity(int)
    public boolean equalsIdentity(java.lang.Object)
    public java.lang.Object first()
    public int indexOf(java.lang.Object,boolean)
    public boolean isEmpty()
    public java.lang.Object last()
    public boolean notEmpty()
    public java.lang.Object removeFirst()
    public java.lang.Object removeLast()
    public boolean removeValue(java.lang.Object,boolean)
    public java.lang.String toString(java.lang.String)
com.badlogic.gdx.utils.QuickSelect
com.badlogic.gdx.utils.ReflectionPool:
    public void <init>(java.lang.Class)
    public void <init>(java.lang.Class,int)
com.badlogic.gdx.utils.ScreenUtils
com.badlogic.gdx.utils.Select
com.badlogic.gdx.utils.SerializationException:
    public void <init>()
    public boolean causedBy(java.lang.Class)
    private boolean causedBy(java.lang.Throwable,java.lang.Class)
com.badlogic.gdx.utils.SharedLibraryLoadRuntimeException:
    private static final long serialVersionUID
com.badlogic.gdx.utils.SharedLibraryLoader:
    public void <init>(java.lang.String)
    private boolean canExecute(java.io.File)
    private boolean canWrite(java.io.File)
    public java.io.File extractFile(java.lang.String,java.lang.String)
    public void extractFileTo(java.lang.String,java.io.File)
    private java.io.File getExtractedFile(java.lang.String,java.lang.String)
    static java.lang.String randomUUID()
com.badlogic.gdx.utils.ShortArray
com.badlogic.gdx.utils.SnapshotArray:
    public void <init>()
    public void <init>(int)
    public void <init>(com.badlogic.gdx.utils.Array)
    public void <init>(boolean,int)
    public void <init>(boolean,java.lang.Object[],int,int)
    public void <init>(java.lang.Object[])
    public void insertRange(int,int)
    public boolean removeAll(com.badlogic.gdx.utils.Array,boolean)
    public java.lang.Object[] setSize(int)
    public void shuffle()
    public static varargs com.badlogic.gdx.utils.SnapshotArray with(java.lang.Object[])
com.badlogic.gdx.utils.Sort:
    public void sort(com.badlogic.gdx.utils.Array)
    public void sort(com.badlogic.gdx.utils.Array,java.util.Comparator)
    public void sort(java.lang.Object[])
    public void sort(java.lang.Object[],java.util.Comparator)
com.badlogic.gdx.utils.SortedIntList$Iterator
com.badlogic.gdx.utils.SortedIntList$Node
com.badlogic.gdx.utils.SortedIntList$NodePool
com.badlogic.gdx.utils.SortedIntList
com.badlogic.gdx.utils.StreamUtils$OptimizedByteArrayOutputStream:
    public byte[] getBuffer()
com.badlogic.gdx.utils.StreamUtils:
    public static final int DEFAULT_BUFFER_SIZE
    public void <init>()
    public static int copyStream(java.io.InputStream,java.nio.ByteBuffer,byte[])
    public static void copyStream(java.io.InputStream,java.io.OutputStream,int)
    public static void copyStream(java.io.InputStream,java.nio.ByteBuffer)
    public static void copyStream(java.io.InputStream,java.nio.ByteBuffer,int)
    public static byte[] copyStreamToByteArray(java.io.InputStream)
    public static java.lang.String copyStreamToString(java.io.InputStream)
    public static java.lang.String copyStreamToString(java.io.InputStream,int)
    public static java.lang.String copyStreamToString(java.io.InputStream,int,java.lang.String)
com.badlogic.gdx.utils.StringBuilder:
    static final int INITIAL_CAPACITY
    public void <init>(com.badlogic.gdx.utils.StringBuilder)
    public void <init>(java.lang.CharSequence)
    public com.badlogic.gdx.utils.StringBuilder append(com.badlogic.gdx.utils.StringBuilder,int,int)
    public com.badlogic.gdx.utils.StringBuilder append(java.lang.String,java.lang.String)
    public com.badlogic.gdx.utils.StringBuilder append(char[],int,int)
    public com.badlogic.gdx.utils.StringBuilder appendCodePoint(int)
    public com.badlogic.gdx.utils.StringBuilder appendLine(java.lang.String)
    public int capacity()
    public int codePointAt(int)
    public int codePointBefore(int)
    public int codePointCount(int,int)
    public boolean contains(java.lang.String)
    public boolean containsIgnoreCase(java.lang.String)
    public com.badlogic.gdx.utils.StringBuilder delete(int,int)
    final void delete0(int,int)
    public com.badlogic.gdx.utils.StringBuilder deleteCharAt(int)
    final void deleteCharAt0(int)
    public void ensureCapacity(int)
    public boolean equalsIgnoreCase(com.badlogic.gdx.utils.StringBuilder)
    public boolean equalsIgnoreCase(java.lang.String)
    public void getChars(int,int,char[],int)
    final char[] getValue()
    public int indexOfIgnoreCase(java.lang.String,int)
    public com.badlogic.gdx.utils.StringBuilder insert(int,char)
    public com.badlogic.gdx.utils.StringBuilder insert(int,double)
    public com.badlogic.gdx.utils.StringBuilder insert(int,float)
    public com.badlogic.gdx.utils.StringBuilder insert(int,int)
    public com.badlogic.gdx.utils.StringBuilder insert(int,long)
    public com.badlogic.gdx.utils.StringBuilder insert(int,java.lang.CharSequence)
    public com.badlogic.gdx.utils.StringBuilder insert(int,java.lang.CharSequence,int,int)
    public com.badlogic.gdx.utils.StringBuilder insert(int,java.lang.Object)
    public com.badlogic.gdx.utils.StringBuilder insert(int,java.lang.String)
    public com.badlogic.gdx.utils.StringBuilder insert(int,boolean)
    public com.badlogic.gdx.utils.StringBuilder insert(int,char[])
    public com.badlogic.gdx.utils.StringBuilder insert(int,char[],int,int)
    final void insert0(int,char)
    final void insert0(int,java.lang.CharSequence,int,int)
    final void insert0(int,char[])
    final void insert0(int,char[],int,int)
    public boolean isEmpty()
    public int lastIndexOf(java.lang.String)
    public int lastIndexOf(java.lang.String,int)
    public boolean notEmpty()
    public int offsetByCodePoints(int,int)
    public com.badlogic.gdx.utils.StringBuilder replace(int,int,java.lang.String)
    public com.badlogic.gdx.utils.StringBuilder replace(java.lang.String,java.lang.String)
    public com.badlogic.gdx.utils.StringBuilder reverse()
    final void reverse0()
    public void setCharAt(int,char)
    public java.lang.String substring(int)
    public java.lang.String toStringAndClear()
    public void trimToSize()
com.badlogic.gdx.utils.TextFormatter
com.badlogic.gdx.utils.TimSort:
    private static final boolean DEBUG
    private static final int INITIAL_TMP_STORAGE_LENGTH
    private static final int MIN_GALLOP
    private static final int MIN_MERGE
    private void <init>(java.lang.Object[],java.util.Comparator)
    static void sort(java.lang.Object[],int,int,java.util.Comparator)
    static void sort(java.lang.Object[],java.util.Comparator)
com.badlogic.gdx.utils.TimeUtils:
    private static final long nanosPerMilli
    public void <init>()
    public static long millisToNanos(long)
    public static long nanosToMillis(long)
    public static long timeSinceMillis(long)
    public static long timeSinceNanos(long)
com.badlogic.gdx.utils.Timer$Task:
    public synchronized long getExecuteTimeMillis()
com.badlogic.gdx.utils.Timer:
    public synchronized void clear()
    public synchronized boolean isEmpty()
    public static com.badlogic.gdx.utils.Timer$Task post(com.badlogic.gdx.utils.Timer$Task)
    public com.badlogic.gdx.utils.Timer$Task postTask(com.badlogic.gdx.utils.Timer$Task)
    public static com.badlogic.gdx.utils.Timer$Task schedule(com.badlogic.gdx.utils.Timer$Task,float,float,int)
    public void stop()
com.badlogic.gdx.utils.UBJsonReader
com.badlogic.gdx.utils.UBJsonWriter$JsonObject
com.badlogic.gdx.utils.UBJsonWriter
com.badlogic.gdx.utils.XmlReader$Element
com.badlogic.gdx.utils.XmlReader
com.badlogic.gdx.utils.XmlWriter
com.badlogic.gdx.utils.async.AsyncExecutor$1
com.badlogic.gdx.utils.async.AsyncExecutor$2
com.badlogic.gdx.utils.async.AsyncExecutor
com.badlogic.gdx.utils.async.AsyncResult
com.badlogic.gdx.utils.async.AsyncTask
com.badlogic.gdx.utils.async.ThreadUtils
com.badlogic.gdx.utils.compression.CRC
com.badlogic.gdx.utils.compression.ICodeProgress
com.badlogic.gdx.utils.compression.Lzma$CommandLine
com.badlogic.gdx.utils.compression.Lzma
com.badlogic.gdx.utils.compression.lz.BinTree
com.badlogic.gdx.utils.compression.lz.InWindow
com.badlogic.gdx.utils.compression.lz.OutWindow
com.badlogic.gdx.utils.compression.lzma.Base
com.badlogic.gdx.utils.compression.lzma.Decoder$LenDecoder
com.badlogic.gdx.utils.compression.lzma.Decoder$LiteralDecoder$Decoder2
com.badlogic.gdx.utils.compression.lzma.Decoder$LiteralDecoder
com.badlogic.gdx.utils.compression.lzma.Decoder
com.badlogic.gdx.utils.compression.lzma.Encoder$LenEncoder
com.badlogic.gdx.utils.compression.lzma.Encoder$LenPriceTableEncoder
com.badlogic.gdx.utils.compression.lzma.Encoder$LiteralEncoder$Encoder2
com.badlogic.gdx.utils.compression.lzma.Encoder$LiteralEncoder
com.badlogic.gdx.utils.compression.lzma.Encoder$Optimal
com.badlogic.gdx.utils.compression.lzma.Encoder
com.badlogic.gdx.utils.compression.rangecoder.BitTreeDecoder
com.badlogic.gdx.utils.compression.rangecoder.BitTreeEncoder
com.badlogic.gdx.utils.compression.rangecoder.Decoder
com.badlogic.gdx.utils.compression.rangecoder.Encoder
com.badlogic.gdx.utils.reflect.Annotation
com.badlogic.gdx.utils.reflect.ArrayReflection:
    public void <init>()
    public static java.lang.Object get(java.lang.Object,int)
    public static int getLength(java.lang.Object)
com.badlogic.gdx.utils.reflect.ClassReflection:
    public void <init>()
    public static com.badlogic.gdx.utils.reflect.Annotation getAnnotation(java.lang.Class,java.lang.Class)
    public static com.badlogic.gdx.utils.reflect.Annotation[] getAnnotations(java.lang.Class)
    public static java.lang.Class getComponentType(java.lang.Class)
    public static com.badlogic.gdx.utils.reflect.Constructor[] getConstructors(java.lang.Class)
    public static com.badlogic.gdx.utils.reflect.Annotation getDeclaredAnnotation(java.lang.Class,java.lang.Class)
    public static com.badlogic.gdx.utils.reflect.Annotation[] getDeclaredAnnotations(java.lang.Class)
    public static com.badlogic.gdx.utils.reflect.Field getDeclaredField(java.lang.Class,java.lang.String)
    public static varargs com.badlogic.gdx.utils.reflect.Method getDeclaredMethod(java.lang.Class,java.lang.String,java.lang.Class[])
    public static com.badlogic.gdx.utils.reflect.Method[] getDeclaredMethods(java.lang.Class)
    public static java.lang.Object[] getEnumConstants(java.lang.Class)
    public static com.badlogic.gdx.utils.reflect.Field getField(java.lang.Class,java.lang.String)
    public static com.badlogic.gdx.utils.reflect.Field[] getFields(java.lang.Class)
    public static java.lang.Class[] getInterfaces(java.lang.Class)
    public static varargs com.badlogic.gdx.utils.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])
    public static boolean isAbstract(java.lang.Class)
    public static boolean isAnnotation(java.lang.Class)
    public static boolean isAnnotationPresent(java.lang.Class,java.lang.Class)
    public static boolean isArray(java.lang.Class)
    public static boolean isEnum(java.lang.Class)
    public static boolean isInterface(java.lang.Class)
    public static boolean isPrimitive(java.lang.Class)
com.badlogic.gdx.utils.reflect.Constructor:
    public java.lang.Class[] getParameterTypes()
    public boolean isAccessible()
com.badlogic.gdx.utils.reflect.Field:
    public com.badlogic.gdx.utils.reflect.Annotation getDeclaredAnnotation(java.lang.Class)
    public com.badlogic.gdx.utils.reflect.Annotation[] getDeclaredAnnotations()
    public boolean isDefaultAccess()
    public boolean isFinal()
    public boolean isPrivate()
    public boolean isProtected()
    public boolean isPublic()
    public boolean isVolatile()
com.badlogic.gdx.utils.reflect.Method:
    public com.badlogic.gdx.utils.reflect.Annotation getDeclaredAnnotation(java.lang.Class)
    public com.badlogic.gdx.utils.reflect.Annotation[] getDeclaredAnnotations()
    public java.lang.Class getDeclaringClass()
    public java.lang.Class[] getParameterTypes()
    public java.lang.Class getReturnType()
    public boolean isAbstract()
    public boolean isAccessible()
    public boolean isAnnotationPresent(java.lang.Class)
    public boolean isDefaultAccess()
    public boolean isFinal()
    public boolean isNative()
    public boolean isPrivate()
    public boolean isProtected()
    public boolean isPublic()
    public boolean isStatic()
    public boolean isVarArgs()
    public void setAccessible(boolean)
com.badlogic.gdx.utils.reflect.ReflectionException:
    public void <init>()
    public void <init>(java.lang.String)
    public void <init>(java.lang.Throwable)
com.badlogic.gdx.utils.viewport.ExtendViewport
com.badlogic.gdx.utils.viewport.FillViewport
com.badlogic.gdx.utils.viewport.FitViewport
com.badlogic.gdx.utils.viewport.ScalingViewport:
    public void <init>(com.badlogic.gdx.utils.Scaling,float,float)
    public com.badlogic.gdx.utils.Scaling getScaling()
    public void setScaling(com.badlogic.gdx.utils.Scaling)
com.badlogic.gdx.utils.viewport.ScreenViewport
com.badlogic.gdx.utils.viewport.StretchViewport
com.badlogic.gdx.utils.viewport.Viewport:
    public void apply()
    public int getBottomGutterHeight()
    public int getLeftGutterWidth()
    public com.badlogic.gdx.math.collision.Ray getPickRay(float,float)
    public int getRightGutterWidth()
    public int getRightGutterX()
    public int getTopGutterHeight()
    public int getTopGutterY()
    public com.badlogic.gdx.math.Vector3 project(com.badlogic.gdx.math.Vector3)
    public void setScreenHeight(int)
    public void setScreenPosition(int,int)
    public void setScreenSize(int,int)
    public void setScreenWidth(int)
    public void setScreenX(int)
    public void setScreenY(int)
    public void setWorldHeight(float)
    public void setWorldWidth(float)
    public com.badlogic.gdx.math.Vector3 unproject(com.badlogic.gdx.math.Vector3)
    public final void update(int,int)
com.badlogicgames.gdx.controllers.BuildConfig
com.badlogicgames.gdx.controllers.R
com.esotericsoftware.spine.Animation$1
com.esotericsoftware.spine.Animation$AttachmentTimeline
com.esotericsoftware.spine.Animation$BoneTimeline
com.esotericsoftware.spine.Animation$ColorTimeline
com.esotericsoftware.spine.Animation$CurveTimeline
com.esotericsoftware.spine.Animation$DeformTimeline
com.esotericsoftware.spine.Animation$DrawOrderTimeline
com.esotericsoftware.spine.Animation$EventTimeline
com.esotericsoftware.spine.Animation$IkConstraintTimeline
com.esotericsoftware.spine.Animation$MixBlend
com.esotericsoftware.spine.Animation$MixDirection
com.esotericsoftware.spine.Animation$PathConstraintMixTimeline
com.esotericsoftware.spine.Animation$PathConstraintPositionTimeline
com.esotericsoftware.spine.Animation$PathConstraintSpacingTimeline
com.esotericsoftware.spine.Animation$RotateTimeline
com.esotericsoftware.spine.Animation$ScaleTimeline
com.esotericsoftware.spine.Animation$ShearTimeline
com.esotericsoftware.spine.Animation$SlotTimeline
com.esotericsoftware.spine.Animation$Timeline
com.esotericsoftware.spine.Animation$TimelineType
com.esotericsoftware.spine.Animation$TransformConstraintTimeline
com.esotericsoftware.spine.Animation$TranslateTimeline
com.esotericsoftware.spine.Animation$TwoColorTimeline
com.esotericsoftware.spine.Animation
com.esotericsoftware.spine.AnimationState$1
com.esotericsoftware.spine.AnimationState$2
com.esotericsoftware.spine.AnimationState$AnimationStateAdapter
com.esotericsoftware.spine.AnimationState$AnimationStateListener
com.esotericsoftware.spine.AnimationState$EventQueue
com.esotericsoftware.spine.AnimationState$EventType
com.esotericsoftware.spine.AnimationState$TrackEntry
com.esotericsoftware.spine.AnimationState
com.esotericsoftware.spine.AnimationStateData$Key
com.esotericsoftware.spine.AnimationStateData
com.esotericsoftware.spine.BlendMode
com.esotericsoftware.spine.Bone$1
com.esotericsoftware.spine.Bone
com.esotericsoftware.spine.BoneData$TransformMode
com.esotericsoftware.spine.BoneData
com.esotericsoftware.spine.ConstraintData
com.esotericsoftware.spine.Event
com.esotericsoftware.spine.EventData
com.esotericsoftware.spine.IkConstraint
com.esotericsoftware.spine.IkConstraintData
com.esotericsoftware.spine.PathConstraint
com.esotericsoftware.spine.PathConstraintData$PositionMode
com.esotericsoftware.spine.PathConstraintData$RotateMode
com.esotericsoftware.spine.PathConstraintData$SpacingMode
com.esotericsoftware.spine.PathConstraintData
com.esotericsoftware.spine.Skeleton
com.esotericsoftware.spine.SkeletonBinary$1
com.esotericsoftware.spine.SkeletonBinary$SkeletonInput
com.esotericsoftware.spine.SkeletonBinary$Vertices
com.esotericsoftware.spine.SkeletonBinary
com.esotericsoftware.spine.SkeletonBounds$1
com.esotericsoftware.spine.SkeletonBounds
com.esotericsoftware.spine.SkeletonData
com.esotericsoftware.spine.SkeletonJson$1
com.esotericsoftware.spine.SkeletonJson$LinkedMesh
com.esotericsoftware.spine.SkeletonJson
com.esotericsoftware.spine.SkeletonRenderer$VertexEffect
com.esotericsoftware.spine.SkeletonRenderer
com.esotericsoftware.spine.SkeletonRendererDebug
com.esotericsoftware.spine.Skin$SkinEntry
com.esotericsoftware.spine.Skin
com.esotericsoftware.spine.Slot
com.esotericsoftware.spine.SlotData
com.esotericsoftware.spine.TransformConstraint
com.esotericsoftware.spine.TransformConstraintData
com.esotericsoftware.spine.Updatable
com.esotericsoftware.spine.attachments.AtlasAttachmentLoader
com.esotericsoftware.spine.attachments.Attachment
com.esotericsoftware.spine.attachments.AttachmentLoader
com.esotericsoftware.spine.attachments.AttachmentType
com.esotericsoftware.spine.attachments.BoundingBoxAttachment
com.esotericsoftware.spine.attachments.ClippingAttachment
com.esotericsoftware.spine.attachments.MeshAttachment
com.esotericsoftware.spine.attachments.PathAttachment
com.esotericsoftware.spine.attachments.PointAttachment
com.esotericsoftware.spine.attachments.RegionAttachment
com.esotericsoftware.spine.attachments.SkeletonAttachment
com.esotericsoftware.spine.attachments.VertexAttachment
com.esotericsoftware.spine.utils.SkeletonActor
com.esotericsoftware.spine.utils.SkeletonActorPool$1
com.esotericsoftware.spine.utils.SkeletonActorPool$2
com.esotericsoftware.spine.utils.SkeletonActorPool
com.esotericsoftware.spine.utils.SkeletonClipping
com.esotericsoftware.spine.utils.SkeletonDrawable
com.esotericsoftware.spine.utils.SkeletonPool
com.esotericsoftware.spine.utils.SpineUtils
com.esotericsoftware.spine.utils.Triangulator$1
com.esotericsoftware.spine.utils.Triangulator$2
com.esotericsoftware.spine.utils.Triangulator
com.esotericsoftware.spine.utils.TwoColorPolygonBatch
com.esotericsoftware.spine.vertexeffects.JitterEffect
com.esotericsoftware.spine.vertexeffects.SwirlEffect
net.nminh.candycrush.R$color
net.nminh.candycrush.R$drawable
net.nminh.candycrush.R$string
net.nminh.candycrush.R$style
net.nminh.candycrush.R
net.nminh.match3game.Field$1$1
net.nminh.match3game.Field$1$2
net.nminh.match3game.Field$1
net.nminh.match3game.Field
net.nminh.match3game.actors.Board:
    public void <init>(com.badlogic.gdx.utils.Array,int,int,int,com.badlogic.gdx.math.Vector2)
    private void RemoveTile()
    private boolean findMatches()
    private void initialize(int,int,int,com.badlogic.gdx.math.Vector2)
net.nminh.match3game.actors.Grid:
    public void <init>(int,int,float,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.graphics.g2d.TextureRegion,com.badlogic.gdx.graphics.g2d.TextureRegion)
net.nminh.match3game.actors.spine.FarmGirl
net.nminh.match3game.utils.Assets:
    public void <init>()
    public static com.badlogic.gdx.graphics.g2d.TextureAtlas getSettingPOPUP()
    public static com.badlogic.gdx.graphics.g2d.TextureAtlas getSpineAtlas(java.lang.String)
net.nminh.match3game.utils.Candy
net.nminh.match3game.utils.Consts:
    public static final java.lang.String CHAR1_ATLAS
    public static final java.lang.String CHAR2_ATLAS
    public static final java.lang.String CHAR3_ATLAS
    public static final int COL
    public static final java.lang.String COLOR1
    public static final java.lang.String COLOR2
    public static final java.lang.String COLOR3
    public static final java.lang.String COLOR4
    public static final java.lang.String COLOR5
    public static final java.lang.String FARMERGIRL_ATLAS
    public static final java.lang.String FARMERGIRL_SKEL
    public static final java.lang.String GAMESCREEN_BACKGROUNDMOVEREMAIN
    public static final java.lang.String GAMESCREEN_BG
    public static final java.lang.String GAMESCREEN_PROCESS
    public static final java.lang.String HOMESCREEN_BG
    public static final java.lang.String HOMESCREEN_CHAR_LAYOUT
    public static final java.lang.String HOMESCREEN_PLAY_BTN
    public static final java.lang.String HOMESCREEN_RATE_BTN
    public static final java.lang.String HOMESCREEN_SETTING_BTN
    public static final java.lang.String LOGO_BG
    public static final java.lang.String LOGO_CAKE
    public static final java.lang.String LOGO_GREEN_DONUT
    public static final java.lang.String LOGO_MATCH3
    public static final java.lang.String LOGO_PURPLE_DONUT
    public static final java.lang.String LOGO_SWEET
    public static final int ROW
    public static final java.lang.String SETTING_POPUP
    public static final int SIZE
    public static final java.lang.String TEXTURES_ATLAS
    public static final java.lang.String VIDEO_URL
    public static final float VIEWPORT_HEIGHT
    public static final float VIEWPORT_WIDTH
    public static final java.lang.String Video_Url
    public void <init>()
net.nminh.match3game.utils.Tile:
    private boolean a
    public int getType()
    public void init(com.badlogic.gdx.graphics.g2d.TextureRegion)
net.nminh.match3game.utils.Utils:
    public void <init>()
shaders.DiffuseShader
shaders.Gaussian
shaders.LightShader
shaders.ShadowShader
shaders.WithoutShadowShader
com.badlogic.gdx.assets.AssetLoaderParameters$LoadedCallback
com.badlogic.gdx.assets.AssetLoaderParameters
com.badlogic.gdx.assets.AssetManager
com.badlogic.gdx.assets.loaders.CubemapLoader$CubemapParameter
com.badlogic.gdx.assets.loaders.TextureLoader$TextureParameter
com.badlogic.gdx.audio.Music$OnCompletionListener
com.badlogic.gdx.audio.Music
com.badlogic.gdx.backends.android.AndroidFileHandle:
    public boolean isDirectory()
com.badlogic.gdx.backends.android.AndroidFiles:
    public abstract com.badlogic.gdx.backends.android.ZipResourceFile getExpansionFile()
com.badlogic.gdx.backends.android.AndroidGL20:
    public void glBindRenderbuffer(int,int)
    public int glCheckFramebufferStatus(int)
    public void glFramebufferRenderbuffer(int,int,int,int)
    public void glFramebufferTexture2D(int,int,int,int,int)
    public int glGenRenderbuffer()
    public void glRenderbufferStorage(int,int,int,int)
com.badlogic.gdx.backends.android.AndroidGL30:
    public void glDrawArraysInstanced(int,int,int,int)
    public void glDrawBuffers(int,java.nio.IntBuffer)
    public void glDrawElementsInstanced(int,int,int,int,int)
com.badlogic.gdx.backends.android.AndroidMusic$1
com.badlogic.gdx.backends.android.AndroidMusic:
    protected com.badlogic.gdx.audio.Music$OnCompletionListener onCompletionListener
com.badlogic.gdx.backends.android.AndroidZipFileHandle
com.badlogic.gdx.backends.android.DefaultAndroidFiles:
    private com.badlogic.gdx.backends.android.ZipResourceFile expansionFile
    public com.badlogic.gdx.backends.android.ZipResourceFile getExpansionFile()
    private com.badlogic.gdx.files.FileHandle getZipFileHandleIfExists(com.badlogic.gdx.files.FileHandle,java.lang.String)
com.badlogic.gdx.backends.android.ZipResourceFile$ZipEntryRO
com.badlogic.gdx.backends.android.ZipResourceFile
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$ConfigChooser:
    private static int EGL_OPENGL_ES2_BIT
com.badlogic.gdx.files.FileHandle:
    public boolean isDirectory()
com.badlogic.gdx.graphics.Cubemap$1
com.badlogic.gdx.graphics.Cubemap:
    private static com.badlogic.gdx.assets.AssetManager assetManager
    public com.badlogic.gdx.graphics.CubemapData getCubemapData()
com.badlogic.gdx.graphics.GL20:
    public abstract void glBindRenderbuffer(int,int)
    public abstract int glCheckFramebufferStatus(int)
    public abstract void glFramebufferRenderbuffer(int,int,int,int)
    public abstract void glFramebufferTexture2D(int,int,int,int,int)
    public abstract int glGenRenderbuffer()
    public abstract void glRenderbufferStorage(int,int,int,int)
com.badlogic.gdx.graphics.GL30:
    public abstract void glDrawArraysInstanced(int,int,int,int)
    public abstract void glDrawBuffers(int,java.nio.IntBuffer)
    public abstract void glDrawElementsInstanced(int,int,int,int,int)
com.badlogic.gdx.graphics.GLTexture:
    public int getTextureObjectHandle()
    public com.badlogic.gdx.graphics.Texture$TextureWrap getUWrap()
    public com.badlogic.gdx.graphics.Texture$TextureWrap getVWrap()
com.badlogic.gdx.graphics.Mesh:
    com.badlogic.gdx.graphics.glutils.InstanceData instances
com.badlogic.gdx.graphics.Texture$1
com.badlogic.gdx.graphics.Texture:
    private static com.badlogic.gdx.assets.AssetManager assetManager
    public com.badlogic.gdx.graphics.TextureData getTextureData()
com.badlogic.gdx.graphics.TextureArray:
    private com.badlogic.gdx.graphics.TextureArrayData data
com.badlogic.gdx.graphics.TextureArrayData:
    public abstract boolean isManaged()
com.badlogic.gdx.graphics.glutils.FrameBuffer
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferRenderBufferAttachmentSpec
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferTextureAttachmentSpec
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder
com.badlogic.gdx.graphics.glutils.GLFrameBuffer:
    protected com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder bufferBuilder
    protected int depthbufferHandle
    protected boolean isMRT
    protected int stencilbufferHandle
    private static void addManagedFrameBuffer(com.badlogic.gdx.Application,com.badlogic.gdx.graphics.glutils.GLFrameBuffer)
    protected abstract void attachFrameBufferColorTexture(com.badlogic.gdx.graphics.GLTexture)
    protected abstract com.badlogic.gdx.graphics.GLTexture createTexture(com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferTextureAttachmentSpec)
com.badlogic.gdx.graphics.glutils.InstanceData
com.badlogic.gdx.utils.Array:
    public void <init>(com.badlogic.gdx.utils.Array)
